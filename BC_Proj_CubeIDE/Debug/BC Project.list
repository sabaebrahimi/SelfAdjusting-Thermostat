
BC Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005470  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002bb8c  08005654  08005654  00015654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080311e0  080311e0  0005009c  2**0
                  CONTENTS
  4 .ARM          00000000  080311e0  080311e0  0005009c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080311e0  080311e0  0005009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080311e0  080311e0  000411e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080311e4  080311e4  000411e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  080311e8  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  2000009c  08031284  0005009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f8  08031284  000501f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0005009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a955  00000000  00000000  000500c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d86  00000000  00000000  0005aa1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c10  00000000  00000000  0005c7a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ad0  00000000  00000000  0005d3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ae26  00000000  00000000  0005de80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d485  00000000  00000000  00078ca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009cdfe  00000000  00000000  0008612b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00122f29  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035cc  00000000  00000000  00122f7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000009c 	.word	0x2000009c
 8000200:	00000000 	.word	0x00000000
 8000204:	0800563c 	.word	0x0800563c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200000a0 	.word	0x200000a0
 8000220:	0800563c 	.word	0x0800563c

08000224 <__aeabi_drsub>:
 8000224:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000228:	e002      	b.n	8000230 <__adddf3>
 800022a:	bf00      	nop

0800022c <__aeabi_dsub>:
 800022c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000230 <__adddf3>:
 8000230:	b530      	push	{r4, r5, lr}
 8000232:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000236:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023a:	ea94 0f05 	teq	r4, r5
 800023e:	bf08      	it	eq
 8000240:	ea90 0f02 	teqeq	r0, r2
 8000244:	bf1f      	itttt	ne
 8000246:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000252:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000256:	f000 80e2 	beq.w	800041e <__adddf3+0x1ee>
 800025a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000262:	bfb8      	it	lt
 8000264:	426d      	neglt	r5, r5
 8000266:	dd0c      	ble.n	8000282 <__adddf3+0x52>
 8000268:	442c      	add	r4, r5
 800026a:	ea80 0202 	eor.w	r2, r0, r2
 800026e:	ea81 0303 	eor.w	r3, r1, r3
 8000272:	ea82 0000 	eor.w	r0, r2, r0
 8000276:	ea83 0101 	eor.w	r1, r3, r1
 800027a:	ea80 0202 	eor.w	r2, r0, r2
 800027e:	ea81 0303 	eor.w	r3, r1, r3
 8000282:	2d36      	cmp	r5, #54	; 0x36
 8000284:	bf88      	it	hi
 8000286:	bd30      	pophi	{r4, r5, pc}
 8000288:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800028c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000290:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000294:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x70>
 800029a:	4240      	negs	r0, r0
 800029c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x84>
 80002ae:	4252      	negs	r2, r2
 80002b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b4:	ea94 0f05 	teq	r4, r5
 80002b8:	f000 80a7 	beq.w	800040a <__adddf3+0x1da>
 80002bc:	f1a4 0401 	sub.w	r4, r4, #1
 80002c0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c4:	db0d      	blt.n	80002e2 <__adddf3+0xb2>
 80002c6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ca:	fa22 f205 	lsr.w	r2, r2, r5
 80002ce:	1880      	adds	r0, r0, r2
 80002d0:	f141 0100 	adc.w	r1, r1, #0
 80002d4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d8:	1880      	adds	r0, r0, r2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	4159      	adcs	r1, r3
 80002e0:	e00e      	b.n	8000300 <__adddf3+0xd0>
 80002e2:	f1a5 0520 	sub.w	r5, r5, #32
 80002e6:	f10e 0e20 	add.w	lr, lr, #32
 80002ea:	2a01      	cmp	r2, #1
 80002ec:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f0:	bf28      	it	cs
 80002f2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	18c0      	adds	r0, r0, r3
 80002fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000300:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000304:	d507      	bpl.n	8000316 <__adddf3+0xe6>
 8000306:	f04f 0e00 	mov.w	lr, #0
 800030a:	f1dc 0c00 	rsbs	ip, ip, #0
 800030e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000312:	eb6e 0101 	sbc.w	r1, lr, r1
 8000316:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031a:	d31b      	bcc.n	8000354 <__adddf3+0x124>
 800031c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000320:	d30c      	bcc.n	800033c <__adddf3+0x10c>
 8000322:	0849      	lsrs	r1, r1, #1
 8000324:	ea5f 0030 	movs.w	r0, r0, rrx
 8000328:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800032c:	f104 0401 	add.w	r4, r4, #1
 8000330:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000334:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000338:	f080 809a 	bcs.w	8000470 <__adddf3+0x240>
 800033c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000340:	bf08      	it	eq
 8000342:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000346:	f150 0000 	adcs.w	r0, r0, #0
 800034a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034e:	ea41 0105 	orr.w	r1, r1, r5
 8000352:	bd30      	pop	{r4, r5, pc}
 8000354:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000358:	4140      	adcs	r0, r0
 800035a:	eb41 0101 	adc.w	r1, r1, r1
 800035e:	3c01      	subs	r4, #1
 8000360:	bf28      	it	cs
 8000362:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000366:	d2e9      	bcs.n	800033c <__adddf3+0x10c>
 8000368:	f091 0f00 	teq	r1, #0
 800036c:	bf04      	itt	eq
 800036e:	4601      	moveq	r1, r0
 8000370:	2000      	moveq	r0, #0
 8000372:	fab1 f381 	clz	r3, r1
 8000376:	bf08      	it	eq
 8000378:	3320      	addeq	r3, #32
 800037a:	f1a3 030b 	sub.w	r3, r3, #11
 800037e:	f1b3 0220 	subs.w	r2, r3, #32
 8000382:	da0c      	bge.n	800039e <__adddf3+0x16e>
 8000384:	320c      	adds	r2, #12
 8000386:	dd08      	ble.n	800039a <__adddf3+0x16a>
 8000388:	f102 0c14 	add.w	ip, r2, #20
 800038c:	f1c2 020c 	rsb	r2, r2, #12
 8000390:	fa01 f00c 	lsl.w	r0, r1, ip
 8000394:	fa21 f102 	lsr.w	r1, r1, r2
 8000398:	e00c      	b.n	80003b4 <__adddf3+0x184>
 800039a:	f102 0214 	add.w	r2, r2, #20
 800039e:	bfd8      	it	le
 80003a0:	f1c2 0c20 	rsble	ip, r2, #32
 80003a4:	fa01 f102 	lsl.w	r1, r1, r2
 80003a8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003ac:	bfdc      	itt	le
 80003ae:	ea41 010c 	orrle.w	r1, r1, ip
 80003b2:	4090      	lslle	r0, r2
 80003b4:	1ae4      	subs	r4, r4, r3
 80003b6:	bfa2      	ittt	ge
 80003b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003bc:	4329      	orrge	r1, r5
 80003be:	bd30      	popge	{r4, r5, pc}
 80003c0:	ea6f 0404 	mvn.w	r4, r4
 80003c4:	3c1f      	subs	r4, #31
 80003c6:	da1c      	bge.n	8000402 <__adddf3+0x1d2>
 80003c8:	340c      	adds	r4, #12
 80003ca:	dc0e      	bgt.n	80003ea <__adddf3+0x1ba>
 80003cc:	f104 0414 	add.w	r4, r4, #20
 80003d0:	f1c4 0220 	rsb	r2, r4, #32
 80003d4:	fa20 f004 	lsr.w	r0, r0, r4
 80003d8:	fa01 f302 	lsl.w	r3, r1, r2
 80003dc:	ea40 0003 	orr.w	r0, r0, r3
 80003e0:	fa21 f304 	lsr.w	r3, r1, r4
 80003e4:	ea45 0103 	orr.w	r1, r5, r3
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	f1c4 040c 	rsb	r4, r4, #12
 80003ee:	f1c4 0220 	rsb	r2, r4, #32
 80003f2:	fa20 f002 	lsr.w	r0, r0, r2
 80003f6:	fa01 f304 	lsl.w	r3, r1, r4
 80003fa:	ea40 0003 	orr.w	r0, r0, r3
 80003fe:	4629      	mov	r1, r5
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	fa21 f004 	lsr.w	r0, r1, r4
 8000406:	4629      	mov	r1, r5
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	f094 0f00 	teq	r4, #0
 800040e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000412:	bf06      	itte	eq
 8000414:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000418:	3401      	addeq	r4, #1
 800041a:	3d01      	subne	r5, #1
 800041c:	e74e      	b.n	80002bc <__adddf3+0x8c>
 800041e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000422:	bf18      	it	ne
 8000424:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000428:	d029      	beq.n	800047e <__adddf3+0x24e>
 800042a:	ea94 0f05 	teq	r4, r5
 800042e:	bf08      	it	eq
 8000430:	ea90 0f02 	teqeq	r0, r2
 8000434:	d005      	beq.n	8000442 <__adddf3+0x212>
 8000436:	ea54 0c00 	orrs.w	ip, r4, r0
 800043a:	bf04      	itt	eq
 800043c:	4619      	moveq	r1, r3
 800043e:	4610      	moveq	r0, r2
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea91 0f03 	teq	r1, r3
 8000446:	bf1e      	ittt	ne
 8000448:	2100      	movne	r1, #0
 800044a:	2000      	movne	r0, #0
 800044c:	bd30      	popne	{r4, r5, pc}
 800044e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000452:	d105      	bne.n	8000460 <__adddf3+0x230>
 8000454:	0040      	lsls	r0, r0, #1
 8000456:	4149      	adcs	r1, r1
 8000458:	bf28      	it	cs
 800045a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045e:	bd30      	pop	{r4, r5, pc}
 8000460:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000464:	bf3c      	itt	cc
 8000466:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046a:	bd30      	popcc	{r4, r5, pc}
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000474:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000478:	f04f 0000 	mov.w	r0, #0
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000482:	bf1a      	itte	ne
 8000484:	4619      	movne	r1, r3
 8000486:	4610      	movne	r0, r2
 8000488:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800048c:	bf1c      	itt	ne
 800048e:	460b      	movne	r3, r1
 8000490:	4602      	movne	r2, r0
 8000492:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000496:	bf06      	itte	eq
 8000498:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800049c:	ea91 0f03 	teqeq	r1, r3
 80004a0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	bf00      	nop

080004a8 <__aeabi_ui2d>:
 80004a8:	f090 0f00 	teq	r0, #0
 80004ac:	bf04      	itt	eq
 80004ae:	2100      	moveq	r1, #0
 80004b0:	4770      	bxeq	lr
 80004b2:	b530      	push	{r4, r5, lr}
 80004b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004bc:	f04f 0500 	mov.w	r5, #0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e750      	b.n	8000368 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_i2d>:
 80004c8:	f090 0f00 	teq	r0, #0
 80004cc:	bf04      	itt	eq
 80004ce:	2100      	moveq	r1, #0
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004dc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e0:	bf48      	it	mi
 80004e2:	4240      	negmi	r0, r0
 80004e4:	f04f 0100 	mov.w	r1, #0
 80004e8:	e73e      	b.n	8000368 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_f2d>:
 80004ec:	0042      	lsls	r2, r0, #1
 80004ee:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fa:	bf1f      	itttt	ne
 80004fc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000500:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000504:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000508:	4770      	bxne	lr
 800050a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050e:	bf08      	it	eq
 8000510:	4770      	bxeq	lr
 8000512:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000516:	bf04      	itt	eq
 8000518:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000524:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000528:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800052c:	e71c      	b.n	8000368 <__adddf3+0x138>
 800052e:	bf00      	nop

08000530 <__aeabi_ul2d>:
 8000530:	ea50 0201 	orrs.w	r2, r0, r1
 8000534:	bf08      	it	eq
 8000536:	4770      	bxeq	lr
 8000538:	b530      	push	{r4, r5, lr}
 800053a:	f04f 0500 	mov.w	r5, #0
 800053e:	e00a      	b.n	8000556 <__aeabi_l2d+0x16>

08000540 <__aeabi_l2d>:
 8000540:	ea50 0201 	orrs.w	r2, r0, r1
 8000544:	bf08      	it	eq
 8000546:	4770      	bxeq	lr
 8000548:	b530      	push	{r4, r5, lr}
 800054a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054e:	d502      	bpl.n	8000556 <__aeabi_l2d+0x16>
 8000550:	4240      	negs	r0, r0
 8000552:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000556:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000562:	f43f aed8 	beq.w	8000316 <__adddf3+0xe6>
 8000566:	f04f 0203 	mov.w	r2, #3
 800056a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056e:	bf18      	it	ne
 8000570:	3203      	addne	r2, #3
 8000572:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000576:	bf18      	it	ne
 8000578:	3203      	addne	r2, #3
 800057a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057e:	f1c2 0320 	rsb	r3, r2, #32
 8000582:	fa00 fc03 	lsl.w	ip, r0, r3
 8000586:	fa20 f002 	lsr.w	r0, r0, r2
 800058a:	fa01 fe03 	lsl.w	lr, r1, r3
 800058e:	ea40 000e 	orr.w	r0, r0, lr
 8000592:	fa21 f102 	lsr.w	r1, r1, r2
 8000596:	4414      	add	r4, r2
 8000598:	e6bd      	b.n	8000316 <__adddf3+0xe6>
 800059a:	bf00      	nop

0800059c <__aeabi_dmul>:
 800059c:	b570      	push	{r4, r5, r6, lr}
 800059e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005aa:	bf1d      	ittte	ne
 80005ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b0:	ea94 0f0c 	teqne	r4, ip
 80005b4:	ea95 0f0c 	teqne	r5, ip
 80005b8:	f000 f8de 	bleq	8000778 <__aeabi_dmul+0x1dc>
 80005bc:	442c      	add	r4, r5
 80005be:	ea81 0603 	eor.w	r6, r1, r3
 80005c2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ca:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ce:	bf18      	it	ne
 80005d0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005dc:	d038      	beq.n	8000650 <__aeabi_dmul+0xb4>
 80005de:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e2:	f04f 0500 	mov.w	r5, #0
 80005e6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ea:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ee:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f2:	f04f 0600 	mov.w	r6, #0
 80005f6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fa:	f09c 0f00 	teq	ip, #0
 80005fe:	bf18      	it	ne
 8000600:	f04e 0e01 	orrne.w	lr, lr, #1
 8000604:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000608:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800060c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000610:	d204      	bcs.n	800061c <__aeabi_dmul+0x80>
 8000612:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000616:	416d      	adcs	r5, r5
 8000618:	eb46 0606 	adc.w	r6, r6, r6
 800061c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000620:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000624:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000628:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800062c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000630:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000634:	bf88      	it	hi
 8000636:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063a:	d81e      	bhi.n	800067a <__aeabi_dmul+0xde>
 800063c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000640:	bf08      	it	eq
 8000642:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000646:	f150 0000 	adcs.w	r0, r0, #0
 800064a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000654:	ea46 0101 	orr.w	r1, r6, r1
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	ea81 0103 	eor.w	r1, r1, r3
 8000660:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000664:	bfc2      	ittt	gt
 8000666:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066e:	bd70      	popgt	{r4, r5, r6, pc}
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f04f 0e00 	mov.w	lr, #0
 8000678:	3c01      	subs	r4, #1
 800067a:	f300 80ab 	bgt.w	80007d4 <__aeabi_dmul+0x238>
 800067e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000682:	bfde      	ittt	le
 8000684:	2000      	movle	r0, #0
 8000686:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068a:	bd70      	pople	{r4, r5, r6, pc}
 800068c:	f1c4 0400 	rsb	r4, r4, #0
 8000690:	3c20      	subs	r4, #32
 8000692:	da35      	bge.n	8000700 <__aeabi_dmul+0x164>
 8000694:	340c      	adds	r4, #12
 8000696:	dc1b      	bgt.n	80006d0 <__aeabi_dmul+0x134>
 8000698:	f104 0414 	add.w	r4, r4, #20
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f305 	lsl.w	r3, r0, r5
 80006a4:	fa20 f004 	lsr.w	r0, r0, r4
 80006a8:	fa01 f205 	lsl.w	r2, r1, r5
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	fa21 f604 	lsr.w	r6, r1, r4
 80006c0:	eb42 0106 	adc.w	r1, r2, r6
 80006c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c8:	bf08      	it	eq
 80006ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ce:	bd70      	pop	{r4, r5, r6, pc}
 80006d0:	f1c4 040c 	rsb	r4, r4, #12
 80006d4:	f1c4 0520 	rsb	r5, r4, #32
 80006d8:	fa00 f304 	lsl.w	r3, r0, r4
 80006dc:	fa20 f005 	lsr.w	r0, r0, r5
 80006e0:	fa01 f204 	lsl.w	r2, r1, r4
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f0:	f141 0100 	adc.w	r1, r1, #0
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f205 	lsl.w	r2, r0, r5
 8000708:	ea4e 0e02 	orr.w	lr, lr, r2
 800070c:	fa20 f304 	lsr.w	r3, r0, r4
 8000710:	fa01 f205 	lsl.w	r2, r1, r5
 8000714:	ea43 0302 	orr.w	r3, r3, r2
 8000718:	fa21 f004 	lsr.w	r0, r1, r4
 800071c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000720:	fa21 f204 	lsr.w	r2, r1, r4
 8000724:	ea20 0002 	bic.w	r0, r0, r2
 8000728:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800072c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000730:	bf08      	it	eq
 8000732:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000736:	bd70      	pop	{r4, r5, r6, pc}
 8000738:	f094 0f00 	teq	r4, #0
 800073c:	d10f      	bne.n	800075e <__aeabi_dmul+0x1c2>
 800073e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000742:	0040      	lsls	r0, r0, #1
 8000744:	eb41 0101 	adc.w	r1, r1, r1
 8000748:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800074c:	bf08      	it	eq
 800074e:	3c01      	subeq	r4, #1
 8000750:	d0f7      	beq.n	8000742 <__aeabi_dmul+0x1a6>
 8000752:	ea41 0106 	orr.w	r1, r1, r6
 8000756:	f095 0f00 	teq	r5, #0
 800075a:	bf18      	it	ne
 800075c:	4770      	bxne	lr
 800075e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000762:	0052      	lsls	r2, r2, #1
 8000764:	eb43 0303 	adc.w	r3, r3, r3
 8000768:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800076c:	bf08      	it	eq
 800076e:	3d01      	subeq	r5, #1
 8000770:	d0f7      	beq.n	8000762 <__aeabi_dmul+0x1c6>
 8000772:	ea43 0306 	orr.w	r3, r3, r6
 8000776:	4770      	bx	lr
 8000778:	ea94 0f0c 	teq	r4, ip
 800077c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000780:	bf18      	it	ne
 8000782:	ea95 0f0c 	teqne	r5, ip
 8000786:	d00c      	beq.n	80007a2 <__aeabi_dmul+0x206>
 8000788:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078c:	bf18      	it	ne
 800078e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000792:	d1d1      	bne.n	8000738 <__aeabi_dmul+0x19c>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a6:	bf06      	itte	eq
 80007a8:	4610      	moveq	r0, r2
 80007aa:	4619      	moveq	r1, r3
 80007ac:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b0:	d019      	beq.n	80007e6 <__aeabi_dmul+0x24a>
 80007b2:	ea94 0f0c 	teq	r4, ip
 80007b6:	d102      	bne.n	80007be <__aeabi_dmul+0x222>
 80007b8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007bc:	d113      	bne.n	80007e6 <__aeabi_dmul+0x24a>
 80007be:	ea95 0f0c 	teq	r5, ip
 80007c2:	d105      	bne.n	80007d0 <__aeabi_dmul+0x234>
 80007c4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c8:	bf1c      	itt	ne
 80007ca:	4610      	movne	r0, r2
 80007cc:	4619      	movne	r1, r3
 80007ce:	d10a      	bne.n	80007e6 <__aeabi_dmul+0x24a>
 80007d0:	ea81 0103 	eor.w	r1, r1, r3
 80007d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e0:	f04f 0000 	mov.w	r0, #0
 80007e4:	bd70      	pop	{r4, r5, r6, pc}
 80007e6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ea:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ee:	bd70      	pop	{r4, r5, r6, pc}

080007f0 <__aeabi_ddiv>:
 80007f0:	b570      	push	{r4, r5, r6, lr}
 80007f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fe:	bf1d      	ittte	ne
 8000800:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000804:	ea94 0f0c 	teqne	r4, ip
 8000808:	ea95 0f0c 	teqne	r5, ip
 800080c:	f000 f8a7 	bleq	800095e <__aeabi_ddiv+0x16e>
 8000810:	eba4 0405 	sub.w	r4, r4, r5
 8000814:	ea81 0e03 	eor.w	lr, r1, r3
 8000818:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800081c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000820:	f000 8088 	beq.w	8000934 <__aeabi_ddiv+0x144>
 8000824:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000828:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800082c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000830:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000834:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000838:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800083c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000840:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000844:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000848:	429d      	cmp	r5, r3
 800084a:	bf08      	it	eq
 800084c:	4296      	cmpeq	r6, r2
 800084e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000852:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000856:	d202      	bcs.n	800085e <__aeabi_ddiv+0x6e>
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	1ab6      	subs	r6, r6, r2
 8000860:	eb65 0503 	sbc.w	r5, r5, r3
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000872:	ebb6 0e02 	subs.w	lr, r6, r2
 8000876:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087a:	bf22      	ittt	cs
 800087c:	1ab6      	subcs	r6, r6, r2
 800087e:	4675      	movcs	r5, lr
 8000880:	ea40 000c 	orrcs.w	r0, r0, ip
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	ebb6 0e02 	subs.w	lr, r6, r2
 800088e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000892:	bf22      	ittt	cs
 8000894:	1ab6      	subcs	r6, r6, r2
 8000896:	4675      	movcs	r5, lr
 8000898:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800089c:	085b      	lsrs	r3, r3, #1
 800089e:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008aa:	bf22      	ittt	cs
 80008ac:	1ab6      	subcs	r6, r6, r2
 80008ae:	4675      	movcs	r5, lr
 80008b0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	ebb6 0e02 	subs.w	lr, r6, r2
 80008be:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c2:	bf22      	ittt	cs
 80008c4:	1ab6      	subcs	r6, r6, r2
 80008c6:	4675      	movcs	r5, lr
 80008c8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008cc:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d0:	d018      	beq.n	8000904 <__aeabi_ddiv+0x114>
 80008d2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008da:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008de:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ea:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ee:	d1c0      	bne.n	8000872 <__aeabi_ddiv+0x82>
 80008f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f4:	d10b      	bne.n	800090e <__aeabi_ddiv+0x11e>
 80008f6:	ea41 0100 	orr.w	r1, r1, r0
 80008fa:	f04f 0000 	mov.w	r0, #0
 80008fe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000902:	e7b6      	b.n	8000872 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	bf04      	itt	eq
 800090a:	4301      	orreq	r1, r0
 800090c:	2000      	moveq	r0, #0
 800090e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000912:	bf88      	it	hi
 8000914:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000918:	f63f aeaf 	bhi.w	800067a <__aeabi_dmul+0xde>
 800091c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000920:	bf04      	itt	eq
 8000922:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000926:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092a:	f150 0000 	adcs.w	r0, r0, #0
 800092e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000932:	bd70      	pop	{r4, r5, r6, pc}
 8000934:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000938:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800093c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000940:	bfc2      	ittt	gt
 8000942:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000946:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094a:	bd70      	popgt	{r4, r5, r6, pc}
 800094c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000950:	f04f 0e00 	mov.w	lr, #0
 8000954:	3c01      	subs	r4, #1
 8000956:	e690      	b.n	800067a <__aeabi_dmul+0xde>
 8000958:	ea45 0e06 	orr.w	lr, r5, r6
 800095c:	e68d      	b.n	800067a <__aeabi_dmul+0xde>
 800095e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000962:	ea94 0f0c 	teq	r4, ip
 8000966:	bf08      	it	eq
 8000968:	ea95 0f0c 	teqeq	r5, ip
 800096c:	f43f af3b 	beq.w	80007e6 <__aeabi_dmul+0x24a>
 8000970:	ea94 0f0c 	teq	r4, ip
 8000974:	d10a      	bne.n	800098c <__aeabi_ddiv+0x19c>
 8000976:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097a:	f47f af34 	bne.w	80007e6 <__aeabi_dmul+0x24a>
 800097e:	ea95 0f0c 	teq	r5, ip
 8000982:	f47f af25 	bne.w	80007d0 <__aeabi_dmul+0x234>
 8000986:	4610      	mov	r0, r2
 8000988:	4619      	mov	r1, r3
 800098a:	e72c      	b.n	80007e6 <__aeabi_dmul+0x24a>
 800098c:	ea95 0f0c 	teq	r5, ip
 8000990:	d106      	bne.n	80009a0 <__aeabi_ddiv+0x1b0>
 8000992:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000996:	f43f aefd 	beq.w	8000794 <__aeabi_dmul+0x1f8>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e722      	b.n	80007e6 <__aeabi_dmul+0x24a>
 80009a0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a4:	bf18      	it	ne
 80009a6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009aa:	f47f aec5 	bne.w	8000738 <__aeabi_dmul+0x19c>
 80009ae:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b2:	f47f af0d 	bne.w	80007d0 <__aeabi_dmul+0x234>
 80009b6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ba:	f47f aeeb 	bne.w	8000794 <__aeabi_dmul+0x1f8>
 80009be:	e712      	b.n	80007e6 <__aeabi_dmul+0x24a>

080009c0 <__aeabi_d2f>:
 80009c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009c8:	bf24      	itt	cs
 80009ca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009d2:	d90d      	bls.n	80009f0 <__aeabi_d2f+0x30>
 80009d4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009d8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009dc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009e0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009e4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009e8:	bf08      	it	eq
 80009ea:	f020 0001 	biceq.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009f4:	d121      	bne.n	8000a3a <__aeabi_d2f+0x7a>
 80009f6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009fa:	bfbc      	itt	lt
 80009fc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a00:	4770      	bxlt	lr
 8000a02:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a06:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a0a:	f1c2 0218 	rsb	r2, r2, #24
 8000a0e:	f1c2 0c20 	rsb	ip, r2, #32
 8000a12:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a16:	fa20 f002 	lsr.w	r0, r0, r2
 8000a1a:	bf18      	it	ne
 8000a1c:	f040 0001 	orrne.w	r0, r0, #1
 8000a20:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a24:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a28:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a2c:	ea40 000c 	orr.w	r0, r0, ip
 8000a30:	fa23 f302 	lsr.w	r3, r3, r2
 8000a34:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a38:	e7cc      	b.n	80009d4 <__aeabi_d2f+0x14>
 8000a3a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a3e:	d107      	bne.n	8000a50 <__aeabi_d2f+0x90>
 8000a40:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a44:	bf1e      	ittt	ne
 8000a46:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a4a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a4e:	4770      	bxne	lr
 8000a50:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a54:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a58:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_f2uiz>:
 8000a60:	0042      	lsls	r2, r0, #1
 8000a62:	d20e      	bcs.n	8000a82 <__aeabi_f2uiz+0x22>
 8000a64:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000a68:	d30b      	bcc.n	8000a82 <__aeabi_f2uiz+0x22>
 8000a6a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000a6e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000a72:	d409      	bmi.n	8000a88 <__aeabi_f2uiz+0x28>
 8000a74:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000a78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7c:	fa23 f002 	lsr.w	r0, r3, r2
 8000a80:	4770      	bx	lr
 8000a82:	f04f 0000 	mov.w	r0, #0
 8000a86:	4770      	bx	lr
 8000a88:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000a8c:	d101      	bne.n	8000a92 <__aeabi_f2uiz+0x32>
 8000a8e:	0242      	lsls	r2, r0, #9
 8000a90:	d102      	bne.n	8000a98 <__aeabi_f2uiz+0x38>
 8000a92:	f04f 30ff 	mov.w	r0, #4294967295
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <delayus>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/*Temp Begin*/
void delayus(uint32_t us) {
 8000aa0:	b480      	push	{r7}
 8000aa2:	b085      	sub	sp, #20
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
//	volatile uint32_t counter = 8 * us;
//	while (counter--)
//		;
	uint32_t counterval = 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000aac:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <delayus+0x30>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim3))<2*us);
 8000ab4:	bf00      	nop
 8000ab6:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <delayus+0x30>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d3f8      	bcc.n	8000ab6 <delayus+0x16>
}
 8000ac4:	bf00      	nop
 8000ac6:	bf00      	nop
 8000ac8:	3714      	adds	r7, #20
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr
 8000ad0:	20000100 	.word	0x20000100

08000ad4 <LH_signal>:
void LH_signal(uint32_t L_time, uint32_t H_time) {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(DS18B20_GPIO_Port, DS18B20_Pin, GPIO_PIN_RESET);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2140      	movs	r1, #64	; 0x40
 8000ae2:	4809      	ldr	r0, [pc, #36]	; (8000b08 <LH_signal+0x34>)
 8000ae4:	f001 fddd 	bl	80026a2 <HAL_GPIO_WritePin>
	delayus(L_time); //From pullup_HIGH to GND_LOW:---___
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f7ff ffd9 	bl	8000aa0 <delayus>
	HAL_GPIO_WritePin(DS18B20_GPIO_Port, DS18B20_Pin, GPIO_PIN_SET);
 8000aee:	2201      	movs	r2, #1
 8000af0:	2140      	movs	r1, #64	; 0x40
 8000af2:	4805      	ldr	r0, [pc, #20]	; (8000b08 <LH_signal+0x34>)
 8000af4:	f001 fdd5 	bl	80026a2 <HAL_GPIO_WritePin>
	delayus(H_time); //From GND_LOW to pullup_HIGH:___---
 8000af8:	6838      	ldr	r0, [r7, #0]
 8000afa:	f7ff ffd1 	bl	8000aa0 <delayus>
}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40010800 	.word	0x40010800

08000b0c <write_bit>:

void write_bit(uint8_t bit) {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	71fb      	strb	r3, [r7, #7]
	if (bit == 0)
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d104      	bne.n	8000b26 <write_bit+0x1a>
		LH_signal(60, 5);
 8000b1c:	2105      	movs	r1, #5
 8000b1e:	203c      	movs	r0, #60	; 0x3c
 8000b20:	f7ff ffd8 	bl	8000ad4 <LH_signal>
	else
		LH_signal(5, 60);
}
 8000b24:	e003      	b.n	8000b2e <write_bit+0x22>
		LH_signal(5, 60);
 8000b26:	213c      	movs	r1, #60	; 0x3c
 8000b28:	2005      	movs	r0, #5
 8000b2a:	f7ff ffd3 	bl	8000ad4 <LH_signal>
}
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <write_byte>:

void write_byte(uint8_t data) {
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b084      	sub	sp, #16
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 8; i++)
 8000b40:	2300      	movs	r3, #0
 8000b42:	73fb      	strb	r3, [r7, #15]
 8000b44:	e00d      	b.n	8000b62 <write_byte+0x2c>
		write_bit(data >> i & 1);
 8000b46:	79fa      	ldrb	r2, [r7, #7]
 8000b48:	7bfb      	ldrb	r3, [r7, #15]
 8000b4a:	fa42 f303 	asr.w	r3, r2, r3
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	f003 0301 	and.w	r3, r3, #1
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff ffd8 	bl	8000b0c <write_bit>
	for (uint8_t i = 0; i < 8; i++)
 8000b5c:	7bfb      	ldrb	r3, [r7, #15]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	73fb      	strb	r3, [r7, #15]
 8000b62:	7bfb      	ldrb	r3, [r7, #15]
 8000b64:	2b07      	cmp	r3, #7
 8000b66:	d9ee      	bls.n	8000b46 <write_byte+0x10>
}
 8000b68:	bf00      	nop
 8000b6a:	bf00      	nop
 8000b6c:	3710      	adds	r7, #16
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
	...

08000b74 <A9_as_INPUT>:

static void A9_as_INPUT(void) {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000b7a:	463b      	mov	r3, r7
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
	HAL_GPIO_WritePin(DS18B20_GPIO_Port, DS18B20_Pin, GPIO_PIN_SET);
 8000b86:	2201      	movs	r2, #1
 8000b88:	2140      	movs	r1, #64	; 0x40
 8000b8a:	4809      	ldr	r0, [pc, #36]	; (8000bb0 <A9_as_INPUT+0x3c>)
 8000b8c:	f001 fd89 	bl	80026a2 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = DS18B20_Pin;
 8000b90:	2340      	movs	r3, #64	; 0x40
 8000b92:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b94:	2300      	movs	r3, #0
 8000b96:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9c:	463b      	mov	r3, r7
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4803      	ldr	r0, [pc, #12]	; (8000bb0 <A9_as_INPUT+0x3c>)
 8000ba2:	f001 fbd3 	bl	800234c <HAL_GPIO_Init>
}
 8000ba6:	bf00      	nop
 8000ba8:	3710      	adds	r7, #16
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40010800 	.word	0x40010800

08000bb4 <A9_as_OUTPUT>:

static void A9_as_OUTPUT(void) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000bba:	463b      	mov	r3, r7
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
	HAL_GPIO_WritePin(DS18B20_GPIO_Port, DS18B20_Pin, GPIO_PIN_SET);
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	2140      	movs	r1, #64	; 0x40
 8000bca:	480a      	ldr	r0, [pc, #40]	; (8000bf4 <A9_as_OUTPUT+0x40>)
 8000bcc:	f001 fd69 	bl	80026a2 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = DS18B20_Pin;
 8000bd0:	2340      	movs	r3, #64	; 0x40
 8000bd2:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000bd4:	2311      	movs	r3, #17
 8000bd6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bdc:	2303      	movs	r3, #3
 8000bde:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(DS18B20_GPIO_Port, &GPIO_InitStruct);
 8000be0:	463b      	mov	r3, r7
 8000be2:	4619      	mov	r1, r3
 8000be4:	4803      	ldr	r0, [pc, #12]	; (8000bf4 <A9_as_OUTPUT+0x40>)
 8000be6:	f001 fbb1 	bl	800234c <HAL_GPIO_Init>
}
 8000bea:	bf00      	nop
 8000bec:	3710      	adds	r7, #16
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40010800 	.word	0x40010800

08000bf8 <read_bit>:

uint8_t read_bit(void) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
	uint8_t bit = 0;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	71fb      	strb	r3, [r7, #7]
	LH_signal(1, 10);
 8000c02:	210a      	movs	r1, #10
 8000c04:	2001      	movs	r0, #1
 8000c06:	f7ff ff65 	bl	8000ad4 <LH_signal>
	A9_as_INPUT();
 8000c0a:	f7ff ffb3 	bl	8000b74 <A9_as_INPUT>
	bit = (HAL_GPIO_ReadPin(DS18B20_GPIO_Port, DS18B20_Pin) ? 1 : 0);
 8000c0e:	2140      	movs	r1, #64	; 0x40
 8000c10:	4809      	ldr	r0, [pc, #36]	; (8000c38 <read_bit+0x40>)
 8000c12:	f001 fd2f 	bl	8002674 <HAL_GPIO_ReadPin>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	bf14      	ite	ne
 8000c1c:	2301      	movne	r3, #1
 8000c1e:	2300      	moveq	r3, #0
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	71fb      	strb	r3, [r7, #7]
	delayus(40);
 8000c24:	2028      	movs	r0, #40	; 0x28
 8000c26:	f7ff ff3b 	bl	8000aa0 <delayus>
	A9_as_OUTPUT();
 8000c2a:	f7ff ffc3 	bl	8000bb4 <A9_as_OUTPUT>
	return bit;
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40010800 	.word	0x40010800

08000c3c <read_byte>:

uint8_t read_byte(void) {
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 8; i++)
 8000c46:	2300      	movs	r3, #0
 8000c48:	71bb      	strb	r3, [r7, #6]
 8000c4a:	e00d      	b.n	8000c68 <read_byte+0x2c>
		data += read_bit() << i;
 8000c4c:	f7ff ffd4 	bl	8000bf8 <read_bit>
 8000c50:	4603      	mov	r3, r0
 8000c52:	461a      	mov	r2, r3
 8000c54:	79bb      	ldrb	r3, [r7, #6]
 8000c56:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5a:	b2da      	uxtb	r2, r3
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	4413      	add	r3, r2
 8000c60:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 8; i++)
 8000c62:	79bb      	ldrb	r3, [r7, #6]
 8000c64:	3301      	adds	r3, #1
 8000c66:	71bb      	strb	r3, [r7, #6]
 8000c68:	79bb      	ldrb	r3, [r7, #6]
 8000c6a:	2b07      	cmp	r3, #7
 8000c6c:	d9ee      	bls.n	8000c4c <read_byte+0x10>
	return data;
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <A9_wait_for_1>:

void A9_wait_for_1(uint32_t time) {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
	A9_as_INPUT();
 8000c80:	f7ff ff78 	bl	8000b74 <A9_as_INPUT>
	delayus(time);
 8000c84:	6878      	ldr	r0, [r7, #4]
 8000c86:	f7ff ff0b 	bl	8000aa0 <delayus>
	while (HAL_GPIO_ReadPin(DS18B20_GPIO_Port, DS18B20_Pin) == 0)
 8000c8a:	bf00      	nop
 8000c8c:	2140      	movs	r1, #64	; 0x40
 8000c8e:	4806      	ldr	r0, [pc, #24]	; (8000ca8 <A9_wait_for_1+0x30>)
 8000c90:	f001 fcf0 	bl	8002674 <HAL_GPIO_ReadPin>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d0f8      	beq.n	8000c8c <A9_wait_for_1+0x14>
		;
	A9_as_OUTPUT();
 8000c9a:	f7ff ff8b 	bl	8000bb4 <A9_as_OUTPUT>
}
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40010800 	.word	0x40010800

08000cac <reset>:

void reset(void) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
	LH_signal(500, 500);
 8000cb0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000cb4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cb8:	f7ff ff0c 	bl	8000ad4 <LH_signal>
}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <get_temperature>:
		return 1;
	else
		return 0;
}

float get_temperature(void) {
 8000cc0:	b590      	push	{r4, r7, lr}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
	uint8_t pad_data[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0 }; //9 Byte
 8000cc6:	4a31      	ldr	r2, [pc, #196]	; (8000d8c <get_temperature+0xcc>)
 8000cc8:	463b      	mov	r3, r7
 8000cca:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ccc:	c303      	stmia	r3!, {r0, r1}
 8000cce:	701a      	strb	r2, [r3, #0]
	reset();
 8000cd0:	f7ff ffec 	bl	8000cac <reset>
	write_byte(0xCC); //Skip ROM [CCh]
 8000cd4:	20cc      	movs	r0, #204	; 0xcc
 8000cd6:	f7ff ff2e 	bl	8000b36 <write_byte>
	write_byte(0x44); //Convert Temperature [44h]
 8000cda:	2044      	movs	r0, #68	; 0x44
 8000cdc:	f7ff ff2b 	bl	8000b36 <write_byte>
	A9_wait_for_1(20);
 8000ce0:	2014      	movs	r0, #20
 8000ce2:	f7ff ffc9 	bl	8000c78 <A9_wait_for_1>
	reset();
 8000ce6:	f7ff ffe1 	bl	8000cac <reset>
	write_byte(0xCC); //Skip ROM [CCh]
 8000cea:	20cc      	movs	r0, #204	; 0xcc
 8000cec:	f7ff ff23 	bl	8000b36 <write_byte>
	write_byte(0xBE); //Read Scratchpad [BEh]
 8000cf0:	20be      	movs	r0, #190	; 0xbe
 8000cf2:	f7ff ff20 	bl	8000b36 <write_byte>
	for (uint8_t i = 0; i < 9; i++)
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	73fb      	strb	r3, [r7, #15]
 8000cfa:	e00c      	b.n	8000d16 <get_temperature+0x56>
		pad_data[i] = read_byte(); //factor out 1/16 and remember 1/16 != 1/16.0
 8000cfc:	7bfc      	ldrb	r4, [r7, #15]
 8000cfe:	f7ff ff9d 	bl	8000c3c <read_byte>
 8000d02:	4603      	mov	r3, r0
 8000d04:	461a      	mov	r2, r3
 8000d06:	f104 0310 	add.w	r3, r4, #16
 8000d0a:	443b      	add	r3, r7
 8000d0c:	f803 2c10 	strb.w	r2, [r3, #-16]
	for (uint8_t i = 0; i < 9; i++)
 8000d10:	7bfb      	ldrb	r3, [r7, #15]
 8000d12:	3301      	adds	r3, #1
 8000d14:	73fb      	strb	r3, [r7, #15]
 8000d16:	7bfb      	ldrb	r3, [r7, #15]
 8000d18:	2b08      	cmp	r3, #8
 8000d1a:	d9ef      	bls.n	8000cfc <get_temperature+0x3c>
	uint16_t x = (pad_data[1] << 8) + pad_data[0];
 8000d1c:	787b      	ldrb	r3, [r7, #1]
 8000d1e:	b29b      	uxth	r3, r3
 8000d20:	021b      	lsls	r3, r3, #8
 8000d22:	b29a      	uxth	r2, r3
 8000d24:	783b      	ldrb	r3, [r7, #0]
 8000d26:	b29b      	uxth	r3, r3
 8000d28:	4413      	add	r3, r2
 8000d2a:	81bb      	strh	r3, [r7, #12]
	if ((pad_data[1] >> 7) == 1) {
 8000d2c:	787b      	ldrb	r3, [r7, #1]
 8000d2e:	09db      	lsrs	r3, r3, #7
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d116      	bne.n	8000d64 <get_temperature+0xa4>
		x -= 1;
 8000d36:	89bb      	ldrh	r3, [r7, #12]
 8000d38:	3b01      	subs	r3, #1
 8000d3a:	81bb      	strh	r3, [r7, #12]
		x = ~x;
 8000d3c:	89bb      	ldrh	r3, [r7, #12]
 8000d3e:	43db      	mvns	r3, r3
 8000d40:	81bb      	strh	r3, [r7, #12]
		return x / -16.0;
 8000d42:	89bb      	ldrh	r3, [r7, #12]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff fbbf 	bl	80004c8 <__aeabi_i2d>
 8000d4a:	f04f 0200 	mov.w	r2, #0
 8000d4e:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <get_temperature+0xd0>)
 8000d50:	f7ff fd4e 	bl	80007f0 <__aeabi_ddiv>
 8000d54:	4602      	mov	r2, r0
 8000d56:	460b      	mov	r3, r1
 8000d58:	4610      	mov	r0, r2
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	f7ff fe30 	bl	80009c0 <__aeabi_d2f>
 8000d60:	4603      	mov	r3, r0
 8000d62:	e00f      	b.n	8000d84 <get_temperature+0xc4>
	} else
		return x / 16.0;
 8000d64:	89bb      	ldrh	r3, [r7, #12]
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff fbae 	bl	80004c8 <__aeabi_i2d>
 8000d6c:	f04f 0200 	mov.w	r2, #0
 8000d70:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <get_temperature+0xd4>)
 8000d72:	f7ff fd3d 	bl	80007f0 <__aeabi_ddiv>
 8000d76:	4602      	mov	r2, r0
 8000d78:	460b      	mov	r3, r1
 8000d7a:	4610      	mov	r0, r2
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	f7ff fe1f 	bl	80009c0 <__aeabi_d2f>
 8000d82:	4603      	mov	r3, r0
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3714      	adds	r7, #20
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd90      	pop	{r4, r7, pc}
 8000d8c:	080056ac 	.word	0x080056ac
 8000d90:	c0300000 	.word	0xc0300000
 8000d94:	40300000 	.word	0x40300000

08000d98 <HAL_TIM_PeriodElapsedCallback>:
		*cp-- = c;
	} while (v0 != 0);
	return cp;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000da8:	d125      	bne.n	8000df6 <HAL_TIM_PeriodElapsedCallback+0x5e>
		counter++;
 8000daa:	4b15      	ldr	r3, [pc, #84]	; (8000e00 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	3301      	adds	r3, #1
 8000db0:	4a13      	ldr	r2, [pc, #76]	; (8000e00 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000db2:	6013      	str	r3, [r2, #0]
		float f = get_temperature();
 8000db4:	f7ff ff84 	bl	8000cc0 <get_temperature>
 8000db8:	60f8      	str	r0, [r7, #12]
		current_temperature = (uint16_t) f;
 8000dba:	68f8      	ldr	r0, [r7, #12]
 8000dbc:	f7ff fe50 	bl	8000a60 <__aeabi_f2uiz>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	4b0f      	ldr	r3, [pc, #60]	; (8000e04 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000dc8:	701a      	strb	r2, [r3, #0]
		if (counter > 10) {
 8000dca:	4b0d      	ldr	r3, [pc, #52]	; (8000e00 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	2b0a      	cmp	r3, #10
 8000dd0:	dd11      	ble.n	8000df6 <HAL_TIM_PeriodElapsedCallback+0x5e>
			if (is_button2_pressed == 0 && is_button4_pressed == 0) {
 8000dd2:	4b0d      	ldr	r3, [pc, #52]	; (8000e08 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d10a      	bne.n	8000df0 <HAL_TIM_PeriodElapsedCallback+0x58>
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d106      	bne.n	8000df0 <HAL_TIM_PeriodElapsedCallback+0x58>
				ShowMode();
 8000de2:	f000 fd61 	bl	80018a8 <ShowMode>
				ShowTemperature(current_temperature);
 8000de6:	4b07      	ldr	r3, [pc, #28]	; (8000e04 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f000 fcf4 	bl	80017d8 <ShowTemperature>
			}
			counter = 0;
 8000df0:	4b03      	ldr	r3, [pc, #12]	; (8000e00 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000df6:	bf00      	nop
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	200001dc 	.word	0x200001dc
 8000e04:	20000028 	.word	0x20000028
 8000e08:	200001d5 	.word	0x200001d5
 8000e0c:	200001d3 	.word	0x200001d3

08000e10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08e      	sub	sp, #56	; 0x38
 8000e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	in_comfort_temp = INITIAL_IN_SET_POINT
 8000e16:	4b83      	ldr	r3, [pc, #524]	; (8001024 <main+0x214>)
 8000e18:	2218      	movs	r2, #24
 8000e1a:	701a      	strb	r2, [r3, #0]
	;
	sleep_comfort_temp = INITIAL_SLEEP_SET_POINT
 8000e1c:	4b82      	ldr	r3, [pc, #520]	; (8001028 <main+0x218>)
 8000e1e:	2215      	movs	r2, #21
 8000e20:	701a      	strb	r2, [r3, #0]
	;

	for (uint8_t day = 0; day < 7; day++) {
 8000e22:	2300      	movs	r3, #0
 8000e24:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000e28:	e087      	b.n	8000f3a <main+0x12a>
		days_state[day][0] = SLEEP;
 8000e2a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000e2e:	497f      	ldr	r1, [pc, #508]	; (800102c <main+0x21c>)
 8000e30:	4613      	mov	r3, r2
 8000e32:	00db      	lsls	r3, r3, #3
 8000e34:	4413      	add	r3, r2
 8000e36:	440b      	add	r3, r1
 8000e38:	2202      	movs	r2, #2
 8000e3a:	701a      	strb	r2, [r3, #0]
		days_state[day][1] = days_state[day][6] = days_state[day][7] =
				days_state[day][8] = IN;
 8000e3c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000e40:	497a      	ldr	r1, [pc, #488]	; (800102c <main+0x21c>)
 8000e42:	4613      	mov	r3, r2
 8000e44:	00db      	lsls	r3, r3, #3
 8000e46:	4413      	add	r3, r2
 8000e48:	440b      	add	r3, r1
 8000e4a:	3308      	adds	r3, #8
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	7019      	strb	r1, [r3, #0]
		days_state[day][1] = days_state[day][6] = days_state[day][7] =
 8000e50:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
				days_state[day][8] = IN;
 8000e54:	4875      	ldr	r0, [pc, #468]	; (800102c <main+0x21c>)
 8000e56:	4613      	mov	r3, r2
 8000e58:	00db      	lsls	r3, r3, #3
 8000e5a:	4413      	add	r3, r2
 8000e5c:	4403      	add	r3, r0
 8000e5e:	3308      	adds	r3, #8
 8000e60:	7818      	ldrb	r0, [r3, #0]
		days_state[day][1] = days_state[day][6] = days_state[day][7] =
 8000e62:	4a72      	ldr	r2, [pc, #456]	; (800102c <main+0x21c>)
 8000e64:	460b      	mov	r3, r1
 8000e66:	00db      	lsls	r3, r3, #3
 8000e68:	440b      	add	r3, r1
 8000e6a:	4413      	add	r3, r2
 8000e6c:	3307      	adds	r3, #7
 8000e6e:	4602      	mov	r2, r0
 8000e70:	701a      	strb	r2, [r3, #0]
 8000e72:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000e76:	486d      	ldr	r0, [pc, #436]	; (800102c <main+0x21c>)
 8000e78:	460b      	mov	r3, r1
 8000e7a:	00db      	lsls	r3, r3, #3
 8000e7c:	440b      	add	r3, r1
 8000e7e:	4403      	add	r3, r0
 8000e80:	3307      	adds	r3, #7
 8000e82:	7818      	ldrb	r0, [r3, #0]
 8000e84:	4969      	ldr	r1, [pc, #420]	; (800102c <main+0x21c>)
 8000e86:	4613      	mov	r3, r2
 8000e88:	00db      	lsls	r3, r3, #3
 8000e8a:	4413      	add	r3, r2
 8000e8c:	440b      	add	r3, r1
 8000e8e:	3306      	adds	r3, #6
 8000e90:	4601      	mov	r1, r0
 8000e92:	7019      	strb	r1, [r3, #0]
 8000e94:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8000e98:	4864      	ldr	r0, [pc, #400]	; (800102c <main+0x21c>)
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	00db      	lsls	r3, r3, #3
 8000e9e:	4413      	add	r3, r2
 8000ea0:	4403      	add	r3, r0
 8000ea2:	3306      	adds	r3, #6
 8000ea4:	7818      	ldrb	r0, [r3, #0]
 8000ea6:	4a61      	ldr	r2, [pc, #388]	; (800102c <main+0x21c>)
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	00db      	lsls	r3, r3, #3
 8000eac:	440b      	add	r3, r1
 8000eae:	4413      	add	r3, r2
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	701a      	strb	r2, [r3, #0]
		days_state[day][2] = days_state[day][3] = days_state[day][4] =
				days_state[day][5] = OUT;
 8000eb6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000eba:	495c      	ldr	r1, [pc, #368]	; (800102c <main+0x21c>)
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	00db      	lsls	r3, r3, #3
 8000ec0:	4413      	add	r3, r2
 8000ec2:	440b      	add	r3, r1
 8000ec4:	3305      	adds	r3, #5
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	7019      	strb	r1, [r3, #0]
		days_state[day][2] = days_state[day][3] = days_state[day][4] =
 8000eca:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
				days_state[day][5] = OUT;
 8000ece:	4857      	ldr	r0, [pc, #348]	; (800102c <main+0x21c>)
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	00db      	lsls	r3, r3, #3
 8000ed4:	4413      	add	r3, r2
 8000ed6:	4403      	add	r3, r0
 8000ed8:	3305      	adds	r3, #5
 8000eda:	7818      	ldrb	r0, [r3, #0]
		days_state[day][2] = days_state[day][3] = days_state[day][4] =
 8000edc:	4a53      	ldr	r2, [pc, #332]	; (800102c <main+0x21c>)
 8000ede:	460b      	mov	r3, r1
 8000ee0:	00db      	lsls	r3, r3, #3
 8000ee2:	440b      	add	r3, r1
 8000ee4:	4413      	add	r3, r2
 8000ee6:	3304      	adds	r3, #4
 8000ee8:	4602      	mov	r2, r0
 8000eea:	701a      	strb	r2, [r3, #0]
 8000eec:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000ef0:	484e      	ldr	r0, [pc, #312]	; (800102c <main+0x21c>)
 8000ef2:	460b      	mov	r3, r1
 8000ef4:	00db      	lsls	r3, r3, #3
 8000ef6:	440b      	add	r3, r1
 8000ef8:	4403      	add	r3, r0
 8000efa:	3304      	adds	r3, #4
 8000efc:	7818      	ldrb	r0, [r3, #0]
 8000efe:	494b      	ldr	r1, [pc, #300]	; (800102c <main+0x21c>)
 8000f00:	4613      	mov	r3, r2
 8000f02:	00db      	lsls	r3, r3, #3
 8000f04:	4413      	add	r3, r2
 8000f06:	440b      	add	r3, r1
 8000f08:	3303      	adds	r3, #3
 8000f0a:	4601      	mov	r1, r0
 8000f0c:	7019      	strb	r1, [r3, #0]
 8000f0e:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8000f12:	4846      	ldr	r0, [pc, #280]	; (800102c <main+0x21c>)
 8000f14:	4613      	mov	r3, r2
 8000f16:	00db      	lsls	r3, r3, #3
 8000f18:	4413      	add	r3, r2
 8000f1a:	4403      	add	r3, r0
 8000f1c:	3303      	adds	r3, #3
 8000f1e:	7818      	ldrb	r0, [r3, #0]
 8000f20:	4a42      	ldr	r2, [pc, #264]	; (800102c <main+0x21c>)
 8000f22:	460b      	mov	r3, r1
 8000f24:	00db      	lsls	r3, r3, #3
 8000f26:	440b      	add	r3, r1
 8000f28:	4413      	add	r3, r2
 8000f2a:	3302      	adds	r3, #2
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	701a      	strb	r2, [r3, #0]
	for (uint8_t day = 0; day < 7; day++) {
 8000f30:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f34:	3301      	adds	r3, #1
 8000f36:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000f3a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f3e:	2b06      	cmp	r3, #6
 8000f40:	f67f af73 	bls.w	8000e2a <main+0x1a>
	}

	SyncStateAndSetPoints();
 8000f44:	f000 faf8 	bl	8001538 <SyncStateAndSetPoints>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f48:	f001 f86c 	bl	8002024 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f4c:	f000 f884 	bl	8001058 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f50:	f000 f964 	bl	800121c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000f54:	f000 f8c6 	bl	80010e4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f58:	f000 f912 	bl	8001180 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	if (HAL_TIM_Base_Start(&htim3) == HAL_ERROR) {
 8000f5c:	4834      	ldr	r0, [pc, #208]	; (8001030 <main+0x220>)
 8000f5e:	f001 ffe7 	bl	8002f30 <HAL_TIM_Base_Start>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d100      	bne.n	8000f6a <main+0x15a>
		while(1);
 8000f68:	e7fe      	b.n	8000f68 <main+0x158>
	}
	HAL_TIM_Base_Start_IT(&htim2);
 8000f6a:	4832      	ldr	r0, [pc, #200]	; (8001034 <main+0x224>)
 8000f6c:	f002 f846 	bl	8002ffc <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  Draw_BMP_Fast(0, 0, MainBG);
	HAL_GPIO_WritePin(LCD_BACKLIGHT_GPIO_Port, LCD_BACKLIGHT_Pin, 1);
 8000f70:	2201      	movs	r2, #1
 8000f72:	2104      	movs	r1, #4
 8000f74:	4830      	ldr	r0, [pc, #192]	; (8001038 <main+0x228>)
 8000f76:	f001 fb94 	bl	80026a2 <HAL_GPIO_WritePin>

	LCD_Initializtion();
 8000f7a:	f002 fe8b 	bl	8003c94 <LCD_Initializtion>
	LCD_Clear(Black);
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f003 f91a 	bl	80041b8 <LCD_Clear>
	char str[50];
	sprintf(str, "%d", 65464);
 8000f84:	1d3b      	adds	r3, r7, #4
 8000f86:	f64f 72b8 	movw	r2, #65464	; 0xffb8
 8000f8a:	492c      	ldr	r1, [pc, #176]	; (800103c <main+0x22c>)
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f003 fee9 	bl	8004d64 <siprintf>
	ThermoAdjucment();
 8000f92:	f000 fa8d 	bl	80014b0 <ThermoAdjucment>
	LcdPageOne();
 8000f96:	f000 fc9f 	bl	80018d8 <LcdPageOne>

	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		ThermoAdjucment();
 8000f9a:	f000 fa89 	bl	80014b0 <ThermoAdjucment>
		ReadKey();
 8000f9e:	f000 fb25 	bl	80015ec <ReadKey>
		if (is_button8_pressed == 1) {
 8000fa2:	4b27      	ldr	r3, [pc, #156]	; (8001040 <main+0x230>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d117      	bne.n	8000fda <main+0x1ca>
			current_week_day = (current_week_day + 1) % 7;
 8000faa:	4b26      	ldr	r3, [pc, #152]	; (8001044 <main+0x234>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	1c5a      	adds	r2, r3, #1
 8000fb0:	4b25      	ldr	r3, [pc, #148]	; (8001048 <main+0x238>)
 8000fb2:	fb83 1302 	smull	r1, r3, r3, r2
 8000fb6:	4413      	add	r3, r2
 8000fb8:	1099      	asrs	r1, r3, #2
 8000fba:	17d3      	asrs	r3, r2, #31
 8000fbc:	1ac9      	subs	r1, r1, r3
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	00db      	lsls	r3, r3, #3
 8000fc2:	1a5b      	subs	r3, r3, r1
 8000fc4:	1ad1      	subs	r1, r2, r3
 8000fc6:	b2ca      	uxtb	r2, r1
 8000fc8:	4b1e      	ldr	r3, [pc, #120]	; (8001044 <main+0x234>)
 8000fca:	701a      	strb	r2, [r3, #0]
			LCD_Clear(White);
 8000fcc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000fd0:	f003 f8f2 	bl	80041b8 <LCD_Clear>
			is_button8_pressed = 0;
 8000fd4:	4b1a      	ldr	r3, [pc, #104]	; (8001040 <main+0x230>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	701a      	strb	r2, [r3, #0]
		}

		if (is_button2_pressed == 1) {
 8000fda:	4b1c      	ldr	r3, [pc, #112]	; (800104c <main+0x23c>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d107      	bne.n	8000ff2 <main+0x1e2>
			LcdDailySchedule(current_week_day);
 8000fe2:	4b18      	ldr	r3, [pc, #96]	; (8001044 <main+0x234>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f000 fd7e 	bl	8001ae8 <LcdDailySchedule>
			is_button4_pressed = 0;
 8000fec:	4b18      	ldr	r3, [pc, #96]	; (8001050 <main+0x240>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	701a      	strb	r2, [r3, #0]
		}

		if (is_button4_pressed == 1) {
 8000ff2:	4b17      	ldr	r3, [pc, #92]	; (8001050 <main+0x240>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d104      	bne.n	8001004 <main+0x1f4>
			LcdGiveFeedback();
 8000ffa:	f000 fe91 	bl	8001d20 <LcdGiveFeedback>
			is_button2_pressed = 0;
 8000ffe:	4b13      	ldr	r3, [pc, #76]	; (800104c <main+0x23c>)
 8001000:	2200      	movs	r2, #0
 8001002:	701a      	strb	r2, [r3, #0]
		}

		if (is_button7_pressed == 1) {
 8001004:	4b13      	ldr	r3, [pc, #76]	; (8001054 <main+0x244>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d1c6      	bne.n	8000f9a <main+0x18a>
			is_button2_pressed = 0;
 800100c:	4b0f      	ldr	r3, [pc, #60]	; (800104c <main+0x23c>)
 800100e:	2200      	movs	r2, #0
 8001010:	701a      	strb	r2, [r3, #0]
			is_button7_pressed = 0;
 8001012:	4b10      	ldr	r3, [pc, #64]	; (8001054 <main+0x244>)
 8001014:	2200      	movs	r2, #0
 8001016:	701a      	strb	r2, [r3, #0]
			is_button4_pressed = 0;
 8001018:	4b0d      	ldr	r3, [pc, #52]	; (8001050 <main+0x240>)
 800101a:	2200      	movs	r2, #0
 800101c:	701a      	strb	r2, [r3, #0]
			LcdPageOne();
 800101e:	f000 fc5b 	bl	80018d8 <LcdPageOne>
		ThermoAdjucment();
 8001022:	e7ba      	b.n	8000f9a <main+0x18a>
 8001024:	200001d7 	.word	0x200001d7
 8001028:	200001d8 	.word	0x200001d8
 800102c:	2000018c 	.word	0x2000018c
 8001030:	20000100 	.word	0x20000100
 8001034:	200000b8 	.word	0x200000b8
 8001038:	40011400 	.word	0x40011400
 800103c:	080056c0 	.word	0x080056c0
 8001040:	200001d0 	.word	0x200001d0
 8001044:	200001cd 	.word	0x200001cd
 8001048:	92492493 	.word	0x92492493
 800104c:	200001d5 	.word	0x200001d5
 8001050:	200001d3 	.word	0x200001d3
 8001054:	200001d1 	.word	0x200001d1

08001058 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b090      	sub	sp, #64	; 0x40
 800105c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800105e:	f107 0318 	add.w	r3, r7, #24
 8001062:	2228      	movs	r2, #40	; 0x28
 8001064:	2100      	movs	r1, #0
 8001066:	4618      	mov	r0, r3
 8001068:	f003 fe74 	bl	8004d54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800106c:	1d3b      	adds	r3, r7, #4
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]
 8001074:	609a      	str	r2, [r3, #8]
 8001076:	60da      	str	r2, [r3, #12]
 8001078:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800107a:	2301      	movs	r3, #1
 800107c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800107e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001082:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001084:	2300      	movs	r3, #0
 8001086:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001088:	2301      	movs	r3, #1
 800108a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800108c:	2302      	movs	r3, #2
 800108e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001090:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001094:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001096:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800109a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800109c:	f107 0318 	add.w	r3, r7, #24
 80010a0:	4618      	mov	r0, r3
 80010a2:	f001 fb17 	bl	80026d4 <HAL_RCC_OscConfig>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80010ac:	f000 feb6 	bl	8001e1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010b0:	230f      	movs	r3, #15
 80010b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010b4:	2302      	movs	r3, #2
 80010b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010b8:	2300      	movs	r3, #0
 80010ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010c2:	2300      	movs	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	2102      	movs	r1, #2
 80010ca:	4618      	mov	r0, r3
 80010cc:	f001 fd84 	bl	8002bd8 <HAL_RCC_ClockConfig>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <SystemClock_Config+0x82>
  {
    Error_Handler();
 80010d6:	f000 fea1 	bl	8001e1c <Error_Handler>
  }
}
 80010da:	bf00      	nop
 80010dc:	3740      	adds	r7, #64	; 0x40
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
	...

080010e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ea:	f107 0308 	add.w	r3, r7, #8
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]
 80010f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f8:	463b      	mov	r3, r7
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001100:	4b1e      	ldr	r3, [pc, #120]	; (800117c <MX_TIM2_Init+0x98>)
 8001102:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001106:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36000-1;
 8001108:	4b1c      	ldr	r3, [pc, #112]	; (800117c <MX_TIM2_Init+0x98>)
 800110a:	f648 429f 	movw	r2, #35999	; 0x8c9f
 800110e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001110:	4b1a      	ldr	r3, [pc, #104]	; (800117c <MX_TIM2_Init+0x98>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001116:	4b19      	ldr	r3, [pc, #100]	; (800117c <MX_TIM2_Init+0x98>)
 8001118:	f240 32e7 	movw	r2, #999	; 0x3e7
 800111c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800111e:	4b17      	ldr	r3, [pc, #92]	; (800117c <MX_TIM2_Init+0x98>)
 8001120:	2200      	movs	r2, #0
 8001122:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001124:	4b15      	ldr	r3, [pc, #84]	; (800117c <MX_TIM2_Init+0x98>)
 8001126:	2280      	movs	r2, #128	; 0x80
 8001128:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800112a:	4814      	ldr	r0, [pc, #80]	; (800117c <MX_TIM2_Init+0x98>)
 800112c:	f001 feb0 	bl	8002e90 <HAL_TIM_Base_Init>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001136:	f000 fe71 	bl	8001e1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800113a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800113e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001140:	f107 0308 	add.w	r3, r7, #8
 8001144:	4619      	mov	r1, r3
 8001146:	480d      	ldr	r0, [pc, #52]	; (800117c <MX_TIM2_Init+0x98>)
 8001148:	f002 f8ce 	bl	80032e8 <HAL_TIM_ConfigClockSource>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001152:	f000 fe63 	bl	8001e1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001156:	2300      	movs	r3, #0
 8001158:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800115a:	2300      	movs	r3, #0
 800115c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800115e:	463b      	mov	r3, r7
 8001160:	4619      	mov	r1, r3
 8001162:	4806      	ldr	r0, [pc, #24]	; (800117c <MX_TIM2_Init+0x98>)
 8001164:	f002 fae0 	bl	8003728 <HAL_TIMEx_MasterConfigSynchronization>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800116e:	f000 fe55 	bl	8001e1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001172:	bf00      	nop
 8001174:	3718      	adds	r7, #24
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	200000b8 	.word	0x200000b8

08001180 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001186:	f107 0308 	add.w	r3, r7, #8
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]
 8001190:	609a      	str	r2, [r3, #8]
 8001192:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001194:	463b      	mov	r3, r7
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800119c:	4b1d      	ldr	r3, [pc, #116]	; (8001214 <MX_TIM3_Init+0x94>)
 800119e:	4a1e      	ldr	r2, [pc, #120]	; (8001218 <MX_TIM3_Init+0x98>)
 80011a0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 36-1;
 80011a2:	4b1c      	ldr	r3, [pc, #112]	; (8001214 <MX_TIM3_Init+0x94>)
 80011a4:	2223      	movs	r2, #35	; 0x23
 80011a6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a8:	4b1a      	ldr	r3, [pc, #104]	; (8001214 <MX_TIM3_Init+0x94>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65534;
 80011ae:	4b19      	ldr	r3, [pc, #100]	; (8001214 <MX_TIM3_Init+0x94>)
 80011b0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80011b4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b6:	4b17      	ldr	r3, [pc, #92]	; (8001214 <MX_TIM3_Init+0x94>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011bc:	4b15      	ldr	r3, [pc, #84]	; (8001214 <MX_TIM3_Init+0x94>)
 80011be:	2200      	movs	r2, #0
 80011c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011c2:	4814      	ldr	r0, [pc, #80]	; (8001214 <MX_TIM3_Init+0x94>)
 80011c4:	f001 fe64 	bl	8002e90 <HAL_TIM_Base_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80011ce:	f000 fe25 	bl	8001e1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011d8:	f107 0308 	add.w	r3, r7, #8
 80011dc:	4619      	mov	r1, r3
 80011de:	480d      	ldr	r0, [pc, #52]	; (8001214 <MX_TIM3_Init+0x94>)
 80011e0:	f002 f882 	bl	80032e8 <HAL_TIM_ConfigClockSource>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80011ea:	f000 fe17 	bl	8001e1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ee:	2300      	movs	r3, #0
 80011f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f2:	2300      	movs	r3, #0
 80011f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011f6:	463b      	mov	r3, r7
 80011f8:	4619      	mov	r1, r3
 80011fa:	4806      	ldr	r0, [pc, #24]	; (8001214 <MX_TIM3_Init+0x94>)
 80011fc:	f002 fa94 	bl	8003728 <HAL_TIMEx_MasterConfigSynchronization>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001206:	f000 fe09 	bl	8001e1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800120a:	bf00      	nop
 800120c:	3718      	adds	r7, #24
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000100 	.word	0x20000100
 8001218:	40000400 	.word	0x40000400

0800121c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b088      	sub	sp, #32
 8001220:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001222:	f107 0310 	add.w	r3, r7, #16
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001230:	4b5e      	ldr	r3, [pc, #376]	; (80013ac <MX_GPIO_Init+0x190>)
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	4a5d      	ldr	r2, [pc, #372]	; (80013ac <MX_GPIO_Init+0x190>)
 8001236:	f043 0310 	orr.w	r3, r3, #16
 800123a:	6193      	str	r3, [r2, #24]
 800123c:	4b5b      	ldr	r3, [pc, #364]	; (80013ac <MX_GPIO_Init+0x190>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	f003 0310 	and.w	r3, r3, #16
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001248:	4b58      	ldr	r3, [pc, #352]	; (80013ac <MX_GPIO_Init+0x190>)
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	4a57      	ldr	r2, [pc, #348]	; (80013ac <MX_GPIO_Init+0x190>)
 800124e:	f043 0304 	orr.w	r3, r3, #4
 8001252:	6193      	str	r3, [r2, #24]
 8001254:	4b55      	ldr	r3, [pc, #340]	; (80013ac <MX_GPIO_Init+0x190>)
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	f003 0304 	and.w	r3, r3, #4
 800125c:	60bb      	str	r3, [r7, #8]
 800125e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001260:	4b52      	ldr	r3, [pc, #328]	; (80013ac <MX_GPIO_Init+0x190>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	4a51      	ldr	r2, [pc, #324]	; (80013ac <MX_GPIO_Init+0x190>)
 8001266:	f043 0308 	orr.w	r3, r3, #8
 800126a:	6193      	str	r3, [r2, #24]
 800126c:	4b4f      	ldr	r3, [pc, #316]	; (80013ac <MX_GPIO_Init+0x190>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	f003 0308 	and.w	r3, r3, #8
 8001274:	607b      	str	r3, [r7, #4]
 8001276:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001278:	4b4c      	ldr	r3, [pc, #304]	; (80013ac <MX_GPIO_Init+0x190>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	4a4b      	ldr	r2, [pc, #300]	; (80013ac <MX_GPIO_Init+0x190>)
 800127e:	f043 0320 	orr.w	r3, r3, #32
 8001282:	6193      	str	r3, [r2, #24]
 8001284:	4b49      	ldr	r3, [pc, #292]	; (80013ac <MX_GPIO_Init+0x190>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	f003 0320 	and.w	r3, r3, #32
 800128c:	603b      	str	r3, [r7, #0]
 800128e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED8_Pin|LED7_Pin, GPIO_PIN_RESET);
 8001290:	2200      	movs	r2, #0
 8001292:	f44f 5108 	mov.w	r1, #8704	; 0x2200
 8001296:	4846      	ldr	r0, [pc, #280]	; (80013b0 <MX_GPIO_Init+0x194>)
 8001298:	f001 fa03 	bl	80026a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DS18B20_Pin|LED5_Pin|LED1_Pin|LED3_Pin, GPIO_PIN_RESET);
 800129c:	2200      	movs	r2, #0
 800129e:	f44f 51ca 	mov.w	r1, #6464	; 0x1940
 80012a2:	4844      	ldr	r0, [pc, #272]	; (80013b4 <MX_GPIO_Init+0x198>)
 80012a4:	f001 f9fd 	bl	80026a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TOUCHPWR_Pin|LEDENABLE_Pin, GPIO_PIN_RESET);
 80012a8:	2200      	movs	r2, #0
 80012aa:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80012ae:	4842      	ldr	r0, [pc, #264]	; (80013b8 <MX_GPIO_Init+0x19c>)
 80012b0:	f001 f9f7 	bl	80026a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, BUZZER_Pin|LCD_BACKLIGHT_Pin|LED2_Pin|LED4_Pin
 80012b4:	2200      	movs	r2, #0
 80012b6:	219d      	movs	r1, #157	; 0x9d
 80012b8:	4840      	ldr	r0, [pc, #256]	; (80013bc <MX_GPIO_Init+0x1a0>)
 80012ba:	f001 f9f2 	bl	80026a2 <HAL_GPIO_WritePin>
                          |LED6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED8_Pin LED7_Pin */
  GPIO_InitStruct.Pin = LED8_Pin|LED7_Pin;
 80012be:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 80012c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c4:	2301      	movs	r3, #1
 80012c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012cc:	2302      	movs	r3, #2
 80012ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012d0:	f107 0310 	add.w	r3, r7, #16
 80012d4:	4619      	mov	r1, r3
 80012d6:	4836      	ldr	r0, [pc, #216]	; (80013b0 <MX_GPIO_Init+0x194>)
 80012d8:	f001 f838 	bl	800234c <HAL_GPIO_Init>

  /*Configure GPIO pins : DS18B20_Pin LED5_Pin LED3_Pin */
  GPIO_InitStruct.Pin = DS18B20_Pin|LED5_Pin|LED3_Pin;
 80012dc:	f44f 538a 	mov.w	r3, #4416	; 0x1140
 80012e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e2:	2301      	movs	r3, #1
 80012e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ea:	2302      	movs	r3, #2
 80012ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ee:	f107 0310 	add.w	r3, r7, #16
 80012f2:	4619      	mov	r1, r3
 80012f4:	482f      	ldr	r0, [pc, #188]	; (80013b4 <MX_GPIO_Init+0x198>)
 80012f6:	f001 f829 	bl	800234c <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCHPWR_Pin */
  GPIO_InitStruct.Pin = TOUCHPWR_Pin;
 80012fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001300:	2301      	movs	r3, #1
 8001302:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001308:	2302      	movs	r3, #2
 800130a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOUCHPWR_GPIO_Port, &GPIO_InitStruct);
 800130c:	f107 0310 	add.w	r3, r7, #16
 8001310:	4619      	mov	r1, r3
 8001312:	4829      	ldr	r0, [pc, #164]	; (80013b8 <MX_GPIO_Init+0x19c>)
 8001314:	f001 f81a 	bl	800234c <HAL_GPIO_Init>

  /*Configure GPIO pins : TOUCH8_Pin TOUCH6_Pin TOUCH4_Pin TOUCH2_Pin
                           TOUCH1_Pin TOUCH7_Pin TOUCH5_Pin TOUCH3_Pin */
  GPIO_InitStruct.Pin = TOUCH8_Pin|TOUCH6_Pin|TOUCH4_Pin|TOUCH2_Pin
 8001318:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800131c:	613b      	str	r3, [r7, #16]
                          |TOUCH1_Pin|TOUCH7_Pin|TOUCH5_Pin|TOUCH3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800131e:	2300      	movs	r3, #0
 8001320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001322:	2300      	movs	r3, #0
 8001324:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001326:	f107 0310 	add.w	r3, r7, #16
 800132a:	4619      	mov	r1, r3
 800132c:	4823      	ldr	r0, [pc, #140]	; (80013bc <MX_GPIO_Init+0x1a0>)
 800132e:	f001 f80d 	bl	800234c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001332:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001336:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001338:	2301      	movs	r3, #1
 800133a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001340:	2303      	movs	r3, #3
 8001342:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001344:	f107 0310 	add.w	r3, r7, #16
 8001348:	4619      	mov	r1, r3
 800134a:	481a      	ldr	r0, [pc, #104]	; (80013b4 <MX_GPIO_Init+0x198>)
 800134c:	f000 fffe 	bl	800234c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZER_Pin LED2_Pin LED4_Pin LED6_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|LED2_Pin|LED4_Pin|LED6_Pin;
 8001350:	2399      	movs	r3, #153	; 0x99
 8001352:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001354:	2301      	movs	r3, #1
 8001356:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135c:	2302      	movs	r3, #2
 800135e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001360:	f107 0310 	add.w	r3, r7, #16
 8001364:	4619      	mov	r1, r3
 8001366:	4815      	ldr	r0, [pc, #84]	; (80013bc <MX_GPIO_Init+0x1a0>)
 8001368:	f000 fff0 	bl	800234c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BACKLIGHT_Pin */
  GPIO_InitStruct.Pin = LCD_BACKLIGHT_Pin;
 800136c:	2304      	movs	r3, #4
 800136e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001370:	2301      	movs	r3, #1
 8001372:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001378:	2303      	movs	r3, #3
 800137a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_BACKLIGHT_GPIO_Port, &GPIO_InitStruct);
 800137c:	f107 0310 	add.w	r3, r7, #16
 8001380:	4619      	mov	r1, r3
 8001382:	480e      	ldr	r0, [pc, #56]	; (80013bc <MX_GPIO_Init+0x1a0>)
 8001384:	f000 ffe2 	bl	800234c <HAL_GPIO_Init>

  /*Configure GPIO pin : LEDENABLE_Pin */
  GPIO_InitStruct.Pin = LEDENABLE_Pin;
 8001388:	2310      	movs	r3, #16
 800138a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138c:	2301      	movs	r3, #1
 800138e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001394:	2303      	movs	r3, #3
 8001396:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LEDENABLE_GPIO_Port, &GPIO_InitStruct);
 8001398:	f107 0310 	add.w	r3, r7, #16
 800139c:	4619      	mov	r1, r3
 800139e:	4806      	ldr	r0, [pc, #24]	; (80013b8 <MX_GPIO_Init+0x19c>)
 80013a0:	f000 ffd4 	bl	800234c <HAL_GPIO_Init>

}
 80013a4:	bf00      	nop
 80013a6:	3720      	adds	r7, #32
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40021000 	.word	0x40021000
 80013b0:	40011000 	.word	0x40011000
 80013b4:	40010800 	.word	0x40010800
 80013b8:	40010c00 	.word	0x40010c00
 80013bc:	40011400 	.word	0x40011400

080013c0 <SetTemperatureBasedOnInput>:

/* USER CODE BEGIN 4 */

void SetTemperatureBasedOnInput(uint8_t ideal_temperature) {
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	71fb      	strb	r3, [r7, #7]
	if (current_temperature > ideal_temperature) {
 80013ca:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <SetTemperatureBasedOnInput+0x38>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	79fa      	ldrb	r2, [r7, #7]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d203      	bcs.n	80013dc <SetTemperatureBasedOnInput+0x1c>
		mode = COOLING;
 80013d4:	4b09      	ldr	r3, [pc, #36]	; (80013fc <SetTemperatureBasedOnInput+0x3c>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	701a      	strb	r2, [r3, #0]
	} else if (current_temperature < ideal_temperature) {
		mode = HEATING;
	}
}
 80013da:	e007      	b.n	80013ec <SetTemperatureBasedOnInput+0x2c>
	} else if (current_temperature < ideal_temperature) {
 80013dc:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <SetTemperatureBasedOnInput+0x38>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	79fa      	ldrb	r2, [r7, #7]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d902      	bls.n	80013ec <SetTemperatureBasedOnInput+0x2c>
		mode = HEATING;
 80013e6:	4b05      	ldr	r3, [pc, #20]	; (80013fc <SetTemperatureBasedOnInput+0x3c>)
 80013e8:	2201      	movs	r2, #1
 80013ea:	701a      	strb	r2, [r3, #0]
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bc80      	pop	{r7}
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	20000028 	.word	0x20000028
 80013fc:	20000148 	.word	0x20000148

08001400 <GetHourIndex>:

uint8_t GetHourIndex(uint8_t hour) {
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	71fb      	strb	r3, [r7, #7]
	uint8_t hour_index = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	73fb      	strb	r3, [r7, #15]
	if (hour >= 6 && hour < 8)
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	2b05      	cmp	r3, #5
 8001412:	d905      	bls.n	8001420 <GetHourIndex+0x20>
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	2b07      	cmp	r3, #7
 8001418:	d802      	bhi.n	8001420 <GetHourIndex+0x20>
		hour_index = 1;
 800141a:	2301      	movs	r3, #1
 800141c:	73fb      	strb	r3, [r7, #15]
 800141e:	e040      	b.n	80014a2 <GetHourIndex+0xa2>
	else if (hour >= 8 && hour < 10)
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	2b07      	cmp	r3, #7
 8001424:	d905      	bls.n	8001432 <GetHourIndex+0x32>
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	2b09      	cmp	r3, #9
 800142a:	d802      	bhi.n	8001432 <GetHourIndex+0x32>
		hour_index = 2;
 800142c:	2302      	movs	r3, #2
 800142e:	73fb      	strb	r3, [r7, #15]
 8001430:	e037      	b.n	80014a2 <GetHourIndex+0xa2>
	else if (hour >= 10 && hour < 12)
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	2b09      	cmp	r3, #9
 8001436:	d905      	bls.n	8001444 <GetHourIndex+0x44>
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	2b0b      	cmp	r3, #11
 800143c:	d802      	bhi.n	8001444 <GetHourIndex+0x44>
		hour_index = 3;
 800143e:	2303      	movs	r3, #3
 8001440:	73fb      	strb	r3, [r7, #15]
 8001442:	e02e      	b.n	80014a2 <GetHourIndex+0xa2>
	else if (hour >= 12 && hour < 14)
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	2b0b      	cmp	r3, #11
 8001448:	d905      	bls.n	8001456 <GetHourIndex+0x56>
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	2b0d      	cmp	r3, #13
 800144e:	d802      	bhi.n	8001456 <GetHourIndex+0x56>
		hour_index = 4;
 8001450:	2304      	movs	r3, #4
 8001452:	73fb      	strb	r3, [r7, #15]
 8001454:	e025      	b.n	80014a2 <GetHourIndex+0xa2>
	else if (hour >= 14 && hour < 16)
 8001456:	79fb      	ldrb	r3, [r7, #7]
 8001458:	2b0d      	cmp	r3, #13
 800145a:	d905      	bls.n	8001468 <GetHourIndex+0x68>
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	2b0f      	cmp	r3, #15
 8001460:	d802      	bhi.n	8001468 <GetHourIndex+0x68>
		hour_index = 5;
 8001462:	2305      	movs	r3, #5
 8001464:	73fb      	strb	r3, [r7, #15]
 8001466:	e01c      	b.n	80014a2 <GetHourIndex+0xa2>
	else if (hour >= 16 && hour < 18)
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	2b0f      	cmp	r3, #15
 800146c:	d905      	bls.n	800147a <GetHourIndex+0x7a>
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	2b11      	cmp	r3, #17
 8001472:	d802      	bhi.n	800147a <GetHourIndex+0x7a>
		hour_index = 6;
 8001474:	2306      	movs	r3, #6
 8001476:	73fb      	strb	r3, [r7, #15]
 8001478:	e013      	b.n	80014a2 <GetHourIndex+0xa2>
	else if (hour >= 18 && hour < 20)
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	2b11      	cmp	r3, #17
 800147e:	d905      	bls.n	800148c <GetHourIndex+0x8c>
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	2b13      	cmp	r3, #19
 8001484:	d802      	bhi.n	800148c <GetHourIndex+0x8c>
		hour_index = 7;
 8001486:	2307      	movs	r3, #7
 8001488:	73fb      	strb	r3, [r7, #15]
 800148a:	e00a      	b.n	80014a2 <GetHourIndex+0xa2>
	else if (hour >= 20 && hour < 22)
 800148c:	79fb      	ldrb	r3, [r7, #7]
 800148e:	2b13      	cmp	r3, #19
 8001490:	d905      	bls.n	800149e <GetHourIndex+0x9e>
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	2b15      	cmp	r3, #21
 8001496:	d802      	bhi.n	800149e <GetHourIndex+0x9e>
		hour_index = 8;
 8001498:	2308      	movs	r3, #8
 800149a:	73fb      	strb	r3, [r7, #15]
 800149c:	e001      	b.n	80014a2 <GetHourIndex+0xa2>
	else
		hour_index = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	73fb      	strb	r3, [r7, #15]

	return hour_index;
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr
	...

080014b0 <ThermoAdjucment>:

void ThermoAdjucment(void) {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
	uint8_t hour_index = GetHourIndex(real_hour);
 80014b6:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <ThermoAdjucment+0x70>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff ffa0 	bl	8001400 <GetHourIndex>
 80014c0:	4603      	mov	r3, r0
 80014c2:	71fb      	strb	r3, [r7, #7]
	if (days_state[real_weekday][hour_index] == OUT) {
 80014c4:	4b17      	ldr	r3, [pc, #92]	; (8001524 <ThermoAdjucment+0x74>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	79fa      	ldrb	r2, [r7, #7]
 80014cc:	4916      	ldr	r1, [pc, #88]	; (8001528 <ThermoAdjucment+0x78>)
 80014ce:	4603      	mov	r3, r0
 80014d0:	00db      	lsls	r3, r3, #3
 80014d2:	4403      	add	r3, r0
 80014d4:	440b      	add	r3, r1
 80014d6:	4413      	add	r3, r2
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d103      	bne.n	80014e6 <ThermoAdjucment+0x36>
		mode = SYSTEM_OFF;
 80014de:	4b13      	ldr	r3, [pc, #76]	; (800152c <ThermoAdjucment+0x7c>)
 80014e0:	2202      	movs	r2, #2
 80014e2:	701a      	strb	r2, [r3, #0]
	} else if (days_state[real_weekday][hour_index] == IN) {
		SetTemperatureBasedOnInput(in_comfort_temp);
	} else {
		SetTemperatureBasedOnInput(sleep_comfort_temp);
	}
}
 80014e4:	e017      	b.n	8001516 <ThermoAdjucment+0x66>
	} else if (days_state[real_weekday][hour_index] == IN) {
 80014e6:	4b0f      	ldr	r3, [pc, #60]	; (8001524 <ThermoAdjucment+0x74>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	4618      	mov	r0, r3
 80014ec:	79fa      	ldrb	r2, [r7, #7]
 80014ee:	490e      	ldr	r1, [pc, #56]	; (8001528 <ThermoAdjucment+0x78>)
 80014f0:	4603      	mov	r3, r0
 80014f2:	00db      	lsls	r3, r3, #3
 80014f4:	4403      	add	r3, r0
 80014f6:	440b      	add	r3, r1
 80014f8:	4413      	add	r3, r2
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d105      	bne.n	800150c <ThermoAdjucment+0x5c>
		SetTemperatureBasedOnInput(in_comfort_temp);
 8001500:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <ThermoAdjucment+0x80>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff ff5b 	bl	80013c0 <SetTemperatureBasedOnInput>
}
 800150a:	e004      	b.n	8001516 <ThermoAdjucment+0x66>
		SetTemperatureBasedOnInput(sleep_comfort_temp);
 800150c:	4b09      	ldr	r3, [pc, #36]	; (8001534 <ThermoAdjucment+0x84>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff ff55 	bl	80013c0 <SetTemperatureBasedOnInput>
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20000029 	.word	0x20000029
 8001524:	200001cb 	.word	0x200001cb
 8001528:	2000018c 	.word	0x2000018c
 800152c:	20000148 	.word	0x20000148
 8001530:	200001d7 	.word	0x200001d7
 8001534:	200001d8 	.word	0x200001d8

08001538 <SyncStateAndSetPoints>:

void SyncStateAndSetPoints(void) {
 8001538:	b490      	push	{r4, r7}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
	for (uint8_t day = 0; day < 7; day++) {
 800153e:	2300      	movs	r3, #0
 8001540:	71fb      	strb	r3, [r7, #7]
 8001542:	e042      	b.n	80015ca <SyncStateAndSetPoints+0x92>
		for (uint8_t hour = 0; hour < 9; hour++) {
 8001544:	2300      	movs	r3, #0
 8001546:	71bb      	strb	r3, [r7, #6]
 8001548:	e039      	b.n	80015be <SyncStateAndSetPoints+0x86>
			switch (days_state[day][hour]) {
 800154a:	79fa      	ldrb	r2, [r7, #7]
 800154c:	79b9      	ldrb	r1, [r7, #6]
 800154e:	4823      	ldr	r0, [pc, #140]	; (80015dc <SyncStateAndSetPoints+0xa4>)
 8001550:	4613      	mov	r3, r2
 8001552:	00db      	lsls	r3, r3, #3
 8001554:	4413      	add	r3, r2
 8001556:	4403      	add	r3, r0
 8001558:	440b      	add	r3, r1
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b02      	cmp	r3, #2
 800155e:	d013      	beq.n	8001588 <SyncStateAndSetPoints+0x50>
 8001560:	2b02      	cmp	r3, #2
 8001562:	dc29      	bgt.n	80015b8 <SyncStateAndSetPoints+0x80>
 8001564:	2b00      	cmp	r3, #0
 8001566:	d002      	beq.n	800156e <SyncStateAndSetPoints+0x36>
 8001568:	2b01      	cmp	r3, #1
 800156a:	d01a      	beq.n	80015a2 <SyncStateAndSetPoints+0x6a>
 800156c:	e024      	b.n	80015b8 <SyncStateAndSetPoints+0x80>
			case IN:
				days_temp[day][hour] = in_comfort_temp;
 800156e:	79fa      	ldrb	r2, [r7, #7]
 8001570:	79b9      	ldrb	r1, [r7, #6]
 8001572:	4b1b      	ldr	r3, [pc, #108]	; (80015e0 <SyncStateAndSetPoints+0xa8>)
 8001574:	781c      	ldrb	r4, [r3, #0]
 8001576:	481b      	ldr	r0, [pc, #108]	; (80015e4 <SyncStateAndSetPoints+0xac>)
 8001578:	4613      	mov	r3, r2
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	4413      	add	r3, r2
 800157e:	4403      	add	r3, r0
 8001580:	440b      	add	r3, r1
 8001582:	4622      	mov	r2, r4
 8001584:	701a      	strb	r2, [r3, #0]
				break;
 8001586:	e017      	b.n	80015b8 <SyncStateAndSetPoints+0x80>
			case SLEEP:
				days_temp[day][hour] = sleep_comfort_temp;
 8001588:	79fa      	ldrb	r2, [r7, #7]
 800158a:	79b9      	ldrb	r1, [r7, #6]
 800158c:	4b16      	ldr	r3, [pc, #88]	; (80015e8 <SyncStateAndSetPoints+0xb0>)
 800158e:	781c      	ldrb	r4, [r3, #0]
 8001590:	4814      	ldr	r0, [pc, #80]	; (80015e4 <SyncStateAndSetPoints+0xac>)
 8001592:	4613      	mov	r3, r2
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	4413      	add	r3, r2
 8001598:	4403      	add	r3, r0
 800159a:	440b      	add	r3, r1
 800159c:	4622      	mov	r2, r4
 800159e:	701a      	strb	r2, [r3, #0]
				break;
 80015a0:	e00a      	b.n	80015b8 <SyncStateAndSetPoints+0x80>
			case OUT:
				days_temp[day][hour] = 0;
 80015a2:	79fa      	ldrb	r2, [r7, #7]
 80015a4:	79b9      	ldrb	r1, [r7, #6]
 80015a6:	480f      	ldr	r0, [pc, #60]	; (80015e4 <SyncStateAndSetPoints+0xac>)
 80015a8:	4613      	mov	r3, r2
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	4413      	add	r3, r2
 80015ae:	4403      	add	r3, r0
 80015b0:	440b      	add	r3, r1
 80015b2:	2200      	movs	r2, #0
 80015b4:	701a      	strb	r2, [r3, #0]
				break;
 80015b6:	bf00      	nop
		for (uint8_t hour = 0; hour < 9; hour++) {
 80015b8:	79bb      	ldrb	r3, [r7, #6]
 80015ba:	3301      	adds	r3, #1
 80015bc:	71bb      	strb	r3, [r7, #6]
 80015be:	79bb      	ldrb	r3, [r7, #6]
 80015c0:	2b08      	cmp	r3, #8
 80015c2:	d9c2      	bls.n	800154a <SyncStateAndSetPoints+0x12>
	for (uint8_t day = 0; day < 7; day++) {
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	3301      	adds	r3, #1
 80015c8:	71fb      	strb	r3, [r7, #7]
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	2b06      	cmp	r3, #6
 80015ce:	d9b9      	bls.n	8001544 <SyncStateAndSetPoints+0xc>
			}
		}
	}
}
 80015d0:	bf00      	nop
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc90      	pop	{r4, r7}
 80015da:	4770      	bx	lr
 80015dc:	2000018c 	.word	0x2000018c
 80015e0:	200001d7 	.word	0x200001d7
 80015e4:	2000014c 	.word	0x2000014c
 80015e8:	200001d8 	.word	0x200001d8

080015ec <ReadKey>:

void ReadKey(void) {
 80015ec:	b590      	push	{r4, r7, lr}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af02      	add	r7, sp, #8
	/********Read Key1********/
	if (HAL_GPIO_ReadPin(TOUCH1_GPIO_Port, TOUCH1_Pin) == 0) {
 80015f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015f6:	486b      	ldr	r0, [pc, #428]	; (80017a4 <ReadKey+0x1b8>)
 80015f8:	f001 f83c 	bl	8002674 <HAL_GPIO_ReadPin>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d10d      	bne.n	800161e <ReadKey+0x32>
		HAL_Delay(50);
 8001602:	2032      	movs	r0, #50	; 0x32
 8001604:	f000 fd70 	bl	80020e8 <HAL_Delay>
		if (HAL_GPIO_ReadPin(TOUCH1_GPIO_Port, TOUCH1_Pin) == 0) {
 8001608:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800160c:	4865      	ldr	r0, [pc, #404]	; (80017a4 <ReadKey+0x1b8>)
 800160e:	f001 f831 	bl	8002674 <HAL_GPIO_ReadPin>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d102      	bne.n	800161e <ReadKey+0x32>
			is_button1_pressed = 1;
 8001618:	4b63      	ldr	r3, [pc, #396]	; (80017a8 <ReadKey+0x1bc>)
 800161a:	2201      	movs	r2, #1
 800161c:	701a      	strb	r2, [r3, #0]
		}
	}
	/********Read Key2********/
	if (HAL_GPIO_ReadPin(TOUCH2_GPIO_Port, TOUCH2_Pin) == 0) {
 800161e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001622:	4860      	ldr	r0, [pc, #384]	; (80017a4 <ReadKey+0x1b8>)
 8001624:	f001 f826 	bl	8002674 <HAL_GPIO_ReadPin>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d111      	bne.n	8001652 <ReadKey+0x66>
		HAL_Delay(50);
 800162e:	2032      	movs	r0, #50	; 0x32
 8001630:	f000 fd5a 	bl	80020e8 <HAL_Delay>
		if (HAL_GPIO_ReadPin(TOUCH2_GPIO_Port, TOUCH2_Pin) == 0) {
 8001634:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001638:	485a      	ldr	r0, [pc, #360]	; (80017a4 <ReadKey+0x1b8>)
 800163a:	f001 f81b 	bl	8002674 <HAL_GPIO_ReadPin>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d106      	bne.n	8001652 <ReadKey+0x66>
			LCD_Clear(White);
 8001644:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001648:	f002 fdb6 	bl	80041b8 <LCD_Clear>
			is_button2_pressed = 1;
 800164c:	4b57      	ldr	r3, [pc, #348]	; (80017ac <ReadKey+0x1c0>)
 800164e:	2201      	movs	r2, #1
 8001650:	701a      	strb	r2, [r3, #0]
		}
	}
	/********Read Key3********/
	if (HAL_GPIO_ReadPin(TOUCH3_GPIO_Port, TOUCH3_Pin) == 0) {
 8001652:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001656:	4853      	ldr	r0, [pc, #332]	; (80017a4 <ReadKey+0x1b8>)
 8001658:	f001 f80c 	bl	8002674 <HAL_GPIO_ReadPin>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d10d      	bne.n	800167e <ReadKey+0x92>
		HAL_Delay(50);
 8001662:	2032      	movs	r0, #50	; 0x32
 8001664:	f000 fd40 	bl	80020e8 <HAL_Delay>
		if (HAL_GPIO_ReadPin(TOUCH3_GPIO_Port, TOUCH3_Pin) == 0) {
 8001668:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800166c:	484d      	ldr	r0, [pc, #308]	; (80017a4 <ReadKey+0x1b8>)
 800166e:	f001 f801 	bl	8002674 <HAL_GPIO_ReadPin>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d102      	bne.n	800167e <ReadKey+0x92>
			is_button3_pressed = 1;
 8001678:	4b4d      	ldr	r3, [pc, #308]	; (80017b0 <ReadKey+0x1c4>)
 800167a:	2201      	movs	r2, #1
 800167c:	701a      	strb	r2, [r3, #0]
		}
	}
	/********Read Key4********/
	if (HAL_GPIO_ReadPin(TOUCH4_GPIO_Port, TOUCH4_Pin) == 0) {
 800167e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001682:	4848      	ldr	r0, [pc, #288]	; (80017a4 <ReadKey+0x1b8>)
 8001684:	f000 fff6 	bl	8002674 <HAL_GPIO_ReadPin>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d124      	bne.n	80016d8 <ReadKey+0xec>
		HAL_Delay(50);
 800168e:	2032      	movs	r0, #50	; 0x32
 8001690:	f000 fd2a 	bl	80020e8 <HAL_Delay>
		if (HAL_GPIO_ReadPin(TOUCH4_GPIO_Port, TOUCH4_Pin) == 0) {
 8001694:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001698:	4842      	ldr	r0, [pc, #264]	; (80017a4 <ReadKey+0x1b8>)
 800169a:	f000 ffeb 	bl	8002674 <HAL_GPIO_ReadPin>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d119      	bne.n	80016d8 <ReadKey+0xec>
			LCD_Clear(White);
 80016a4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80016a8:	f002 fd86 	bl	80041b8 <LCD_Clear>
			is_button4_pressed = 1;
 80016ac:	4b41      	ldr	r3, [pc, #260]	; (80017b4 <ReadKey+0x1c8>)
 80016ae:	2201      	movs	r2, #1
 80016b0:	701a      	strb	r2, [r3, #0]
			current_setpoint = days_temp[real_weekday][GetHourIndex(real_hour)];
 80016b2:	4b41      	ldr	r3, [pc, #260]	; (80017b8 <ReadKey+0x1cc>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	461c      	mov	r4, r3
 80016b8:	4b40      	ldr	r3, [pc, #256]	; (80017bc <ReadKey+0x1d0>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff fe9f 	bl	8001400 <GetHourIndex>
 80016c2:	4603      	mov	r3, r0
 80016c4:	4619      	mov	r1, r3
 80016c6:	4a3e      	ldr	r2, [pc, #248]	; (80017c0 <ReadKey+0x1d4>)
 80016c8:	4623      	mov	r3, r4
 80016ca:	00db      	lsls	r3, r3, #3
 80016cc:	4423      	add	r3, r4
 80016ce:	4413      	add	r3, r2
 80016d0:	440b      	add	r3, r1
 80016d2:	781a      	ldrb	r2, [r3, #0]
 80016d4:	4b3b      	ldr	r3, [pc, #236]	; (80017c4 <ReadKey+0x1d8>)
 80016d6:	701a      	strb	r2, [r3, #0]
		}
	}
	/********Read Key5********/
	if (HAL_GPIO_ReadPin(TOUCH5_GPIO_Port, TOUCH5_Pin) == 0) {
 80016d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016dc:	4831      	ldr	r0, [pc, #196]	; (80017a4 <ReadKey+0x1b8>)
 80016de:	f000 ffc9 	bl	8002674 <HAL_GPIO_ReadPin>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d10d      	bne.n	8001704 <ReadKey+0x118>
		HAL_Delay(50);
 80016e8:	2032      	movs	r0, #50	; 0x32
 80016ea:	f000 fcfd 	bl	80020e8 <HAL_Delay>
		if (HAL_GPIO_ReadPin(TOUCH5_GPIO_Port, TOUCH5_Pin) == 0) {
 80016ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016f2:	482c      	ldr	r0, [pc, #176]	; (80017a4 <ReadKey+0x1b8>)
 80016f4:	f000 ffbe 	bl	8002674 <HAL_GPIO_ReadPin>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d102      	bne.n	8001704 <ReadKey+0x118>
			is_button5_pressed = 1;
 80016fe:	4b32      	ldr	r3, [pc, #200]	; (80017c8 <ReadKey+0x1dc>)
 8001700:	2201      	movs	r2, #1
 8001702:	701a      	strb	r2, [r3, #0]
		}
	}
	/********Read Key6********/
	if (HAL_GPIO_ReadPin(TOUCH6_GPIO_Port, TOUCH6_Pin) == 0) {
 8001704:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001708:	4826      	ldr	r0, [pc, #152]	; (80017a4 <ReadKey+0x1b8>)
 800170a:	f000 ffb3 	bl	8002674 <HAL_GPIO_ReadPin>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d117      	bne.n	8001744 <ReadKey+0x158>
		HAL_Delay(50);
 8001714:	2032      	movs	r0, #50	; 0x32
 8001716:	f000 fce7 	bl	80020e8 <HAL_Delay>
		if (HAL_GPIO_ReadPin(TOUCH6_GPIO_Port, TOUCH6_Pin) == 0) {
 800171a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800171e:	4821      	ldr	r0, [pc, #132]	; (80017a4 <ReadKey+0x1b8>)
 8001720:	f000 ffa8 	bl	8002674 <HAL_GPIO_ReadPin>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d10c      	bne.n	8001744 <ReadKey+0x158>
			LCD_Clear(Green);
 800172a:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 800172e:	f002 fd43 	bl	80041b8 <LCD_Clear>
			GUI_TextArial_30pt(86, 20, "EYDGC", White, NO_BG);
 8001732:	2301      	movs	r3, #1
 8001734:	9300      	str	r3, [sp, #0]
 8001736:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800173a:	4a24      	ldr	r2, [pc, #144]	; (80017cc <ReadKey+0x1e0>)
 800173c:	2114      	movs	r1, #20
 800173e:	2056      	movs	r0, #86	; 0x56
 8001740:	f003 f8b6 	bl	80048b0 <GUI_TextArial_30pt>
		}
	}
	/********Read Key7********/
	if (HAL_GPIO_ReadPin(TOUCH7_GPIO_Port, TOUCH7_Pin) == 0) {
 8001744:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001748:	4816      	ldr	r0, [pc, #88]	; (80017a4 <ReadKey+0x1b8>)
 800174a:	f000 ff93 	bl	8002674 <HAL_GPIO_ReadPin>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d10d      	bne.n	8001770 <ReadKey+0x184>
		HAL_Delay(50);
 8001754:	2032      	movs	r0, #50	; 0x32
 8001756:	f000 fcc7 	bl	80020e8 <HAL_Delay>
		if (HAL_GPIO_ReadPin(TOUCH7_GPIO_Port, TOUCH7_Pin) == 0) {
 800175a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800175e:	4811      	ldr	r0, [pc, #68]	; (80017a4 <ReadKey+0x1b8>)
 8001760:	f000 ff88 	bl	8002674 <HAL_GPIO_ReadPin>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d102      	bne.n	8001770 <ReadKey+0x184>
			is_button7_pressed = 1;
 800176a:	4b19      	ldr	r3, [pc, #100]	; (80017d0 <ReadKey+0x1e4>)
 800176c:	2201      	movs	r2, #1
 800176e:	701a      	strb	r2, [r3, #0]
		}
	}
	/********Read Key8********/
	if (HAL_GPIO_ReadPin(TOUCH8_GPIO_Port, TOUCH8_Pin) == 0) {
 8001770:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001774:	480b      	ldr	r0, [pc, #44]	; (80017a4 <ReadKey+0x1b8>)
 8001776:	f000 ff7d 	bl	8002674 <HAL_GPIO_ReadPin>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d10d      	bne.n	800179c <ReadKey+0x1b0>
		HAL_Delay(50);
 8001780:	2032      	movs	r0, #50	; 0x32
 8001782:	f000 fcb1 	bl	80020e8 <HAL_Delay>
		if (HAL_GPIO_ReadPin(TOUCH8_GPIO_Port, TOUCH8_Pin) == 0) {
 8001786:	f44f 7180 	mov.w	r1, #256	; 0x100
 800178a:	4806      	ldr	r0, [pc, #24]	; (80017a4 <ReadKey+0x1b8>)
 800178c:	f000 ff72 	bl	8002674 <HAL_GPIO_ReadPin>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d102      	bne.n	800179c <ReadKey+0x1b0>
			is_button8_pressed = 1;
 8001796:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <ReadKey+0x1e8>)
 8001798:	2201      	movs	r2, #1
 800179a:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800179c:	bf00      	nop
 800179e:	3704      	adds	r7, #4
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd90      	pop	{r4, r7, pc}
 80017a4:	40011400 	.word	0x40011400
 80017a8:	200001d6 	.word	0x200001d6
 80017ac:	200001d5 	.word	0x200001d5
 80017b0:	200001d4 	.word	0x200001d4
 80017b4:	200001d3 	.word	0x200001d3
 80017b8:	200001cb 	.word	0x200001cb
 80017bc:	20000029 	.word	0x20000029
 80017c0:	2000014c 	.word	0x2000014c
 80017c4:	200001cf 	.word	0x200001cf
 80017c8:	200001d2 	.word	0x200001d2
 80017cc:	080056c4 	.word	0x080056c4
 80017d0:	200001d1 	.word	0x200001d1
 80017d4:	200001d0 	.word	0x200001d0

080017d8 <ShowTemperature>:

void ShowTemperature(uint8_t temperature) {
 80017d8:	b580      	push	{r7, lr}
 80017da:	b092      	sub	sp, #72	; 0x48
 80017dc:	af02      	add	r7, sp, #8
 80017de:	4603      	mov	r3, r0
 80017e0:	71fb      	strb	r3, [r7, #7]
	char str[50];
	sprintf(str, "%d", temperature);
 80017e2:	79fa      	ldrb	r2, [r7, #7]
 80017e4:	f107 030c 	add.w	r3, r7, #12
 80017e8:	4915      	ldr	r1, [pc, #84]	; (8001840 <ShowTemperature+0x68>)
 80017ea:	4618      	mov	r0, r3
 80017ec:	f003 faba 	bl	8004d64 <siprintf>
	Draw_BMP_Slice(86, 17, 42, 34, MainBG);
 80017f0:	4b14      	ldr	r3, [pc, #80]	; (8001844 <ShowTemperature+0x6c>)
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	2322      	movs	r3, #34	; 0x22
 80017f6:	222a      	movs	r2, #42	; 0x2a
 80017f8:	2111      	movs	r1, #17
 80017fa:	2056      	movs	r0, #86	; 0x56
 80017fc:	f003 f896 	bl	800492c <Draw_BMP_Slice>
	GUI_TextArial_30pt(86, 20, str, White, NO_BG);
 8001800:	f107 020c 	add.w	r2, r7, #12
 8001804:	2301      	movs	r3, #1
 8001806:	9300      	str	r3, [sp, #0]
 8001808:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800180c:	2114      	movs	r1, #20
 800180e:	2056      	movs	r0, #86	; 0x56
 8001810:	f003 f84e 	bl	80048b0 <GUI_TextArial_30pt>
	PutCharArial_22pt(128, 20, '~' + 1, White, NO_BG); //'~'+1 -> degree
 8001814:	2301      	movs	r3, #1
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800181c:	227f      	movs	r2, #127	; 0x7f
 800181e:	2114      	movs	r1, #20
 8001820:	2080      	movs	r0, #128	; 0x80
 8001822:	f002 fed9 	bl	80045d8 <PutCharArial_22pt>
	PutCharArial_30pt(138, 20, 'c', White, NO_BG);
 8001826:	2301      	movs	r3, #1
 8001828:	9300      	str	r3, [sp, #0]
 800182a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800182e:	2263      	movs	r2, #99	; 0x63
 8001830:	2114      	movs	r1, #20
 8001832:	208a      	movs	r0, #138	; 0x8a
 8001834:	f002 ff86 	bl	8004744 <PutCharArial_30pt>
}
 8001838:	bf00      	nop
 800183a:	3740      	adds	r7, #64	; 0x40
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	080056c0 	.word	0x080056c0
 8001844:	0800ab98 	.word	0x0800ab98

08001848 <ShowDateAndTime>:

void ShowDateAndTime(uint16_t year, uint8_t month, uint8_t day, uint8_t hour,
		uint8_t minute) {
 8001848:	b5b0      	push	{r4, r5, r7, lr}
 800184a:	b098      	sub	sp, #96	; 0x60
 800184c:	af04      	add	r7, sp, #16
 800184e:	4604      	mov	r4, r0
 8001850:	4608      	mov	r0, r1
 8001852:	4611      	mov	r1, r2
 8001854:	461a      	mov	r2, r3
 8001856:	4623      	mov	r3, r4
 8001858:	80fb      	strh	r3, [r7, #6]
 800185a:	4603      	mov	r3, r0
 800185c:	717b      	strb	r3, [r7, #5]
 800185e:	460b      	mov	r3, r1
 8001860:	713b      	strb	r3, [r7, #4]
 8001862:	4613      	mov	r3, r2
 8001864:	70fb      	strb	r3, [r7, #3]
	char str[70];
	sprintf(str, "%d/%d/%d  %d:%d", year, month, day, hour, minute);
 8001866:	88fc      	ldrh	r4, [r7, #6]
 8001868:	797d      	ldrb	r5, [r7, #5]
 800186a:	793b      	ldrb	r3, [r7, #4]
 800186c:	78fa      	ldrb	r2, [r7, #3]
 800186e:	f897 1060 	ldrb.w	r1, [r7, #96]	; 0x60
 8001872:	f107 0008 	add.w	r0, r7, #8
 8001876:	9102      	str	r1, [sp, #8]
 8001878:	9201      	str	r2, [sp, #4]
 800187a:	9300      	str	r3, [sp, #0]
 800187c:	462b      	mov	r3, r5
 800187e:	4622      	mov	r2, r4
 8001880:	4908      	ldr	r1, [pc, #32]	; (80018a4 <ShowDateAndTime+0x5c>)
 8001882:	f003 fa6f 	bl	8004d64 <siprintf>
	GUI_TextArial_18pt(35, 250, str, White, NO_BG);
 8001886:	f107 0208 	add.w	r2, r7, #8
 800188a:	2301      	movs	r3, #1
 800188c:	9300      	str	r3, [sp, #0]
 800188e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001892:	21fa      	movs	r1, #250	; 0xfa
 8001894:	2023      	movs	r0, #35	; 0x23
 8001896:	f002 fe61 	bl	800455c <GUI_TextArial_18pt>
}
 800189a:	bf00      	nop
 800189c:	3750      	adds	r7, #80	; 0x50
 800189e:	46bd      	mov	sp, r7
 80018a0:	bdb0      	pop	{r4, r5, r7, pc}
 80018a2:	bf00      	nop
 80018a4:	080056cc 	.word	0x080056cc

080018a8 <ShowMode>:

void ShowMode(void) {
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af02      	add	r7, sp, #8
//	Draw_BMP_Slice(70, 85, 30, 103, MainBG);
	GUI_TextArial_18pt(70, 90, temp_modes[(uint8_t) mode], White, NO_BG);
 80018ae:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <ShowMode+0x28>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	461a      	mov	r2, r3
 80018b4:	4b07      	ldr	r3, [pc, #28]	; (80018d4 <ShowMode+0x2c>)
 80018b6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80018ba:	2301      	movs	r3, #1
 80018bc:	9300      	str	r3, [sp, #0]
 80018be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018c2:	215a      	movs	r1, #90	; 0x5a
 80018c4:	2046      	movs	r0, #70	; 0x46
 80018c6:	f002 fe49 	bl	800455c <GUI_TextArial_18pt>
}
 80018ca:	bf00      	nop
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	20000148 	.word	0x20000148
 80018d4:	20000000 	.word	0x20000000

080018d8 <LcdPageOne>:

void LcdPageOne(void) {
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af02      	add	r7, sp, #8
	LCD_Clear(Black);
 80018de:	2000      	movs	r0, #0
 80018e0:	f002 fc6a 	bl	80041b8 <LCD_Clear>
	Draw_BMP_Fast(0, 0, MainBG);
 80018e4:	4a11      	ldr	r2, [pc, #68]	; (800192c <LcdPageOne+0x54>)
 80018e6:	2100      	movs	r1, #0
 80018e8:	2000      	movs	r0, #0
 80018ea:	f003 f917 	bl	8004b1c <Draw_BMP_Fast>
	ShowTemperature(current_temperature);
 80018ee:	4b10      	ldr	r3, [pc, #64]	; (8001930 <LcdPageOne+0x58>)
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff ff70 	bl	80017d8 <ShowTemperature>
	GUI_TextArial_18pt(70, 90, temp_modes[(uint8_t) mode], White, NO_BG);
 80018f8:	4b0e      	ldr	r3, [pc, #56]	; (8001934 <LcdPageOne+0x5c>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	461a      	mov	r2, r3
 80018fe:	4b0e      	ldr	r3, [pc, #56]	; (8001938 <LcdPageOne+0x60>)
 8001900:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001904:	2301      	movs	r3, #1
 8001906:	9300      	str	r3, [sp, #0]
 8001908:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800190c:	215a      	movs	r1, #90	; 0x5a
 800190e:	2046      	movs	r0, #70	; 0x46
 8001910:	f002 fe24 	bl	800455c <GUI_TextArial_18pt>
	ShowDateAndTime(2023, 10, 23, 13, 7);
 8001914:	2307      	movs	r3, #7
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	230d      	movs	r3, #13
 800191a:	2217      	movs	r2, #23
 800191c:	210a      	movs	r1, #10
 800191e:	f240 70e7 	movw	r0, #2023	; 0x7e7
 8001922:	f7ff ff91 	bl	8001848 <ShowDateAndTime>
}
 8001926:	bf00      	nop
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	0800ab98 	.word	0x0800ab98
 8001930:	20000028 	.word	0x20000028
 8001934:	20000148 	.word	0x20000148
 8001938:	20000000 	.word	0x20000000

0800193c <table_item>:

void table_item(uint8_t day, uint8_t clk, uint16_t y, uint16_t l_y,
		uint8_t is_am, uint8_t has_line, uint8_t index) {
 800193c:	b590      	push	{r4, r7, lr}
 800193e:	b08b      	sub	sp, #44	; 0x2c
 8001940:	af02      	add	r7, sp, #8
 8001942:	4604      	mov	r4, r0
 8001944:	4608      	mov	r0, r1
 8001946:	4611      	mov	r1, r2
 8001948:	461a      	mov	r2, r3
 800194a:	4623      	mov	r3, r4
 800194c:	71fb      	strb	r3, [r7, #7]
 800194e:	4603      	mov	r3, r0
 8001950:	71bb      	strb	r3, [r7, #6]
 8001952:	460b      	mov	r3, r1
 8001954:	80bb      	strh	r3, [r7, #4]
 8001956:	4613      	mov	r3, r2
 8001958:	807b      	strh	r3, [r7, #2]
	char str[20];
	if (is_am == 1)
 800195a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800195e:	2b01      	cmp	r3, #1
 8001960:	d107      	bne.n	8001972 <table_item+0x36>
		sprintf(str, "%dAM", clk);
 8001962:	79ba      	ldrb	r2, [r7, #6]
 8001964:	f107 030c 	add.w	r3, r7, #12
 8001968:	4954      	ldr	r1, [pc, #336]	; (8001abc <table_item+0x180>)
 800196a:	4618      	mov	r0, r3
 800196c:	f003 f9fa 	bl	8004d64 <siprintf>
 8001970:	e006      	b.n	8001980 <table_item+0x44>
	else
		sprintf(str, "%dPM", clk);
 8001972:	79ba      	ldrb	r2, [r7, #6]
 8001974:	f107 030c 	add.w	r3, r7, #12
 8001978:	4951      	ldr	r1, [pc, #324]	; (8001ac0 <table_item+0x184>)
 800197a:	4618      	mov	r0, r3
 800197c:	f003 f9f2 	bl	8004d64 <siprintf>
	GUI_TextArial_18pt(10, y, str, GET_TEXT_COLOR(current_day_cursor, index),
 8001980:	4b50      	ldr	r3, [pc, #320]	; (8001ac4 <table_item+0x188>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001988:	429a      	cmp	r2, r3
 800198a:	d102      	bne.n	8001992 <table_item+0x56>
 800198c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001990:	e000      	b.n	8001994 <table_item+0x58>
 8001992:	2000      	movs	r0, #0
			GET_BACKGROUND_COLOR(current_day_cursor, index));
 8001994:	4b4b      	ldr	r3, [pc, #300]	; (8001ac4 <table_item+0x188>)
 8001996:	781b      	ldrb	r3, [r3, #0]
	GUI_TextArial_18pt(10, y, str, GET_TEXT_COLOR(current_day_cursor, index),
 8001998:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800199c:	429a      	cmp	r2, r3
 800199e:	d101      	bne.n	80019a4 <table_item+0x68>
 80019a0:	2300      	movs	r3, #0
 80019a2:	e001      	b.n	80019a8 <table_item+0x6c>
 80019a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019a8:	f107 020c 	add.w	r2, r7, #12
 80019ac:	88b9      	ldrh	r1, [r7, #4]
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	4603      	mov	r3, r0
 80019b2:	200a      	movs	r0, #10
 80019b4:	f002 fdd2 	bl	800455c <GUI_TextArial_18pt>
	sprintf(str, "%d", days_temp[day][index]);
 80019b8:	79fa      	ldrb	r2, [r7, #7]
 80019ba:	f897 1038 	ldrb.w	r1, [r7, #56]	; 0x38
 80019be:	4842      	ldr	r0, [pc, #264]	; (8001ac8 <table_item+0x18c>)
 80019c0:	4613      	mov	r3, r2
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	4413      	add	r3, r2
 80019c6:	4403      	add	r3, r0
 80019c8:	440b      	add	r3, r1
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	461a      	mov	r2, r3
 80019ce:	f107 030c 	add.w	r3, r7, #12
 80019d2:	493e      	ldr	r1, [pc, #248]	; (8001acc <table_item+0x190>)
 80019d4:	4618      	mov	r0, r3
 80019d6:	f003 f9c5 	bl	8004d64 <siprintf>
	GUI_TextArial_18pt(100, y, str, Black, NO_BG);
 80019da:	f107 020c 	add.w	r2, r7, #12
 80019de:	88b9      	ldrh	r1, [r7, #4]
 80019e0:	2301      	movs	r3, #1
 80019e2:	9300      	str	r3, [sp, #0]
 80019e4:	2300      	movs	r3, #0
 80019e6:	2064      	movs	r0, #100	; 0x64
 80019e8:	f002 fdb8 	bl	800455c <GUI_TextArial_18pt>
	if (state_editor_mode == 1 && current_day_cursor == index) {
 80019ec:	4b38      	ldr	r3, [pc, #224]	; (8001ad0 <table_item+0x194>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d12d      	bne.n	8001a50 <table_item+0x114>
 80019f4:	4b33      	ldr	r3, [pc, #204]	; (8001ac4 <table_item+0x188>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d127      	bne.n	8001a50 <table_item+0x114>
		GUI_TextArial_18pt(170, y, GET_STATE_STRING(current_hour_state),
 8001a00:	4b34      	ldr	r3, [pc, #208]	; (8001ad4 <table_item+0x198>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d007      	beq.n	8001a18 <table_item+0xdc>
 8001a08:	4b32      	ldr	r3, [pc, #200]	; (8001ad4 <table_item+0x198>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d101      	bne.n	8001a14 <table_item+0xd8>
 8001a10:	4a31      	ldr	r2, [pc, #196]	; (8001ad8 <table_item+0x19c>)
 8001a12:	e002      	b.n	8001a1a <table_item+0xde>
 8001a14:	4a31      	ldr	r2, [pc, #196]	; (8001adc <table_item+0x1a0>)
 8001a16:	e000      	b.n	8001a1a <table_item+0xde>
 8001a18:	4a31      	ldr	r2, [pc, #196]	; (8001ae0 <table_item+0x1a4>)
				GET_TEXT_COLOR(current_day_cursor, index),
 8001a1a:	4b2a      	ldr	r3, [pc, #168]	; (8001ac4 <table_item+0x188>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
		GUI_TextArial_18pt(170, y, GET_STATE_STRING(current_hour_state),
 8001a1e:	f897 1038 	ldrb.w	r1, [r7, #56]	; 0x38
 8001a22:	4299      	cmp	r1, r3
 8001a24:	d102      	bne.n	8001a2c <table_item+0xf0>
 8001a26:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001a2a:	e000      	b.n	8001a2e <table_item+0xf2>
 8001a2c:	2000      	movs	r0, #0
				GET_BACKGROUND_COLOR(current_day_cursor, index));
 8001a2e:	4b25      	ldr	r3, [pc, #148]	; (8001ac4 <table_item+0x188>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
		GUI_TextArial_18pt(170, y, GET_STATE_STRING(current_hour_state),
 8001a32:	f897 1038 	ldrb.w	r1, [r7, #56]	; 0x38
 8001a36:	4299      	cmp	r1, r3
 8001a38:	d101      	bne.n	8001a3e <table_item+0x102>
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	e001      	b.n	8001a42 <table_item+0x106>
 8001a3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a42:	88b9      	ldrh	r1, [r7, #4]
 8001a44:	9300      	str	r3, [sp, #0]
 8001a46:	4603      	mov	r3, r0
 8001a48:	20aa      	movs	r0, #170	; 0xaa
 8001a4a:	f002 fd87 	bl	800455c <GUI_TextArial_18pt>
 8001a4e:	e024      	b.n	8001a9a <table_item+0x15e>
	} else {
		GUI_TextArial_18pt(170, y, GET_STATE_STRING(days_state[day][index]),
 8001a50:	79fa      	ldrb	r2, [r7, #7]
 8001a52:	f897 1038 	ldrb.w	r1, [r7, #56]	; 0x38
 8001a56:	4823      	ldr	r0, [pc, #140]	; (8001ae4 <table_item+0x1a8>)
 8001a58:	4613      	mov	r3, r2
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	4413      	add	r3, r2
 8001a5e:	4403      	add	r3, r0
 8001a60:	440b      	add	r3, r1
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d00f      	beq.n	8001a88 <table_item+0x14c>
 8001a68:	79fa      	ldrb	r2, [r7, #7]
 8001a6a:	f897 1038 	ldrb.w	r1, [r7, #56]	; 0x38
 8001a6e:	481d      	ldr	r0, [pc, #116]	; (8001ae4 <table_item+0x1a8>)
 8001a70:	4613      	mov	r3, r2
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	4413      	add	r3, r2
 8001a76:	4403      	add	r3, r0
 8001a78:	440b      	add	r3, r1
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d101      	bne.n	8001a84 <table_item+0x148>
 8001a80:	4a15      	ldr	r2, [pc, #84]	; (8001ad8 <table_item+0x19c>)
 8001a82:	e002      	b.n	8001a8a <table_item+0x14e>
 8001a84:	4a15      	ldr	r2, [pc, #84]	; (8001adc <table_item+0x1a0>)
 8001a86:	e000      	b.n	8001a8a <table_item+0x14e>
 8001a88:	4a15      	ldr	r2, [pc, #84]	; (8001ae0 <table_item+0x1a4>)
 8001a8a:	88b9      	ldrh	r1, [r7, #4]
 8001a8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a90:	9300      	str	r3, [sp, #0]
 8001a92:	2300      	movs	r3, #0
 8001a94:	20aa      	movs	r0, #170	; 0xaa
 8001a96:	f002 fd61 	bl	800455c <GUI_TextArial_18pt>
		Black,
		White);
	}
	if (has_line == 1)
 8001a9a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d108      	bne.n	8001ab4 <table_item+0x178>
		LCD_DrawLine(0, l_y, 300, l_y, Black);
 8001aa2:	887b      	ldrh	r3, [r7, #2]
 8001aa4:	8879      	ldrh	r1, [r7, #2]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	9200      	str	r2, [sp, #0]
 8001aaa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001aae:	2000      	movs	r0, #0
 8001ab0:	f002 fbd7 	bl	8004262 <LCD_DrawLine>
}
 8001ab4:	bf00      	nop
 8001ab6:	3724      	adds	r7, #36	; 0x24
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd90      	pop	{r4, r7, pc}
 8001abc:	080056dc 	.word	0x080056dc
 8001ac0:	080056e4 	.word	0x080056e4
 8001ac4:	2000002a 	.word	0x2000002a
 8001ac8:	2000014c 	.word	0x2000014c
 8001acc:	080056c0 	.word	0x080056c0
 8001ad0:	200001ce 	.word	0x200001ce
 8001ad4:	200001cc 	.word	0x200001cc
 8001ad8:	080056ec 	.word	0x080056ec
 8001adc:	080056f4 	.word	0x080056f4
 8001ae0:	080056fc 	.word	0x080056fc
 8001ae4:	2000018c 	.word	0x2000018c

08001ae8 <LcdDailySchedule>:

void LcdDailySchedule(uint8_t day) {
 8001ae8:	b590      	push	{r4, r7, lr}
 8001aea:	b08d      	sub	sp, #52	; 0x34
 8001aec:	af04      	add	r7, sp, #16
 8001aee:	4603      	mov	r3, r0
 8001af0:	71fb      	strb	r3, [r7, #7]
	GUI_TextArial_18pt(50, 5, week_days[day], Black, NO_BG);
 8001af2:	79fb      	ldrb	r3, [r7, #7]
 8001af4:	4a80      	ldr	r2, [pc, #512]	; (8001cf8 <LcdDailySchedule+0x210>)
 8001af6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001afa:	2301      	movs	r3, #1
 8001afc:	9300      	str	r3, [sp, #0]
 8001afe:	2300      	movs	r3, #0
 8001b00:	2105      	movs	r1, #5
 8001b02:	2032      	movs	r0, #50	; 0x32
 8001b04:	f002 fd2a 	bl	800455c <GUI_TextArial_18pt>
	char str[20];
	if (is_button1_pressed == 1) {
 8001b08:	4b7c      	ldr	r3, [pc, #496]	; (8001cfc <LcdDailySchedule+0x214>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d126      	bne.n	8001b5e <LcdDailySchedule+0x76>
		if (state_editor_mode == 0)
 8001b10:	4b7b      	ldr	r3, [pc, #492]	; (8001d00 <LcdDailySchedule+0x218>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d110      	bne.n	8001b3a <LcdDailySchedule+0x52>
			current_day_cursor = (current_day_cursor - 1) % 9;
 8001b18:	4b7a      	ldr	r3, [pc, #488]	; (8001d04 <LcdDailySchedule+0x21c>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	1e5a      	subs	r2, r3, #1
 8001b1e:	4b7a      	ldr	r3, [pc, #488]	; (8001d08 <LcdDailySchedule+0x220>)
 8001b20:	fb83 1302 	smull	r1, r3, r3, r2
 8001b24:	1059      	asrs	r1, r3, #1
 8001b26:	17d3      	asrs	r3, r2, #31
 8001b28:	1ac9      	subs	r1, r1, r3
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	440b      	add	r3, r1
 8001b30:	1ad1      	subs	r1, r2, r3
 8001b32:	b2ca      	uxtb	r2, r1
 8001b34:	4b73      	ldr	r3, [pc, #460]	; (8001d04 <LcdDailySchedule+0x21c>)
 8001b36:	701a      	strb	r2, [r3, #0]
 8001b38:	e00e      	b.n	8001b58 <LcdDailySchedule+0x70>
		else
			current_hour_state = (current_hour_state - 1) % 3;
 8001b3a:	4b74      	ldr	r3, [pc, #464]	; (8001d0c <LcdDailySchedule+0x224>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	1e5a      	subs	r2, r3, #1
 8001b40:	4b73      	ldr	r3, [pc, #460]	; (8001d10 <LcdDailySchedule+0x228>)
 8001b42:	fb83 3102 	smull	r3, r1, r3, r2
 8001b46:	17d3      	asrs	r3, r2, #31
 8001b48:	1ac9      	subs	r1, r1, r3
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	440b      	add	r3, r1
 8001b50:	1ad1      	subs	r1, r2, r3
 8001b52:	b2ca      	uxtb	r2, r1
 8001b54:	4b6d      	ldr	r3, [pc, #436]	; (8001d0c <LcdDailySchedule+0x224>)
 8001b56:	701a      	strb	r2, [r3, #0]
		is_button1_pressed = 0;
 8001b58:	4b68      	ldr	r3, [pc, #416]	; (8001cfc <LcdDailySchedule+0x214>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	701a      	strb	r2, [r3, #0]
	}

	if (is_button3_pressed == 1) {
 8001b5e:	4b6d      	ldr	r3, [pc, #436]	; (8001d14 <LcdDailySchedule+0x22c>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d126      	bne.n	8001bb4 <LcdDailySchedule+0xcc>
		if (state_editor_mode == 0)
 8001b66:	4b66      	ldr	r3, [pc, #408]	; (8001d00 <LcdDailySchedule+0x218>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d110      	bne.n	8001b90 <LcdDailySchedule+0xa8>
			current_day_cursor = (current_day_cursor + 1) % 9;
 8001b6e:	4b65      	ldr	r3, [pc, #404]	; (8001d04 <LcdDailySchedule+0x21c>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	1c5a      	adds	r2, r3, #1
 8001b74:	4b64      	ldr	r3, [pc, #400]	; (8001d08 <LcdDailySchedule+0x220>)
 8001b76:	fb83 1302 	smull	r1, r3, r3, r2
 8001b7a:	1059      	asrs	r1, r3, #1
 8001b7c:	17d3      	asrs	r3, r2, #31
 8001b7e:	1ac9      	subs	r1, r1, r3
 8001b80:	460b      	mov	r3, r1
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	440b      	add	r3, r1
 8001b86:	1ad1      	subs	r1, r2, r3
 8001b88:	b2ca      	uxtb	r2, r1
 8001b8a:	4b5e      	ldr	r3, [pc, #376]	; (8001d04 <LcdDailySchedule+0x21c>)
 8001b8c:	701a      	strb	r2, [r3, #0]
 8001b8e:	e00e      	b.n	8001bae <LcdDailySchedule+0xc6>
		else
			current_hour_state = (current_hour_state + 1) % 3;
 8001b90:	4b5e      	ldr	r3, [pc, #376]	; (8001d0c <LcdDailySchedule+0x224>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	1c5a      	adds	r2, r3, #1
 8001b96:	4b5e      	ldr	r3, [pc, #376]	; (8001d10 <LcdDailySchedule+0x228>)
 8001b98:	fb83 3102 	smull	r3, r1, r3, r2
 8001b9c:	17d3      	asrs	r3, r2, #31
 8001b9e:	1ac9      	subs	r1, r1, r3
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	440b      	add	r3, r1
 8001ba6:	1ad1      	subs	r1, r2, r3
 8001ba8:	b2ca      	uxtb	r2, r1
 8001baa:	4b58      	ldr	r3, [pc, #352]	; (8001d0c <LcdDailySchedule+0x224>)
 8001bac:	701a      	strb	r2, [r3, #0]
		is_button3_pressed = 0;
 8001bae:	4b59      	ldr	r3, [pc, #356]	; (8001d14 <LcdDailySchedule+0x22c>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	701a      	strb	r2, [r3, #0]
	}

	if (is_button5_pressed == 1) {
 8001bb4:	4b58      	ldr	r3, [pc, #352]	; (8001d18 <LcdDailySchedule+0x230>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d12a      	bne.n	8001c12 <LcdDailySchedule+0x12a>
		if (state_editor_mode == 0) {
 8001bbc:	4b50      	ldr	r3, [pc, #320]	; (8001d00 <LcdDailySchedule+0x218>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d110      	bne.n	8001be6 <LcdDailySchedule+0xfe>
			current_hour_state = days_state[day][current_day_cursor];
 8001bc4:	79fa      	ldrb	r2, [r7, #7]
 8001bc6:	4b4f      	ldr	r3, [pc, #316]	; (8001d04 <LcdDailySchedule+0x21c>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	4953      	ldr	r1, [pc, #332]	; (8001d1c <LcdDailySchedule+0x234>)
 8001bce:	4613      	mov	r3, r2
 8001bd0:	00db      	lsls	r3, r3, #3
 8001bd2:	4413      	add	r3, r2
 8001bd4:	440b      	add	r3, r1
 8001bd6:	4403      	add	r3, r0
 8001bd8:	781a      	ldrb	r2, [r3, #0]
 8001bda:	4b4c      	ldr	r3, [pc, #304]	; (8001d0c <LcdDailySchedule+0x224>)
 8001bdc:	701a      	strb	r2, [r3, #0]
			state_editor_mode = 1;
 8001bde:	4b48      	ldr	r3, [pc, #288]	; (8001d00 <LcdDailySchedule+0x218>)
 8001be0:	2201      	movs	r2, #1
 8001be2:	701a      	strb	r2, [r3, #0]
 8001be4:	e012      	b.n	8001c0c <LcdDailySchedule+0x124>
		} else {
			days_state[day][current_day_cursor] = current_hour_state;
 8001be6:	79fa      	ldrb	r2, [r7, #7]
 8001be8:	4b46      	ldr	r3, [pc, #280]	; (8001d04 <LcdDailySchedule+0x21c>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	461c      	mov	r4, r3
 8001bee:	4b47      	ldr	r3, [pc, #284]	; (8001d0c <LcdDailySchedule+0x224>)
 8001bf0:	7818      	ldrb	r0, [r3, #0]
 8001bf2:	494a      	ldr	r1, [pc, #296]	; (8001d1c <LcdDailySchedule+0x234>)
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	4413      	add	r3, r2
 8001bfa:	440b      	add	r3, r1
 8001bfc:	4423      	add	r3, r4
 8001bfe:	4602      	mov	r2, r0
 8001c00:	701a      	strb	r2, [r3, #0]
			SyncStateAndSetPoints();
 8001c02:	f7ff fc99 	bl	8001538 <SyncStateAndSetPoints>
			state_editor_mode = 0;
 8001c06:	4b3e      	ldr	r3, [pc, #248]	; (8001d00 <LcdDailySchedule+0x218>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	701a      	strb	r2, [r3, #0]
		}
		is_button5_pressed = 0;
 8001c0c:	4b42      	ldr	r3, [pc, #264]	; (8001d18 <LcdDailySchedule+0x230>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	701a      	strb	r2, [r3, #0]
	}
	table_item(day, 6, 30, 55, 1, 1, 1);
 8001c12:	79f8      	ldrb	r0, [r7, #7]
 8001c14:	2301      	movs	r3, #1
 8001c16:	9302      	str	r3, [sp, #8]
 8001c18:	2301      	movs	r3, #1
 8001c1a:	9301      	str	r3, [sp, #4]
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	2337      	movs	r3, #55	; 0x37
 8001c22:	221e      	movs	r2, #30
 8001c24:	2106      	movs	r1, #6
 8001c26:	f7ff fe89 	bl	800193c <table_item>

	table_item(day, 8, 60, 85, 1, 1, 2);
 8001c2a:	79f8      	ldrb	r0, [r7, #7]
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	9302      	str	r3, [sp, #8]
 8001c30:	2301      	movs	r3, #1
 8001c32:	9301      	str	r3, [sp, #4]
 8001c34:	2301      	movs	r3, #1
 8001c36:	9300      	str	r3, [sp, #0]
 8001c38:	2355      	movs	r3, #85	; 0x55
 8001c3a:	223c      	movs	r2, #60	; 0x3c
 8001c3c:	2108      	movs	r1, #8
 8001c3e:	f7ff fe7d 	bl	800193c <table_item>

	table_item(day, 10, 90, 115, 1, 1, 3);
 8001c42:	79f8      	ldrb	r0, [r7, #7]
 8001c44:	2303      	movs	r3, #3
 8001c46:	9302      	str	r3, [sp, #8]
 8001c48:	2301      	movs	r3, #1
 8001c4a:	9301      	str	r3, [sp, #4]
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	9300      	str	r3, [sp, #0]
 8001c50:	2373      	movs	r3, #115	; 0x73
 8001c52:	225a      	movs	r2, #90	; 0x5a
 8001c54:	210a      	movs	r1, #10
 8001c56:	f7ff fe71 	bl	800193c <table_item>

	table_item(day, 12, 120, 145, 0, 1, 4);
 8001c5a:	79f8      	ldrb	r0, [r7, #7]
 8001c5c:	2304      	movs	r3, #4
 8001c5e:	9302      	str	r3, [sp, #8]
 8001c60:	2301      	movs	r3, #1
 8001c62:	9301      	str	r3, [sp, #4]
 8001c64:	2300      	movs	r3, #0
 8001c66:	9300      	str	r3, [sp, #0]
 8001c68:	2391      	movs	r3, #145	; 0x91
 8001c6a:	2278      	movs	r2, #120	; 0x78
 8001c6c:	210c      	movs	r1, #12
 8001c6e:	f7ff fe65 	bl	800193c <table_item>

	table_item(day, 2, 150, 175, 0, 1, 5);
 8001c72:	79f8      	ldrb	r0, [r7, #7]
 8001c74:	2305      	movs	r3, #5
 8001c76:	9302      	str	r3, [sp, #8]
 8001c78:	2301      	movs	r3, #1
 8001c7a:	9301      	str	r3, [sp, #4]
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	9300      	str	r3, [sp, #0]
 8001c80:	23af      	movs	r3, #175	; 0xaf
 8001c82:	2296      	movs	r2, #150	; 0x96
 8001c84:	2102      	movs	r1, #2
 8001c86:	f7ff fe59 	bl	800193c <table_item>

	table_item(day, 4, 180, 205, 0, 1, 6);
 8001c8a:	79f8      	ldrb	r0, [r7, #7]
 8001c8c:	2306      	movs	r3, #6
 8001c8e:	9302      	str	r3, [sp, #8]
 8001c90:	2301      	movs	r3, #1
 8001c92:	9301      	str	r3, [sp, #4]
 8001c94:	2300      	movs	r3, #0
 8001c96:	9300      	str	r3, [sp, #0]
 8001c98:	23cd      	movs	r3, #205	; 0xcd
 8001c9a:	22b4      	movs	r2, #180	; 0xb4
 8001c9c:	2104      	movs	r1, #4
 8001c9e:	f7ff fe4d 	bl	800193c <table_item>

	table_item(day, 6, 210, 235, 0, 1, 7);
 8001ca2:	79f8      	ldrb	r0, [r7, #7]
 8001ca4:	2307      	movs	r3, #7
 8001ca6:	9302      	str	r3, [sp, #8]
 8001ca8:	2301      	movs	r3, #1
 8001caa:	9301      	str	r3, [sp, #4]
 8001cac:	2300      	movs	r3, #0
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	23eb      	movs	r3, #235	; 0xeb
 8001cb2:	22d2      	movs	r2, #210	; 0xd2
 8001cb4:	2106      	movs	r1, #6
 8001cb6:	f7ff fe41 	bl	800193c <table_item>

	table_item(day, 8, 240, 265, 0, 1, 8);
 8001cba:	79f8      	ldrb	r0, [r7, #7]
 8001cbc:	2308      	movs	r3, #8
 8001cbe:	9302      	str	r3, [sp, #8]
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	9301      	str	r3, [sp, #4]
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	9300      	str	r3, [sp, #0]
 8001cc8:	f240 1309 	movw	r3, #265	; 0x109
 8001ccc:	22f0      	movs	r2, #240	; 0xf0
 8001cce:	2108      	movs	r1, #8
 8001cd0:	f7ff fe34 	bl	800193c <table_item>

	table_item(day, 10, 270, 295, 0, 0, 0);
 8001cd4:	79f8      	ldrb	r0, [r7, #7]
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	9302      	str	r3, [sp, #8]
 8001cda:	2300      	movs	r3, #0
 8001cdc:	9301      	str	r3, [sp, #4]
 8001cde:	2300      	movs	r3, #0
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	f240 1327 	movw	r3, #295	; 0x127
 8001ce6:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8001cea:	210a      	movs	r1, #10
 8001cec:	f7ff fe26 	bl	800193c <table_item>
}
 8001cf0:	bf00      	nop
 8001cf2:	3724      	adds	r7, #36	; 0x24
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd90      	pop	{r4, r7, pc}
 8001cf8:	2000000c 	.word	0x2000000c
 8001cfc:	200001d6 	.word	0x200001d6
 8001d00:	200001ce 	.word	0x200001ce
 8001d04:	2000002a 	.word	0x2000002a
 8001d08:	38e38e39 	.word	0x38e38e39
 8001d0c:	200001cc 	.word	0x200001cc
 8001d10:	55555556 	.word	0x55555556
 8001d14:	200001d4 	.word	0x200001d4
 8001d18:	200001d2 	.word	0x200001d2
 8001d1c:	2000018c 	.word	0x2000018c

08001d20 <LcdGiveFeedback>:

void LcdGiveFeedback(void) {
 8001d20:	b590      	push	{r4, r7, lr}
 8001d22:	b089      	sub	sp, #36	; 0x24
 8001d24:	af02      	add	r7, sp, #8
	if (is_button1_pressed == 1) {
 8001d26:	4b31      	ldr	r3, [pc, #196]	; (8001dec <LcdGiveFeedback+0xcc>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d108      	bne.n	8001d40 <LcdGiveFeedback+0x20>
		current_setpoint++;
 8001d2e:	4b30      	ldr	r3, [pc, #192]	; (8001df0 <LcdGiveFeedback+0xd0>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	3301      	adds	r3, #1
 8001d34:	b2da      	uxtb	r2, r3
 8001d36:	4b2e      	ldr	r3, [pc, #184]	; (8001df0 <LcdGiveFeedback+0xd0>)
 8001d38:	701a      	strb	r2, [r3, #0]
		is_button1_pressed = 0;
 8001d3a:	4b2c      	ldr	r3, [pc, #176]	; (8001dec <LcdGiveFeedback+0xcc>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	701a      	strb	r2, [r3, #0]
	}

	if (is_button3_pressed == 1) {
 8001d40:	4b2c      	ldr	r3, [pc, #176]	; (8001df4 <LcdGiveFeedback+0xd4>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d108      	bne.n	8001d5a <LcdGiveFeedback+0x3a>
		current_setpoint--;
 8001d48:	4b29      	ldr	r3, [pc, #164]	; (8001df0 <LcdGiveFeedback+0xd0>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	3b01      	subs	r3, #1
 8001d4e:	b2da      	uxtb	r2, r3
 8001d50:	4b27      	ldr	r3, [pc, #156]	; (8001df0 <LcdGiveFeedback+0xd0>)
 8001d52:	701a      	strb	r2, [r3, #0]
		is_button3_pressed = 0;
 8001d54:	4b27      	ldr	r3, [pc, #156]	; (8001df4 <LcdGiveFeedback+0xd4>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	701a      	strb	r2, [r3, #0]
	}

	if (is_button5_pressed == 1) {
 8001d5a:	4b27      	ldr	r3, [pc, #156]	; (8001df8 <LcdGiveFeedback+0xd8>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d125      	bne.n	8001dae <LcdGiveFeedback+0x8e>
		states current_state = days_state[real_weekday][GetHourIndex(real_hour)];
 8001d62:	4b26      	ldr	r3, [pc, #152]	; (8001dfc <LcdGiveFeedback+0xdc>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	461c      	mov	r4, r3
 8001d68:	4b25      	ldr	r3, [pc, #148]	; (8001e00 <LcdGiveFeedback+0xe0>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff fb47 	bl	8001400 <GetHourIndex>
 8001d72:	4603      	mov	r3, r0
 8001d74:	4619      	mov	r1, r3
 8001d76:	4a23      	ldr	r2, [pc, #140]	; (8001e04 <LcdGiveFeedback+0xe4>)
 8001d78:	4623      	mov	r3, r4
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	4423      	add	r3, r4
 8001d7e:	4413      	add	r3, r2
 8001d80:	440b      	add	r3, r1
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	75fb      	strb	r3, [r7, #23]
		if (current_state == IN) {
 8001d86:	7dfb      	ldrb	r3, [r7, #23]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d104      	bne.n	8001d96 <LcdGiveFeedback+0x76>
			in_comfort_temp = current_setpoint;
 8001d8c:	4b18      	ldr	r3, [pc, #96]	; (8001df0 <LcdGiveFeedback+0xd0>)
 8001d8e:	781a      	ldrb	r2, [r3, #0]
 8001d90:	4b1d      	ldr	r3, [pc, #116]	; (8001e08 <LcdGiveFeedback+0xe8>)
 8001d92:	701a      	strb	r2, [r3, #0]
 8001d94:	e006      	b.n	8001da4 <LcdGiveFeedback+0x84>
		} else if (current_state == SLEEP) {
 8001d96:	7dfb      	ldrb	r3, [r7, #23]
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d103      	bne.n	8001da4 <LcdGiveFeedback+0x84>
			sleep_comfort_temp = current_setpoint;
 8001d9c:	4b14      	ldr	r3, [pc, #80]	; (8001df0 <LcdGiveFeedback+0xd0>)
 8001d9e:	781a      	ldrb	r2, [r3, #0]
 8001da0:	4b1a      	ldr	r3, [pc, #104]	; (8001e0c <LcdGiveFeedback+0xec>)
 8001da2:	701a      	strb	r2, [r3, #0]
		}
		SyncStateAndSetPoints();
 8001da4:	f7ff fbc8 	bl	8001538 <SyncStateAndSetPoints>
		is_button5_pressed = 0;
 8001da8:	4b13      	ldr	r3, [pc, #76]	; (8001df8 <LcdGiveFeedback+0xd8>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	701a      	strb	r2, [r3, #0]
	}
	char str[20];
	sprintf(str, "%d", current_setpoint);
 8001dae:	4b10      	ldr	r3, [pc, #64]	; (8001df0 <LcdGiveFeedback+0xd0>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	461a      	mov	r2, r3
 8001db4:	463b      	mov	r3, r7
 8001db6:	4916      	ldr	r1, [pc, #88]	; (8001e10 <LcdGiveFeedback+0xf0>)
 8001db8:	4618      	mov	r0, r3
 8001dba:	f002 ffd3 	bl	8004d64 <siprintf>
	GUI_TextArial_30pt(100, 150, str, Black, White);
 8001dbe:	463a      	mov	r2, r7
 8001dc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dc4:	9300      	str	r3, [sp, #0]
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	2196      	movs	r1, #150	; 0x96
 8001dca:	2064      	movs	r0, #100	; 0x64
 8001dcc:	f002 fd70 	bl	80048b0 <GUI_TextArial_30pt>
	Draw_BMP_Fast(105, 100, arrowup);
 8001dd0:	4a10      	ldr	r2, [pc, #64]	; (8001e14 <LcdGiveFeedback+0xf4>)
 8001dd2:	2164      	movs	r1, #100	; 0x64
 8001dd4:	2069      	movs	r0, #105	; 0x69
 8001dd6:	f002 fea1 	bl	8004b1c <Draw_BMP_Fast>
	Draw_BMP_Fast(105, 200, arrowdown);
 8001dda:	4a0f      	ldr	r2, [pc, #60]	; (8001e18 <LcdGiveFeedback+0xf8>)
 8001ddc:	21c8      	movs	r1, #200	; 0xc8
 8001dde:	2069      	movs	r0, #105	; 0x69
 8001de0:	f002 fe9c 	bl	8004b1c <Draw_BMP_Fast>
}
 8001de4:	bf00      	nop
 8001de6:	371c      	adds	r7, #28
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd90      	pop	{r4, r7, pc}
 8001dec:	200001d6 	.word	0x200001d6
 8001df0:	200001cf 	.word	0x200001cf
 8001df4:	200001d4 	.word	0x200001d4
 8001df8:	200001d2 	.word	0x200001d2
 8001dfc:	200001cb 	.word	0x200001cb
 8001e00:	20000029 	.word	0x20000029
 8001e04:	2000018c 	.word	0x2000018c
 8001e08:	200001d7 	.word	0x200001d7
 8001e0c:	200001d8 	.word	0x200001d8
 8001e10:	080056c0 	.word	0x080056c0
 8001e14:	08030aa4 	.word	0x08030aa4
 8001e18:	0803039c 	.word	0x0803039c

08001e1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e20:	b672      	cpsid	i
}
 8001e22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001e24:	e7fe      	b.n	8001e24 <Error_Handler+0x8>
	...

08001e28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e2e:	4b15      	ldr	r3, [pc, #84]	; (8001e84 <HAL_MspInit+0x5c>)
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	4a14      	ldr	r2, [pc, #80]	; (8001e84 <HAL_MspInit+0x5c>)
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	6193      	str	r3, [r2, #24]
 8001e3a:	4b12      	ldr	r3, [pc, #72]	; (8001e84 <HAL_MspInit+0x5c>)
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	60bb      	str	r3, [r7, #8]
 8001e44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e46:	4b0f      	ldr	r3, [pc, #60]	; (8001e84 <HAL_MspInit+0x5c>)
 8001e48:	69db      	ldr	r3, [r3, #28]
 8001e4a:	4a0e      	ldr	r2, [pc, #56]	; (8001e84 <HAL_MspInit+0x5c>)
 8001e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e50:	61d3      	str	r3, [r2, #28]
 8001e52:	4b0c      	ldr	r3, [pc, #48]	; (8001e84 <HAL_MspInit+0x5c>)
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5a:	607b      	str	r3, [r7, #4]
 8001e5c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e5e:	4b0a      	ldr	r3, [pc, #40]	; (8001e88 <HAL_MspInit+0x60>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	4a04      	ldr	r2, [pc, #16]	; (8001e88 <HAL_MspInit+0x60>)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	3714      	adds	r7, #20
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bc80      	pop	{r7}
 8001e82:	4770      	bx	lr
 8001e84:	40021000 	.word	0x40021000
 8001e88:	40010000 	.word	0x40010000

08001e8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e9c:	d114      	bne.n	8001ec8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e9e:	4b15      	ldr	r3, [pc, #84]	; (8001ef4 <HAL_TIM_Base_MspInit+0x68>)
 8001ea0:	69db      	ldr	r3, [r3, #28]
 8001ea2:	4a14      	ldr	r2, [pc, #80]	; (8001ef4 <HAL_TIM_Base_MspInit+0x68>)
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	61d3      	str	r3, [r2, #28]
 8001eaa:	4b12      	ldr	r3, [pc, #72]	; (8001ef4 <HAL_TIM_Base_MspInit+0x68>)
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	2100      	movs	r1, #0
 8001eba:	201c      	movs	r0, #28
 8001ebc:	f000 fa0f 	bl	80022de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ec0:	201c      	movs	r0, #28
 8001ec2:	f000 fa28 	bl	8002316 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001ec6:	e010      	b.n	8001eea <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a0a      	ldr	r2, [pc, #40]	; (8001ef8 <HAL_TIM_Base_MspInit+0x6c>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d10b      	bne.n	8001eea <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ed2:	4b08      	ldr	r3, [pc, #32]	; (8001ef4 <HAL_TIM_Base_MspInit+0x68>)
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	4a07      	ldr	r2, [pc, #28]	; (8001ef4 <HAL_TIM_Base_MspInit+0x68>)
 8001ed8:	f043 0302 	orr.w	r3, r3, #2
 8001edc:	61d3      	str	r3, [r2, #28]
 8001ede:	4b05      	ldr	r3, [pc, #20]	; (8001ef4 <HAL_TIM_Base_MspInit+0x68>)
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	60bb      	str	r3, [r7, #8]
 8001ee8:	68bb      	ldr	r3, [r7, #8]
}
 8001eea:	bf00      	nop
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	40000400 	.word	0x40000400

08001efc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f00:	e7fe      	b.n	8001f00 <NMI_Handler+0x4>

08001f02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f02:	b480      	push	{r7}
 8001f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f06:	e7fe      	b.n	8001f06 <HardFault_Handler+0x4>

08001f08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f0c:	e7fe      	b.n	8001f0c <MemManage_Handler+0x4>

08001f0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f12:	e7fe      	b.n	8001f12 <BusFault_Handler+0x4>

08001f14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f18:	e7fe      	b.n	8001f18 <UsageFault_Handler+0x4>

08001f1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f1e:	bf00      	nop
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bc80      	pop	{r7}
 8001f24:	4770      	bx	lr

08001f26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f26:	b480      	push	{r7}
 8001f28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f2a:	bf00      	nop
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bc80      	pop	{r7}
 8001f30:	4770      	bx	lr

08001f32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f32:	b480      	push	{r7}
 8001f34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f36:	bf00      	nop
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bc80      	pop	{r7}
 8001f3c:	4770      	bx	lr

08001f3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f42:	f000 f8b5 	bl	80020b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}
	...

08001f4c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f50:	4802      	ldr	r0, [pc, #8]	; (8001f5c <TIM2_IRQHandler+0x10>)
 8001f52:	f001 f8c1 	bl	80030d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	200000b8 	.word	0x200000b8

08001f60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f68:	4a14      	ldr	r2, [pc, #80]	; (8001fbc <_sbrk+0x5c>)
 8001f6a:	4b15      	ldr	r3, [pc, #84]	; (8001fc0 <_sbrk+0x60>)
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f74:	4b13      	ldr	r3, [pc, #76]	; (8001fc4 <_sbrk+0x64>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d102      	bne.n	8001f82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f7c:	4b11      	ldr	r3, [pc, #68]	; (8001fc4 <_sbrk+0x64>)
 8001f7e:	4a12      	ldr	r2, [pc, #72]	; (8001fc8 <_sbrk+0x68>)
 8001f80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f82:	4b10      	ldr	r3, [pc, #64]	; (8001fc4 <_sbrk+0x64>)
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4413      	add	r3, r2
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d207      	bcs.n	8001fa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f90:	f002 fea8 	bl	8004ce4 <__errno>
 8001f94:	4603      	mov	r3, r0
 8001f96:	220c      	movs	r2, #12
 8001f98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f9e:	e009      	b.n	8001fb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fa0:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <_sbrk+0x64>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fa6:	4b07      	ldr	r3, [pc, #28]	; (8001fc4 <_sbrk+0x64>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4413      	add	r3, r2
 8001fae:	4a05      	ldr	r2, [pc, #20]	; (8001fc4 <_sbrk+0x64>)
 8001fb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3718      	adds	r7, #24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	20018000 	.word	0x20018000
 8001fc0:	00000400 	.word	0x00000400
 8001fc4:	200001e0 	.word	0x200001e0
 8001fc8:	200001f8 	.word	0x200001f8

08001fcc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fd0:	bf00      	nop
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bc80      	pop	{r7}
 8001fd6:	4770      	bx	lr

08001fd8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fd8:	f7ff fff8 	bl	8001fcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fdc:	480b      	ldr	r0, [pc, #44]	; (800200c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001fde:	490c      	ldr	r1, [pc, #48]	; (8002010 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001fe0:	4a0c      	ldr	r2, [pc, #48]	; (8002014 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001fe2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fe4:	e002      	b.n	8001fec <LoopCopyDataInit>

08001fe6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fe6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fe8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fea:	3304      	adds	r3, #4

08001fec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ff0:	d3f9      	bcc.n	8001fe6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ff2:	4a09      	ldr	r2, [pc, #36]	; (8002018 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001ff4:	4c09      	ldr	r4, [pc, #36]	; (800201c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ff6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ff8:	e001      	b.n	8001ffe <LoopFillZerobss>

08001ffa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ffa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ffc:	3204      	adds	r2, #4

08001ffe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ffe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002000:	d3fb      	bcc.n	8001ffa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002002:	f002 fe75 	bl	8004cf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002006:	f7fe ff03 	bl	8000e10 <main>
  bx lr
 800200a:	4770      	bx	lr
  ldr r0, =_sdata
 800200c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002010:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8002014:	080311e8 	.word	0x080311e8
  ldr r2, =_sbss
 8002018:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 800201c:	200001f8 	.word	0x200001f8

08002020 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002020:	e7fe      	b.n	8002020 <ADC1_2_IRQHandler>
	...

08002024 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002028:	4b08      	ldr	r3, [pc, #32]	; (800204c <HAL_Init+0x28>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a07      	ldr	r2, [pc, #28]	; (800204c <HAL_Init+0x28>)
 800202e:	f043 0310 	orr.w	r3, r3, #16
 8002032:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002034:	2003      	movs	r0, #3
 8002036:	f000 f947 	bl	80022c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800203a:	200f      	movs	r0, #15
 800203c:	f000 f808 	bl	8002050 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002040:	f7ff fef2 	bl	8001e28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40022000 	.word	0x40022000

08002050 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002058:	4b12      	ldr	r3, [pc, #72]	; (80020a4 <HAL_InitTick+0x54>)
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	4b12      	ldr	r3, [pc, #72]	; (80020a8 <HAL_InitTick+0x58>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	4619      	mov	r1, r3
 8002062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002066:	fbb3 f3f1 	udiv	r3, r3, r1
 800206a:	fbb2 f3f3 	udiv	r3, r2, r3
 800206e:	4618      	mov	r0, r3
 8002070:	f000 f95f 	bl	8002332 <HAL_SYSTICK_Config>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e00e      	b.n	800209c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2b0f      	cmp	r3, #15
 8002082:	d80a      	bhi.n	800209a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002084:	2200      	movs	r2, #0
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	f04f 30ff 	mov.w	r0, #4294967295
 800208c:	f000 f927 	bl	80022de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002090:	4a06      	ldr	r2, [pc, #24]	; (80020ac <HAL_InitTick+0x5c>)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002096:	2300      	movs	r3, #0
 8002098:	e000      	b.n	800209c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
}
 800209c:	4618      	mov	r0, r3
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	2000002c 	.word	0x2000002c
 80020a8:	20000034 	.word	0x20000034
 80020ac:	20000030 	.word	0x20000030

080020b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020b4:	4b05      	ldr	r3, [pc, #20]	; (80020cc <HAL_IncTick+0x1c>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	461a      	mov	r2, r3
 80020ba:	4b05      	ldr	r3, [pc, #20]	; (80020d0 <HAL_IncTick+0x20>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4413      	add	r3, r2
 80020c0:	4a03      	ldr	r2, [pc, #12]	; (80020d0 <HAL_IncTick+0x20>)
 80020c2:	6013      	str	r3, [r2, #0]
}
 80020c4:	bf00      	nop
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bc80      	pop	{r7}
 80020ca:	4770      	bx	lr
 80020cc:	20000034 	.word	0x20000034
 80020d0:	200001e4 	.word	0x200001e4

080020d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  return uwTick;
 80020d8:	4b02      	ldr	r3, [pc, #8]	; (80020e4 <HAL_GetTick+0x10>)
 80020da:	681b      	ldr	r3, [r3, #0]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	46bd      	mov	sp, r7
 80020e0:	bc80      	pop	{r7}
 80020e2:	4770      	bx	lr
 80020e4:	200001e4 	.word	0x200001e4

080020e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020f0:	f7ff fff0 	bl	80020d4 <HAL_GetTick>
 80020f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002100:	d005      	beq.n	800210e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002102:	4b0a      	ldr	r3, [pc, #40]	; (800212c <HAL_Delay+0x44>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	461a      	mov	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	4413      	add	r3, r2
 800210c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800210e:	bf00      	nop
 8002110:	f7ff ffe0 	bl	80020d4 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	429a      	cmp	r2, r3
 800211e:	d8f7      	bhi.n	8002110 <HAL_Delay+0x28>
  {
  }
}
 8002120:	bf00      	nop
 8002122:	bf00      	nop
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	20000034 	.word	0x20000034

08002130 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f003 0307 	and.w	r3, r3, #7
 800213e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002140:	4b0c      	ldr	r3, [pc, #48]	; (8002174 <__NVIC_SetPriorityGrouping+0x44>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002146:	68ba      	ldr	r2, [r7, #8]
 8002148:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800214c:	4013      	ands	r3, r2
 800214e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002158:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800215c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002160:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002162:	4a04      	ldr	r2, [pc, #16]	; (8002174 <__NVIC_SetPriorityGrouping+0x44>)
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	60d3      	str	r3, [r2, #12]
}
 8002168:	bf00      	nop
 800216a:	3714      	adds	r7, #20
 800216c:	46bd      	mov	sp, r7
 800216e:	bc80      	pop	{r7}
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	e000ed00 	.word	0xe000ed00

08002178 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800217c:	4b04      	ldr	r3, [pc, #16]	; (8002190 <__NVIC_GetPriorityGrouping+0x18>)
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	0a1b      	lsrs	r3, r3, #8
 8002182:	f003 0307 	and.w	r3, r3, #7
}
 8002186:	4618      	mov	r0, r3
 8002188:	46bd      	mov	sp, r7
 800218a:	bc80      	pop	{r7}
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	e000ed00 	.word	0xe000ed00

08002194 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	4603      	mov	r3, r0
 800219c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800219e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	db0b      	blt.n	80021be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021a6:	79fb      	ldrb	r3, [r7, #7]
 80021a8:	f003 021f 	and.w	r2, r3, #31
 80021ac:	4906      	ldr	r1, [pc, #24]	; (80021c8 <__NVIC_EnableIRQ+0x34>)
 80021ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b2:	095b      	lsrs	r3, r3, #5
 80021b4:	2001      	movs	r0, #1
 80021b6:	fa00 f202 	lsl.w	r2, r0, r2
 80021ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021be:	bf00      	nop
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bc80      	pop	{r7}
 80021c6:	4770      	bx	lr
 80021c8:	e000e100 	.word	0xe000e100

080021cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	6039      	str	r1, [r7, #0]
 80021d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	db0a      	blt.n	80021f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	490c      	ldr	r1, [pc, #48]	; (8002218 <__NVIC_SetPriority+0x4c>)
 80021e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ea:	0112      	lsls	r2, r2, #4
 80021ec:	b2d2      	uxtb	r2, r2
 80021ee:	440b      	add	r3, r1
 80021f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021f4:	e00a      	b.n	800220c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	4908      	ldr	r1, [pc, #32]	; (800221c <__NVIC_SetPriority+0x50>)
 80021fc:	79fb      	ldrb	r3, [r7, #7]
 80021fe:	f003 030f 	and.w	r3, r3, #15
 8002202:	3b04      	subs	r3, #4
 8002204:	0112      	lsls	r2, r2, #4
 8002206:	b2d2      	uxtb	r2, r2
 8002208:	440b      	add	r3, r1
 800220a:	761a      	strb	r2, [r3, #24]
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	bc80      	pop	{r7}
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	e000e100 	.word	0xe000e100
 800221c:	e000ed00 	.word	0xe000ed00

08002220 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002220:	b480      	push	{r7}
 8002222:	b089      	sub	sp, #36	; 0x24
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	f1c3 0307 	rsb	r3, r3, #7
 800223a:	2b04      	cmp	r3, #4
 800223c:	bf28      	it	cs
 800223e:	2304      	movcs	r3, #4
 8002240:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	3304      	adds	r3, #4
 8002246:	2b06      	cmp	r3, #6
 8002248:	d902      	bls.n	8002250 <NVIC_EncodePriority+0x30>
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	3b03      	subs	r3, #3
 800224e:	e000      	b.n	8002252 <NVIC_EncodePriority+0x32>
 8002250:	2300      	movs	r3, #0
 8002252:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002254:	f04f 32ff 	mov.w	r2, #4294967295
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	43da      	mvns	r2, r3
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	401a      	ands	r2, r3
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002268:	f04f 31ff 	mov.w	r1, #4294967295
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	fa01 f303 	lsl.w	r3, r1, r3
 8002272:	43d9      	mvns	r1, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002278:	4313      	orrs	r3, r2
         );
}
 800227a:	4618      	mov	r0, r3
 800227c:	3724      	adds	r7, #36	; 0x24
 800227e:	46bd      	mov	sp, r7
 8002280:	bc80      	pop	{r7}
 8002282:	4770      	bx	lr

08002284 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3b01      	subs	r3, #1
 8002290:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002294:	d301      	bcc.n	800229a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002296:	2301      	movs	r3, #1
 8002298:	e00f      	b.n	80022ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800229a:	4a0a      	ldr	r2, [pc, #40]	; (80022c4 <SysTick_Config+0x40>)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3b01      	subs	r3, #1
 80022a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022a2:	210f      	movs	r1, #15
 80022a4:	f04f 30ff 	mov.w	r0, #4294967295
 80022a8:	f7ff ff90 	bl	80021cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022ac:	4b05      	ldr	r3, [pc, #20]	; (80022c4 <SysTick_Config+0x40>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022b2:	4b04      	ldr	r3, [pc, #16]	; (80022c4 <SysTick_Config+0x40>)
 80022b4:	2207      	movs	r2, #7
 80022b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	e000e010 	.word	0xe000e010

080022c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f7ff ff2d 	bl	8002130 <__NVIC_SetPriorityGrouping>
}
 80022d6:	bf00      	nop
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022de:	b580      	push	{r7, lr}
 80022e0:	b086      	sub	sp, #24
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	4603      	mov	r3, r0
 80022e6:	60b9      	str	r1, [r7, #8]
 80022e8:	607a      	str	r2, [r7, #4]
 80022ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022ec:	2300      	movs	r3, #0
 80022ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022f0:	f7ff ff42 	bl	8002178 <__NVIC_GetPriorityGrouping>
 80022f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	68b9      	ldr	r1, [r7, #8]
 80022fa:	6978      	ldr	r0, [r7, #20]
 80022fc:	f7ff ff90 	bl	8002220 <NVIC_EncodePriority>
 8002300:	4602      	mov	r2, r0
 8002302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002306:	4611      	mov	r1, r2
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff ff5f 	bl	80021cc <__NVIC_SetPriority>
}
 800230e:	bf00      	nop
 8002310:	3718      	adds	r7, #24
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b082      	sub	sp, #8
 800231a:	af00      	add	r7, sp, #0
 800231c:	4603      	mov	r3, r0
 800231e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff ff35 	bl	8002194 <__NVIC_EnableIRQ>
}
 800232a:	bf00      	nop
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b082      	sub	sp, #8
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f7ff ffa2 	bl	8002284 <SysTick_Config>
 8002340:	4603      	mov	r3, r0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
	...

0800234c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800234c:	b480      	push	{r7}
 800234e:	b08b      	sub	sp, #44	; 0x2c
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002356:	2300      	movs	r3, #0
 8002358:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800235a:	2300      	movs	r3, #0
 800235c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800235e:	e179      	b.n	8002654 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002360:	2201      	movs	r2, #1
 8002362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	69fa      	ldr	r2, [r7, #28]
 8002370:	4013      	ands	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	429a      	cmp	r2, r3
 800237a:	f040 8168 	bne.w	800264e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	4a96      	ldr	r2, [pc, #600]	; (80025dc <HAL_GPIO_Init+0x290>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d05e      	beq.n	8002446 <HAL_GPIO_Init+0xfa>
 8002388:	4a94      	ldr	r2, [pc, #592]	; (80025dc <HAL_GPIO_Init+0x290>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d875      	bhi.n	800247a <HAL_GPIO_Init+0x12e>
 800238e:	4a94      	ldr	r2, [pc, #592]	; (80025e0 <HAL_GPIO_Init+0x294>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d058      	beq.n	8002446 <HAL_GPIO_Init+0xfa>
 8002394:	4a92      	ldr	r2, [pc, #584]	; (80025e0 <HAL_GPIO_Init+0x294>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d86f      	bhi.n	800247a <HAL_GPIO_Init+0x12e>
 800239a:	4a92      	ldr	r2, [pc, #584]	; (80025e4 <HAL_GPIO_Init+0x298>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d052      	beq.n	8002446 <HAL_GPIO_Init+0xfa>
 80023a0:	4a90      	ldr	r2, [pc, #576]	; (80025e4 <HAL_GPIO_Init+0x298>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d869      	bhi.n	800247a <HAL_GPIO_Init+0x12e>
 80023a6:	4a90      	ldr	r2, [pc, #576]	; (80025e8 <HAL_GPIO_Init+0x29c>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d04c      	beq.n	8002446 <HAL_GPIO_Init+0xfa>
 80023ac:	4a8e      	ldr	r2, [pc, #568]	; (80025e8 <HAL_GPIO_Init+0x29c>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d863      	bhi.n	800247a <HAL_GPIO_Init+0x12e>
 80023b2:	4a8e      	ldr	r2, [pc, #568]	; (80025ec <HAL_GPIO_Init+0x2a0>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d046      	beq.n	8002446 <HAL_GPIO_Init+0xfa>
 80023b8:	4a8c      	ldr	r2, [pc, #560]	; (80025ec <HAL_GPIO_Init+0x2a0>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d85d      	bhi.n	800247a <HAL_GPIO_Init+0x12e>
 80023be:	2b12      	cmp	r3, #18
 80023c0:	d82a      	bhi.n	8002418 <HAL_GPIO_Init+0xcc>
 80023c2:	2b12      	cmp	r3, #18
 80023c4:	d859      	bhi.n	800247a <HAL_GPIO_Init+0x12e>
 80023c6:	a201      	add	r2, pc, #4	; (adr r2, 80023cc <HAL_GPIO_Init+0x80>)
 80023c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023cc:	08002447 	.word	0x08002447
 80023d0:	08002421 	.word	0x08002421
 80023d4:	08002433 	.word	0x08002433
 80023d8:	08002475 	.word	0x08002475
 80023dc:	0800247b 	.word	0x0800247b
 80023e0:	0800247b 	.word	0x0800247b
 80023e4:	0800247b 	.word	0x0800247b
 80023e8:	0800247b 	.word	0x0800247b
 80023ec:	0800247b 	.word	0x0800247b
 80023f0:	0800247b 	.word	0x0800247b
 80023f4:	0800247b 	.word	0x0800247b
 80023f8:	0800247b 	.word	0x0800247b
 80023fc:	0800247b 	.word	0x0800247b
 8002400:	0800247b 	.word	0x0800247b
 8002404:	0800247b 	.word	0x0800247b
 8002408:	0800247b 	.word	0x0800247b
 800240c:	0800247b 	.word	0x0800247b
 8002410:	08002429 	.word	0x08002429
 8002414:	0800243d 	.word	0x0800243d
 8002418:	4a75      	ldr	r2, [pc, #468]	; (80025f0 <HAL_GPIO_Init+0x2a4>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d013      	beq.n	8002446 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800241e:	e02c      	b.n	800247a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	623b      	str	r3, [r7, #32]
          break;
 8002426:	e029      	b.n	800247c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	3304      	adds	r3, #4
 800242e:	623b      	str	r3, [r7, #32]
          break;
 8002430:	e024      	b.n	800247c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	3308      	adds	r3, #8
 8002438:	623b      	str	r3, [r7, #32]
          break;
 800243a:	e01f      	b.n	800247c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	330c      	adds	r3, #12
 8002442:	623b      	str	r3, [r7, #32]
          break;
 8002444:	e01a      	b.n	800247c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d102      	bne.n	8002454 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800244e:	2304      	movs	r3, #4
 8002450:	623b      	str	r3, [r7, #32]
          break;
 8002452:	e013      	b.n	800247c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d105      	bne.n	8002468 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800245c:	2308      	movs	r3, #8
 800245e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	69fa      	ldr	r2, [r7, #28]
 8002464:	611a      	str	r2, [r3, #16]
          break;
 8002466:	e009      	b.n	800247c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002468:	2308      	movs	r3, #8
 800246a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	69fa      	ldr	r2, [r7, #28]
 8002470:	615a      	str	r2, [r3, #20]
          break;
 8002472:	e003      	b.n	800247c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002474:	2300      	movs	r3, #0
 8002476:	623b      	str	r3, [r7, #32]
          break;
 8002478:	e000      	b.n	800247c <HAL_GPIO_Init+0x130>
          break;
 800247a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	2bff      	cmp	r3, #255	; 0xff
 8002480:	d801      	bhi.n	8002486 <HAL_GPIO_Init+0x13a>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	e001      	b.n	800248a <HAL_GPIO_Init+0x13e>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	3304      	adds	r3, #4
 800248a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	2bff      	cmp	r3, #255	; 0xff
 8002490:	d802      	bhi.n	8002498 <HAL_GPIO_Init+0x14c>
 8002492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	e002      	b.n	800249e <HAL_GPIO_Init+0x152>
 8002498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249a:	3b08      	subs	r3, #8
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	210f      	movs	r1, #15
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	fa01 f303 	lsl.w	r3, r1, r3
 80024ac:	43db      	mvns	r3, r3
 80024ae:	401a      	ands	r2, r3
 80024b0:	6a39      	ldr	r1, [r7, #32]
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	fa01 f303 	lsl.w	r3, r1, r3
 80024b8:	431a      	orrs	r2, r3
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f000 80c1 	beq.w	800264e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80024cc:	4b49      	ldr	r3, [pc, #292]	; (80025f4 <HAL_GPIO_Init+0x2a8>)
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	4a48      	ldr	r2, [pc, #288]	; (80025f4 <HAL_GPIO_Init+0x2a8>)
 80024d2:	f043 0301 	orr.w	r3, r3, #1
 80024d6:	6193      	str	r3, [r2, #24]
 80024d8:	4b46      	ldr	r3, [pc, #280]	; (80025f4 <HAL_GPIO_Init+0x2a8>)
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	60bb      	str	r3, [r7, #8]
 80024e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80024e4:	4a44      	ldr	r2, [pc, #272]	; (80025f8 <HAL_GPIO_Init+0x2ac>)
 80024e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e8:	089b      	lsrs	r3, r3, #2
 80024ea:	3302      	adds	r3, #2
 80024ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f4:	f003 0303 	and.w	r3, r3, #3
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	220f      	movs	r2, #15
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	43db      	mvns	r3, r3
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	4013      	ands	r3, r2
 8002506:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a3c      	ldr	r2, [pc, #240]	; (80025fc <HAL_GPIO_Init+0x2b0>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d01f      	beq.n	8002550 <HAL_GPIO_Init+0x204>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a3b      	ldr	r2, [pc, #236]	; (8002600 <HAL_GPIO_Init+0x2b4>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d019      	beq.n	800254c <HAL_GPIO_Init+0x200>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a3a      	ldr	r2, [pc, #232]	; (8002604 <HAL_GPIO_Init+0x2b8>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d013      	beq.n	8002548 <HAL_GPIO_Init+0x1fc>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a39      	ldr	r2, [pc, #228]	; (8002608 <HAL_GPIO_Init+0x2bc>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d00d      	beq.n	8002544 <HAL_GPIO_Init+0x1f8>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a38      	ldr	r2, [pc, #224]	; (800260c <HAL_GPIO_Init+0x2c0>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d007      	beq.n	8002540 <HAL_GPIO_Init+0x1f4>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a37      	ldr	r2, [pc, #220]	; (8002610 <HAL_GPIO_Init+0x2c4>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d101      	bne.n	800253c <HAL_GPIO_Init+0x1f0>
 8002538:	2305      	movs	r3, #5
 800253a:	e00a      	b.n	8002552 <HAL_GPIO_Init+0x206>
 800253c:	2306      	movs	r3, #6
 800253e:	e008      	b.n	8002552 <HAL_GPIO_Init+0x206>
 8002540:	2304      	movs	r3, #4
 8002542:	e006      	b.n	8002552 <HAL_GPIO_Init+0x206>
 8002544:	2303      	movs	r3, #3
 8002546:	e004      	b.n	8002552 <HAL_GPIO_Init+0x206>
 8002548:	2302      	movs	r3, #2
 800254a:	e002      	b.n	8002552 <HAL_GPIO_Init+0x206>
 800254c:	2301      	movs	r3, #1
 800254e:	e000      	b.n	8002552 <HAL_GPIO_Init+0x206>
 8002550:	2300      	movs	r3, #0
 8002552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002554:	f002 0203 	and.w	r2, r2, #3
 8002558:	0092      	lsls	r2, r2, #2
 800255a:	4093      	lsls	r3, r2
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	4313      	orrs	r3, r2
 8002560:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002562:	4925      	ldr	r1, [pc, #148]	; (80025f8 <HAL_GPIO_Init+0x2ac>)
 8002564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002566:	089b      	lsrs	r3, r3, #2
 8002568:	3302      	adds	r3, #2
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d006      	beq.n	800258a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800257c:	4b25      	ldr	r3, [pc, #148]	; (8002614 <HAL_GPIO_Init+0x2c8>)
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	4924      	ldr	r1, [pc, #144]	; (8002614 <HAL_GPIO_Init+0x2c8>)
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	4313      	orrs	r3, r2
 8002586:	608b      	str	r3, [r1, #8]
 8002588:	e006      	b.n	8002598 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800258a:	4b22      	ldr	r3, [pc, #136]	; (8002614 <HAL_GPIO_Init+0x2c8>)
 800258c:	689a      	ldr	r2, [r3, #8]
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	43db      	mvns	r3, r3
 8002592:	4920      	ldr	r1, [pc, #128]	; (8002614 <HAL_GPIO_Init+0x2c8>)
 8002594:	4013      	ands	r3, r2
 8002596:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d006      	beq.n	80025b2 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80025a4:	4b1b      	ldr	r3, [pc, #108]	; (8002614 <HAL_GPIO_Init+0x2c8>)
 80025a6:	68da      	ldr	r2, [r3, #12]
 80025a8:	491a      	ldr	r1, [pc, #104]	; (8002614 <HAL_GPIO_Init+0x2c8>)
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	60cb      	str	r3, [r1, #12]
 80025b0:	e006      	b.n	80025c0 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025b2:	4b18      	ldr	r3, [pc, #96]	; (8002614 <HAL_GPIO_Init+0x2c8>)
 80025b4:	68da      	ldr	r2, [r3, #12]
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	43db      	mvns	r3, r3
 80025ba:	4916      	ldr	r1, [pc, #88]	; (8002614 <HAL_GPIO_Init+0x2c8>)
 80025bc:	4013      	ands	r3, r2
 80025be:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d025      	beq.n	8002618 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80025cc:	4b11      	ldr	r3, [pc, #68]	; (8002614 <HAL_GPIO_Init+0x2c8>)
 80025ce:	685a      	ldr	r2, [r3, #4]
 80025d0:	4910      	ldr	r1, [pc, #64]	; (8002614 <HAL_GPIO_Init+0x2c8>)
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	604b      	str	r3, [r1, #4]
 80025d8:	e025      	b.n	8002626 <HAL_GPIO_Init+0x2da>
 80025da:	bf00      	nop
 80025dc:	10320000 	.word	0x10320000
 80025e0:	10310000 	.word	0x10310000
 80025e4:	10220000 	.word	0x10220000
 80025e8:	10210000 	.word	0x10210000
 80025ec:	10120000 	.word	0x10120000
 80025f0:	10110000 	.word	0x10110000
 80025f4:	40021000 	.word	0x40021000
 80025f8:	40010000 	.word	0x40010000
 80025fc:	40010800 	.word	0x40010800
 8002600:	40010c00 	.word	0x40010c00
 8002604:	40011000 	.word	0x40011000
 8002608:	40011400 	.word	0x40011400
 800260c:	40011800 	.word	0x40011800
 8002610:	40011c00 	.word	0x40011c00
 8002614:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002618:	4b15      	ldr	r3, [pc, #84]	; (8002670 <HAL_GPIO_Init+0x324>)
 800261a:	685a      	ldr	r2, [r3, #4]
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	43db      	mvns	r3, r3
 8002620:	4913      	ldr	r1, [pc, #76]	; (8002670 <HAL_GPIO_Init+0x324>)
 8002622:	4013      	ands	r3, r2
 8002624:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d006      	beq.n	8002640 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002632:	4b0f      	ldr	r3, [pc, #60]	; (8002670 <HAL_GPIO_Init+0x324>)
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	490e      	ldr	r1, [pc, #56]	; (8002670 <HAL_GPIO_Init+0x324>)
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	4313      	orrs	r3, r2
 800263c:	600b      	str	r3, [r1, #0]
 800263e:	e006      	b.n	800264e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002640:	4b0b      	ldr	r3, [pc, #44]	; (8002670 <HAL_GPIO_Init+0x324>)
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	43db      	mvns	r3, r3
 8002648:	4909      	ldr	r1, [pc, #36]	; (8002670 <HAL_GPIO_Init+0x324>)
 800264a:	4013      	ands	r3, r2
 800264c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800264e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002650:	3301      	adds	r3, #1
 8002652:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	fa22 f303 	lsr.w	r3, r2, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	f47f ae7e 	bne.w	8002360 <HAL_GPIO_Init+0x14>
  }
}
 8002664:	bf00      	nop
 8002666:	bf00      	nop
 8002668:	372c      	adds	r7, #44	; 0x2c
 800266a:	46bd      	mov	sp, r7
 800266c:	bc80      	pop	{r7}
 800266e:	4770      	bx	lr
 8002670:	40010400 	.word	0x40010400

08002674 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	460b      	mov	r3, r1
 800267e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	887b      	ldrh	r3, [r7, #2]
 8002686:	4013      	ands	r3, r2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d002      	beq.n	8002692 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800268c:	2301      	movs	r3, #1
 800268e:	73fb      	strb	r3, [r7, #15]
 8002690:	e001      	b.n	8002696 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002692:	2300      	movs	r3, #0
 8002694:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002696:	7bfb      	ldrb	r3, [r7, #15]
}
 8002698:	4618      	mov	r0, r3
 800269a:	3714      	adds	r7, #20
 800269c:	46bd      	mov	sp, r7
 800269e:	bc80      	pop	{r7}
 80026a0:	4770      	bx	lr

080026a2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026a2:	b480      	push	{r7}
 80026a4:	b083      	sub	sp, #12
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
 80026aa:	460b      	mov	r3, r1
 80026ac:	807b      	strh	r3, [r7, #2]
 80026ae:	4613      	mov	r3, r2
 80026b0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026b2:	787b      	ldrb	r3, [r7, #1]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d003      	beq.n	80026c0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026b8:	887a      	ldrh	r2, [r7, #2]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80026be:	e003      	b.n	80026c8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026c0:	887b      	ldrh	r3, [r7, #2]
 80026c2:	041a      	lsls	r2, r3, #16
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	611a      	str	r2, [r3, #16]
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bc80      	pop	{r7}
 80026d0:	4770      	bx	lr
	...

080026d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e272      	b.n	8002bcc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f000 8087 	beq.w	8002802 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026f4:	4b92      	ldr	r3, [pc, #584]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f003 030c 	and.w	r3, r3, #12
 80026fc:	2b04      	cmp	r3, #4
 80026fe:	d00c      	beq.n	800271a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002700:	4b8f      	ldr	r3, [pc, #572]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f003 030c 	and.w	r3, r3, #12
 8002708:	2b08      	cmp	r3, #8
 800270a:	d112      	bne.n	8002732 <HAL_RCC_OscConfig+0x5e>
 800270c:	4b8c      	ldr	r3, [pc, #560]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002718:	d10b      	bne.n	8002732 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800271a:	4b89      	ldr	r3, [pc, #548]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d06c      	beq.n	8002800 <HAL_RCC_OscConfig+0x12c>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d168      	bne.n	8002800 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e24c      	b.n	8002bcc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800273a:	d106      	bne.n	800274a <HAL_RCC_OscConfig+0x76>
 800273c:	4b80      	ldr	r3, [pc, #512]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a7f      	ldr	r2, [pc, #508]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 8002742:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002746:	6013      	str	r3, [r2, #0]
 8002748:	e02e      	b.n	80027a8 <HAL_RCC_OscConfig+0xd4>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d10c      	bne.n	800276c <HAL_RCC_OscConfig+0x98>
 8002752:	4b7b      	ldr	r3, [pc, #492]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a7a      	ldr	r2, [pc, #488]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 8002758:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800275c:	6013      	str	r3, [r2, #0]
 800275e:	4b78      	ldr	r3, [pc, #480]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a77      	ldr	r2, [pc, #476]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 8002764:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002768:	6013      	str	r3, [r2, #0]
 800276a:	e01d      	b.n	80027a8 <HAL_RCC_OscConfig+0xd4>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002774:	d10c      	bne.n	8002790 <HAL_RCC_OscConfig+0xbc>
 8002776:	4b72      	ldr	r3, [pc, #456]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a71      	ldr	r2, [pc, #452]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 800277c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002780:	6013      	str	r3, [r2, #0]
 8002782:	4b6f      	ldr	r3, [pc, #444]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a6e      	ldr	r2, [pc, #440]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 8002788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800278c:	6013      	str	r3, [r2, #0]
 800278e:	e00b      	b.n	80027a8 <HAL_RCC_OscConfig+0xd4>
 8002790:	4b6b      	ldr	r3, [pc, #428]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a6a      	ldr	r2, [pc, #424]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 8002796:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800279a:	6013      	str	r3, [r2, #0]
 800279c:	4b68      	ldr	r3, [pc, #416]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a67      	ldr	r2, [pc, #412]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 80027a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d013      	beq.n	80027d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b0:	f7ff fc90 	bl	80020d4 <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027b8:	f7ff fc8c 	bl	80020d4 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b64      	cmp	r3, #100	; 0x64
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e200      	b.n	8002bcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ca:	4b5d      	ldr	r3, [pc, #372]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d0f0      	beq.n	80027b8 <HAL_RCC_OscConfig+0xe4>
 80027d6:	e014      	b.n	8002802 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d8:	f7ff fc7c 	bl	80020d4 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027e0:	f7ff fc78 	bl	80020d4 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b64      	cmp	r3, #100	; 0x64
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e1ec      	b.n	8002bcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027f2:	4b53      	ldr	r3, [pc, #332]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1f0      	bne.n	80027e0 <HAL_RCC_OscConfig+0x10c>
 80027fe:	e000      	b.n	8002802 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002800:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d063      	beq.n	80028d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800280e:	4b4c      	ldr	r3, [pc, #304]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f003 030c 	and.w	r3, r3, #12
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00b      	beq.n	8002832 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800281a:	4b49      	ldr	r3, [pc, #292]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f003 030c 	and.w	r3, r3, #12
 8002822:	2b08      	cmp	r3, #8
 8002824:	d11c      	bne.n	8002860 <HAL_RCC_OscConfig+0x18c>
 8002826:	4b46      	ldr	r3, [pc, #280]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d116      	bne.n	8002860 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002832:	4b43      	ldr	r3, [pc, #268]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d005      	beq.n	800284a <HAL_RCC_OscConfig+0x176>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d001      	beq.n	800284a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e1c0      	b.n	8002bcc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800284a:	4b3d      	ldr	r3, [pc, #244]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	4939      	ldr	r1, [pc, #228]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 800285a:	4313      	orrs	r3, r2
 800285c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800285e:	e03a      	b.n	80028d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	691b      	ldr	r3, [r3, #16]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d020      	beq.n	80028aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002868:	4b36      	ldr	r3, [pc, #216]	; (8002944 <HAL_RCC_OscConfig+0x270>)
 800286a:	2201      	movs	r2, #1
 800286c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286e:	f7ff fc31 	bl	80020d4 <HAL_GetTick>
 8002872:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002874:	e008      	b.n	8002888 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002876:	f7ff fc2d 	bl	80020d4 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d901      	bls.n	8002888 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e1a1      	b.n	8002bcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002888:	4b2d      	ldr	r3, [pc, #180]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d0f0      	beq.n	8002876 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002894:	4b2a      	ldr	r3, [pc, #168]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	695b      	ldr	r3, [r3, #20]
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	4927      	ldr	r1, [pc, #156]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	600b      	str	r3, [r1, #0]
 80028a8:	e015      	b.n	80028d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028aa:	4b26      	ldr	r3, [pc, #152]	; (8002944 <HAL_RCC_OscConfig+0x270>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b0:	f7ff fc10 	bl	80020d4 <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028b8:	f7ff fc0c 	bl	80020d4 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e180      	b.n	8002bcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ca:	4b1d      	ldr	r3, [pc, #116]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1f0      	bne.n	80028b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0308 	and.w	r3, r3, #8
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d03a      	beq.n	8002958 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d019      	beq.n	800291e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028ea:	4b17      	ldr	r3, [pc, #92]	; (8002948 <HAL_RCC_OscConfig+0x274>)
 80028ec:	2201      	movs	r2, #1
 80028ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028f0:	f7ff fbf0 	bl	80020d4 <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028f8:	f7ff fbec 	bl	80020d4 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e160      	b.n	8002bcc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800290a:	4b0d      	ldr	r3, [pc, #52]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 800290c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d0f0      	beq.n	80028f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002916:	2001      	movs	r0, #1
 8002918:	f000 fa9c 	bl	8002e54 <RCC_Delay>
 800291c:	e01c      	b.n	8002958 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800291e:	4b0a      	ldr	r3, [pc, #40]	; (8002948 <HAL_RCC_OscConfig+0x274>)
 8002920:	2200      	movs	r2, #0
 8002922:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002924:	f7ff fbd6 	bl	80020d4 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800292a:	e00f      	b.n	800294c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800292c:	f7ff fbd2 	bl	80020d4 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d908      	bls.n	800294c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e146      	b.n	8002bcc <HAL_RCC_OscConfig+0x4f8>
 800293e:	bf00      	nop
 8002940:	40021000 	.word	0x40021000
 8002944:	42420000 	.word	0x42420000
 8002948:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800294c:	4b92      	ldr	r3, [pc, #584]	; (8002b98 <HAL_RCC_OscConfig+0x4c4>)
 800294e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d1e9      	bne.n	800292c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0304 	and.w	r3, r3, #4
 8002960:	2b00      	cmp	r3, #0
 8002962:	f000 80a6 	beq.w	8002ab2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002966:	2300      	movs	r3, #0
 8002968:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800296a:	4b8b      	ldr	r3, [pc, #556]	; (8002b98 <HAL_RCC_OscConfig+0x4c4>)
 800296c:	69db      	ldr	r3, [r3, #28]
 800296e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10d      	bne.n	8002992 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002976:	4b88      	ldr	r3, [pc, #544]	; (8002b98 <HAL_RCC_OscConfig+0x4c4>)
 8002978:	69db      	ldr	r3, [r3, #28]
 800297a:	4a87      	ldr	r2, [pc, #540]	; (8002b98 <HAL_RCC_OscConfig+0x4c4>)
 800297c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002980:	61d3      	str	r3, [r2, #28]
 8002982:	4b85      	ldr	r3, [pc, #532]	; (8002b98 <HAL_RCC_OscConfig+0x4c4>)
 8002984:	69db      	ldr	r3, [r3, #28]
 8002986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800298a:	60bb      	str	r3, [r7, #8]
 800298c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800298e:	2301      	movs	r3, #1
 8002990:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002992:	4b82      	ldr	r3, [pc, #520]	; (8002b9c <HAL_RCC_OscConfig+0x4c8>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800299a:	2b00      	cmp	r3, #0
 800299c:	d118      	bne.n	80029d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800299e:	4b7f      	ldr	r3, [pc, #508]	; (8002b9c <HAL_RCC_OscConfig+0x4c8>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a7e      	ldr	r2, [pc, #504]	; (8002b9c <HAL_RCC_OscConfig+0x4c8>)
 80029a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029aa:	f7ff fb93 	bl	80020d4 <HAL_GetTick>
 80029ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b0:	e008      	b.n	80029c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029b2:	f7ff fb8f 	bl	80020d4 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b64      	cmp	r3, #100	; 0x64
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e103      	b.n	8002bcc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c4:	4b75      	ldr	r3, [pc, #468]	; (8002b9c <HAL_RCC_OscConfig+0x4c8>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d0f0      	beq.n	80029b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d106      	bne.n	80029e6 <HAL_RCC_OscConfig+0x312>
 80029d8:	4b6f      	ldr	r3, [pc, #444]	; (8002b98 <HAL_RCC_OscConfig+0x4c4>)
 80029da:	6a1b      	ldr	r3, [r3, #32]
 80029dc:	4a6e      	ldr	r2, [pc, #440]	; (8002b98 <HAL_RCC_OscConfig+0x4c4>)
 80029de:	f043 0301 	orr.w	r3, r3, #1
 80029e2:	6213      	str	r3, [r2, #32]
 80029e4:	e02d      	b.n	8002a42 <HAL_RCC_OscConfig+0x36e>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d10c      	bne.n	8002a08 <HAL_RCC_OscConfig+0x334>
 80029ee:	4b6a      	ldr	r3, [pc, #424]	; (8002b98 <HAL_RCC_OscConfig+0x4c4>)
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	4a69      	ldr	r2, [pc, #420]	; (8002b98 <HAL_RCC_OscConfig+0x4c4>)
 80029f4:	f023 0301 	bic.w	r3, r3, #1
 80029f8:	6213      	str	r3, [r2, #32]
 80029fa:	4b67      	ldr	r3, [pc, #412]	; (8002b98 <HAL_RCC_OscConfig+0x4c4>)
 80029fc:	6a1b      	ldr	r3, [r3, #32]
 80029fe:	4a66      	ldr	r2, [pc, #408]	; (8002b98 <HAL_RCC_OscConfig+0x4c4>)
 8002a00:	f023 0304 	bic.w	r3, r3, #4
 8002a04:	6213      	str	r3, [r2, #32]
 8002a06:	e01c      	b.n	8002a42 <HAL_RCC_OscConfig+0x36e>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	2b05      	cmp	r3, #5
 8002a0e:	d10c      	bne.n	8002a2a <HAL_RCC_OscConfig+0x356>
 8002a10:	4b61      	ldr	r3, [pc, #388]	; (8002b98 <HAL_RCC_OscConfig+0x4c4>)
 8002a12:	6a1b      	ldr	r3, [r3, #32]
 8002a14:	4a60      	ldr	r2, [pc, #384]	; (8002b98 <HAL_RCC_OscConfig+0x4c4>)
 8002a16:	f043 0304 	orr.w	r3, r3, #4
 8002a1a:	6213      	str	r3, [r2, #32]
 8002a1c:	4b5e      	ldr	r3, [pc, #376]	; (8002b98 <HAL_RCC_OscConfig+0x4c4>)
 8002a1e:	6a1b      	ldr	r3, [r3, #32]
 8002a20:	4a5d      	ldr	r2, [pc, #372]	; (8002b98 <HAL_RCC_OscConfig+0x4c4>)
 8002a22:	f043 0301 	orr.w	r3, r3, #1
 8002a26:	6213      	str	r3, [r2, #32]
 8002a28:	e00b      	b.n	8002a42 <HAL_RCC_OscConfig+0x36e>
 8002a2a:	4b5b      	ldr	r3, [pc, #364]	; (8002b98 <HAL_RCC_OscConfig+0x4c4>)
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
 8002a2e:	4a5a      	ldr	r2, [pc, #360]	; (8002b98 <HAL_RCC_OscConfig+0x4c4>)
 8002a30:	f023 0301 	bic.w	r3, r3, #1
 8002a34:	6213      	str	r3, [r2, #32]
 8002a36:	4b58      	ldr	r3, [pc, #352]	; (8002b98 <HAL_RCC_OscConfig+0x4c4>)
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	4a57      	ldr	r2, [pc, #348]	; (8002b98 <HAL_RCC_OscConfig+0x4c4>)
 8002a3c:	f023 0304 	bic.w	r3, r3, #4
 8002a40:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d015      	beq.n	8002a76 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a4a:	f7ff fb43 	bl	80020d4 <HAL_GetTick>
 8002a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a50:	e00a      	b.n	8002a68 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a52:	f7ff fb3f 	bl	80020d4 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e0b1      	b.n	8002bcc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a68:	4b4b      	ldr	r3, [pc, #300]	; (8002b98 <HAL_RCC_OscConfig+0x4c4>)
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d0ee      	beq.n	8002a52 <HAL_RCC_OscConfig+0x37e>
 8002a74:	e014      	b.n	8002aa0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a76:	f7ff fb2d 	bl	80020d4 <HAL_GetTick>
 8002a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a7c:	e00a      	b.n	8002a94 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a7e:	f7ff fb29 	bl	80020d4 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e09b      	b.n	8002bcc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a94:	4b40      	ldr	r3, [pc, #256]	; (8002b98 <HAL_RCC_OscConfig+0x4c4>)
 8002a96:	6a1b      	ldr	r3, [r3, #32]
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1ee      	bne.n	8002a7e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002aa0:	7dfb      	ldrb	r3, [r7, #23]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d105      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aa6:	4b3c      	ldr	r3, [pc, #240]	; (8002b98 <HAL_RCC_OscConfig+0x4c4>)
 8002aa8:	69db      	ldr	r3, [r3, #28]
 8002aaa:	4a3b      	ldr	r2, [pc, #236]	; (8002b98 <HAL_RCC_OscConfig+0x4c4>)
 8002aac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ab0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	69db      	ldr	r3, [r3, #28]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f000 8087 	beq.w	8002bca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002abc:	4b36      	ldr	r3, [pc, #216]	; (8002b98 <HAL_RCC_OscConfig+0x4c4>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f003 030c 	and.w	r3, r3, #12
 8002ac4:	2b08      	cmp	r3, #8
 8002ac6:	d061      	beq.n	8002b8c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	69db      	ldr	r3, [r3, #28]
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d146      	bne.n	8002b5e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ad0:	4b33      	ldr	r3, [pc, #204]	; (8002ba0 <HAL_RCC_OscConfig+0x4cc>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad6:	f7ff fafd 	bl	80020d4 <HAL_GetTick>
 8002ada:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002adc:	e008      	b.n	8002af0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ade:	f7ff faf9 	bl	80020d4 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e06d      	b.n	8002bcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002af0:	4b29      	ldr	r3, [pc, #164]	; (8002b98 <HAL_RCC_OscConfig+0x4c4>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d1f0      	bne.n	8002ade <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a1b      	ldr	r3, [r3, #32]
 8002b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b04:	d108      	bne.n	8002b18 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b06:	4b24      	ldr	r3, [pc, #144]	; (8002b98 <HAL_RCC_OscConfig+0x4c4>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	4921      	ldr	r1, [pc, #132]	; (8002b98 <HAL_RCC_OscConfig+0x4c4>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b18:	4b1f      	ldr	r3, [pc, #124]	; (8002b98 <HAL_RCC_OscConfig+0x4c4>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a19      	ldr	r1, [r3, #32]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b28:	430b      	orrs	r3, r1
 8002b2a:	491b      	ldr	r1, [pc, #108]	; (8002b98 <HAL_RCC_OscConfig+0x4c4>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b30:	4b1b      	ldr	r3, [pc, #108]	; (8002ba0 <HAL_RCC_OscConfig+0x4cc>)
 8002b32:	2201      	movs	r2, #1
 8002b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b36:	f7ff facd 	bl	80020d4 <HAL_GetTick>
 8002b3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b3c:	e008      	b.n	8002b50 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b3e:	f7ff fac9 	bl	80020d4 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e03d      	b.n	8002bcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b50:	4b11      	ldr	r3, [pc, #68]	; (8002b98 <HAL_RCC_OscConfig+0x4c4>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d0f0      	beq.n	8002b3e <HAL_RCC_OscConfig+0x46a>
 8002b5c:	e035      	b.n	8002bca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b5e:	4b10      	ldr	r3, [pc, #64]	; (8002ba0 <HAL_RCC_OscConfig+0x4cc>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b64:	f7ff fab6 	bl	80020d4 <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b6c:	f7ff fab2 	bl	80020d4 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e026      	b.n	8002bcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b7e:	4b06      	ldr	r3, [pc, #24]	; (8002b98 <HAL_RCC_OscConfig+0x4c4>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1f0      	bne.n	8002b6c <HAL_RCC_OscConfig+0x498>
 8002b8a:	e01e      	b.n	8002bca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	69db      	ldr	r3, [r3, #28]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d107      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e019      	b.n	8002bcc <HAL_RCC_OscConfig+0x4f8>
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	40007000 	.word	0x40007000
 8002ba0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ba4:	4b0b      	ldr	r3, [pc, #44]	; (8002bd4 <HAL_RCC_OscConfig+0x500>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a1b      	ldr	r3, [r3, #32]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d106      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d001      	beq.n	8002bca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e000      	b.n	8002bcc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3718      	adds	r7, #24
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	40021000 	.word	0x40021000

08002bd8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d101      	bne.n	8002bec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e0d0      	b.n	8002d8e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bec:	4b6a      	ldr	r3, [pc, #424]	; (8002d98 <HAL_RCC_ClockConfig+0x1c0>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0307 	and.w	r3, r3, #7
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d910      	bls.n	8002c1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bfa:	4b67      	ldr	r3, [pc, #412]	; (8002d98 <HAL_RCC_ClockConfig+0x1c0>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f023 0207 	bic.w	r2, r3, #7
 8002c02:	4965      	ldr	r1, [pc, #404]	; (8002d98 <HAL_RCC_ClockConfig+0x1c0>)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c0a:	4b63      	ldr	r3, [pc, #396]	; (8002d98 <HAL_RCC_ClockConfig+0x1c0>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0307 	and.w	r3, r3, #7
 8002c12:	683a      	ldr	r2, [r7, #0]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d001      	beq.n	8002c1c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e0b8      	b.n	8002d8e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d020      	beq.n	8002c6a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0304 	and.w	r3, r3, #4
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d005      	beq.n	8002c40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c34:	4b59      	ldr	r3, [pc, #356]	; (8002d9c <HAL_RCC_ClockConfig+0x1c4>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	4a58      	ldr	r2, [pc, #352]	; (8002d9c <HAL_RCC_ClockConfig+0x1c4>)
 8002c3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c3e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0308 	and.w	r3, r3, #8
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d005      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c4c:	4b53      	ldr	r3, [pc, #332]	; (8002d9c <HAL_RCC_ClockConfig+0x1c4>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	4a52      	ldr	r2, [pc, #328]	; (8002d9c <HAL_RCC_ClockConfig+0x1c4>)
 8002c52:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002c56:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c58:	4b50      	ldr	r3, [pc, #320]	; (8002d9c <HAL_RCC_ClockConfig+0x1c4>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	494d      	ldr	r1, [pc, #308]	; (8002d9c <HAL_RCC_ClockConfig+0x1c4>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d040      	beq.n	8002cf8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d107      	bne.n	8002c8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c7e:	4b47      	ldr	r3, [pc, #284]	; (8002d9c <HAL_RCC_ClockConfig+0x1c4>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d115      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e07f      	b.n	8002d8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d107      	bne.n	8002ca6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c96:	4b41      	ldr	r3, [pc, #260]	; (8002d9c <HAL_RCC_ClockConfig+0x1c4>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d109      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e073      	b.n	8002d8e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ca6:	4b3d      	ldr	r3, [pc, #244]	; (8002d9c <HAL_RCC_ClockConfig+0x1c4>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e06b      	b.n	8002d8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cb6:	4b39      	ldr	r3, [pc, #228]	; (8002d9c <HAL_RCC_ClockConfig+0x1c4>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f023 0203 	bic.w	r2, r3, #3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	4936      	ldr	r1, [pc, #216]	; (8002d9c <HAL_RCC_ClockConfig+0x1c4>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cc8:	f7ff fa04 	bl	80020d4 <HAL_GetTick>
 8002ccc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cce:	e00a      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cd0:	f7ff fa00 	bl	80020d4 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e053      	b.n	8002d8e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ce6:	4b2d      	ldr	r3, [pc, #180]	; (8002d9c <HAL_RCC_ClockConfig+0x1c4>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f003 020c 	and.w	r2, r3, #12
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d1eb      	bne.n	8002cd0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cf8:	4b27      	ldr	r3, [pc, #156]	; (8002d98 <HAL_RCC_ClockConfig+0x1c0>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0307 	and.w	r3, r3, #7
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d210      	bcs.n	8002d28 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d06:	4b24      	ldr	r3, [pc, #144]	; (8002d98 <HAL_RCC_ClockConfig+0x1c0>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f023 0207 	bic.w	r2, r3, #7
 8002d0e:	4922      	ldr	r1, [pc, #136]	; (8002d98 <HAL_RCC_ClockConfig+0x1c0>)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d16:	4b20      	ldr	r3, [pc, #128]	; (8002d98 <HAL_RCC_ClockConfig+0x1c0>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0307 	and.w	r3, r3, #7
 8002d1e:	683a      	ldr	r2, [r7, #0]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d001      	beq.n	8002d28 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e032      	b.n	8002d8e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0304 	and.w	r3, r3, #4
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d008      	beq.n	8002d46 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d34:	4b19      	ldr	r3, [pc, #100]	; (8002d9c <HAL_RCC_ClockConfig+0x1c4>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	4916      	ldr	r1, [pc, #88]	; (8002d9c <HAL_RCC_ClockConfig+0x1c4>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0308 	and.w	r3, r3, #8
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d009      	beq.n	8002d66 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d52:	4b12      	ldr	r3, [pc, #72]	; (8002d9c <HAL_RCC_ClockConfig+0x1c4>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	490e      	ldr	r1, [pc, #56]	; (8002d9c <HAL_RCC_ClockConfig+0x1c4>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d66:	f000 f821 	bl	8002dac <HAL_RCC_GetSysClockFreq>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	4b0b      	ldr	r3, [pc, #44]	; (8002d9c <HAL_RCC_ClockConfig+0x1c4>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	091b      	lsrs	r3, r3, #4
 8002d72:	f003 030f 	and.w	r3, r3, #15
 8002d76:	490a      	ldr	r1, [pc, #40]	; (8002da0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d78:	5ccb      	ldrb	r3, [r1, r3]
 8002d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d7e:	4a09      	ldr	r2, [pc, #36]	; (8002da4 <HAL_RCC_ClockConfig+0x1cc>)
 8002d80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d82:	4b09      	ldr	r3, [pc, #36]	; (8002da8 <HAL_RCC_ClockConfig+0x1d0>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7ff f962 	bl	8002050 <HAL_InitTick>

  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	40022000 	.word	0x40022000
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	08005710 	.word	0x08005710
 8002da4:	2000002c 	.word	0x2000002c
 8002da8:	20000030 	.word	0x20000030

08002dac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b087      	sub	sp, #28
 8002db0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002db2:	2300      	movs	r3, #0
 8002db4:	60fb      	str	r3, [r7, #12]
 8002db6:	2300      	movs	r3, #0
 8002db8:	60bb      	str	r3, [r7, #8]
 8002dba:	2300      	movs	r3, #0
 8002dbc:	617b      	str	r3, [r7, #20]
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002dc6:	4b1e      	ldr	r3, [pc, #120]	; (8002e40 <HAL_RCC_GetSysClockFreq+0x94>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f003 030c 	and.w	r3, r3, #12
 8002dd2:	2b04      	cmp	r3, #4
 8002dd4:	d002      	beq.n	8002ddc <HAL_RCC_GetSysClockFreq+0x30>
 8002dd6:	2b08      	cmp	r3, #8
 8002dd8:	d003      	beq.n	8002de2 <HAL_RCC_GetSysClockFreq+0x36>
 8002dda:	e027      	b.n	8002e2c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ddc:	4b19      	ldr	r3, [pc, #100]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x98>)
 8002dde:	613b      	str	r3, [r7, #16]
      break;
 8002de0:	e027      	b.n	8002e32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	0c9b      	lsrs	r3, r3, #18
 8002de6:	f003 030f 	and.w	r3, r3, #15
 8002dea:	4a17      	ldr	r2, [pc, #92]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002dec:	5cd3      	ldrb	r3, [r2, r3]
 8002dee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d010      	beq.n	8002e1c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002dfa:	4b11      	ldr	r3, [pc, #68]	; (8002e40 <HAL_RCC_GetSysClockFreq+0x94>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	0c5b      	lsrs	r3, r3, #17
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	4a11      	ldr	r2, [pc, #68]	; (8002e4c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e06:	5cd3      	ldrb	r3, [r2, r3]
 8002e08:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a0d      	ldr	r2, [pc, #52]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e0e:	fb03 f202 	mul.w	r2, r3, r2
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e18:	617b      	str	r3, [r7, #20]
 8002e1a:	e004      	b.n	8002e26 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a0c      	ldr	r2, [pc, #48]	; (8002e50 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e20:	fb02 f303 	mul.w	r3, r2, r3
 8002e24:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	613b      	str	r3, [r7, #16]
      break;
 8002e2a:	e002      	b.n	8002e32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e2c:	4b05      	ldr	r3, [pc, #20]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e2e:	613b      	str	r3, [r7, #16]
      break;
 8002e30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e32:	693b      	ldr	r3, [r7, #16]
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	371c      	adds	r7, #28
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bc80      	pop	{r7}
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	40021000 	.word	0x40021000
 8002e44:	007a1200 	.word	0x007a1200
 8002e48:	08005720 	.word	0x08005720
 8002e4c:	08005730 	.word	0x08005730
 8002e50:	003d0900 	.word	0x003d0900

08002e54 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e5c:	4b0a      	ldr	r3, [pc, #40]	; (8002e88 <RCC_Delay+0x34>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a0a      	ldr	r2, [pc, #40]	; (8002e8c <RCC_Delay+0x38>)
 8002e62:	fba2 2303 	umull	r2, r3, r2, r3
 8002e66:	0a5b      	lsrs	r3, r3, #9
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	fb02 f303 	mul.w	r3, r2, r3
 8002e6e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e70:	bf00      	nop
  }
  while (Delay --);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	1e5a      	subs	r2, r3, #1
 8002e76:	60fa      	str	r2, [r7, #12]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d1f9      	bne.n	8002e70 <RCC_Delay+0x1c>
}
 8002e7c:	bf00      	nop
 8002e7e:	bf00      	nop
 8002e80:	3714      	adds	r7, #20
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bc80      	pop	{r7}
 8002e86:	4770      	bx	lr
 8002e88:	2000002c 	.word	0x2000002c
 8002e8c:	10624dd3 	.word	0x10624dd3

08002e90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e041      	b.n	8002f26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d106      	bne.n	8002ebc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f7fe ffe8 	bl	8001e8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	3304      	adds	r3, #4
 8002ecc:	4619      	mov	r1, r3
 8002ece:	4610      	mov	r0, r2
 8002ed0:	f000 faf6 	bl	80034c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
	...

08002f30 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d001      	beq.n	8002f48 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e046      	b.n	8002fd6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2202      	movs	r2, #2
 8002f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a22      	ldr	r2, [pc, #136]	; (8002fe0 <HAL_TIM_Base_Start+0xb0>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d022      	beq.n	8002fa0 <HAL_TIM_Base_Start+0x70>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a21      	ldr	r2, [pc, #132]	; (8002fe4 <HAL_TIM_Base_Start+0xb4>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d01d      	beq.n	8002fa0 <HAL_TIM_Base_Start+0x70>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f6c:	d018      	beq.n	8002fa0 <HAL_TIM_Base_Start+0x70>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a1d      	ldr	r2, [pc, #116]	; (8002fe8 <HAL_TIM_Base_Start+0xb8>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d013      	beq.n	8002fa0 <HAL_TIM_Base_Start+0x70>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a1b      	ldr	r2, [pc, #108]	; (8002fec <HAL_TIM_Base_Start+0xbc>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d00e      	beq.n	8002fa0 <HAL_TIM_Base_Start+0x70>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a1a      	ldr	r2, [pc, #104]	; (8002ff0 <HAL_TIM_Base_Start+0xc0>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d009      	beq.n	8002fa0 <HAL_TIM_Base_Start+0x70>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a18      	ldr	r2, [pc, #96]	; (8002ff4 <HAL_TIM_Base_Start+0xc4>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d004      	beq.n	8002fa0 <HAL_TIM_Base_Start+0x70>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a17      	ldr	r2, [pc, #92]	; (8002ff8 <HAL_TIM_Base_Start+0xc8>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d111      	bne.n	8002fc4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f003 0307 	and.w	r3, r3, #7
 8002faa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2b06      	cmp	r3, #6
 8002fb0:	d010      	beq.n	8002fd4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f042 0201 	orr.w	r2, r2, #1
 8002fc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fc2:	e007      	b.n	8002fd4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f042 0201 	orr.w	r2, r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3714      	adds	r7, #20
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bc80      	pop	{r7}
 8002fde:	4770      	bx	lr
 8002fe0:	40012c00 	.word	0x40012c00
 8002fe4:	40013400 	.word	0x40013400
 8002fe8:	40000400 	.word	0x40000400
 8002fec:	40000800 	.word	0x40000800
 8002ff0:	40000c00 	.word	0x40000c00
 8002ff4:	40014c00 	.word	0x40014c00
 8002ff8:	40001800 	.word	0x40001800

08002ffc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800300a:	b2db      	uxtb	r3, r3
 800300c:	2b01      	cmp	r3, #1
 800300e:	d001      	beq.n	8003014 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e04e      	b.n	80030b2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2202      	movs	r2, #2
 8003018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68da      	ldr	r2, [r3, #12]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f042 0201 	orr.w	r2, r2, #1
 800302a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a22      	ldr	r2, [pc, #136]	; (80030bc <HAL_TIM_Base_Start_IT+0xc0>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d022      	beq.n	800307c <HAL_TIM_Base_Start_IT+0x80>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a21      	ldr	r2, [pc, #132]	; (80030c0 <HAL_TIM_Base_Start_IT+0xc4>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d01d      	beq.n	800307c <HAL_TIM_Base_Start_IT+0x80>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003048:	d018      	beq.n	800307c <HAL_TIM_Base_Start_IT+0x80>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a1d      	ldr	r2, [pc, #116]	; (80030c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d013      	beq.n	800307c <HAL_TIM_Base_Start_IT+0x80>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a1b      	ldr	r2, [pc, #108]	; (80030c8 <HAL_TIM_Base_Start_IT+0xcc>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d00e      	beq.n	800307c <HAL_TIM_Base_Start_IT+0x80>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a1a      	ldr	r2, [pc, #104]	; (80030cc <HAL_TIM_Base_Start_IT+0xd0>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d009      	beq.n	800307c <HAL_TIM_Base_Start_IT+0x80>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a18      	ldr	r2, [pc, #96]	; (80030d0 <HAL_TIM_Base_Start_IT+0xd4>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d004      	beq.n	800307c <HAL_TIM_Base_Start_IT+0x80>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a17      	ldr	r2, [pc, #92]	; (80030d4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d111      	bne.n	80030a0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f003 0307 	and.w	r3, r3, #7
 8003086:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2b06      	cmp	r3, #6
 800308c:	d010      	beq.n	80030b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f042 0201 	orr.w	r2, r2, #1
 800309c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800309e:	e007      	b.n	80030b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f042 0201 	orr.w	r2, r2, #1
 80030ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3714      	adds	r7, #20
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bc80      	pop	{r7}
 80030ba:	4770      	bx	lr
 80030bc:	40012c00 	.word	0x40012c00
 80030c0:	40013400 	.word	0x40013400
 80030c4:	40000400 	.word	0x40000400
 80030c8:	40000800 	.word	0x40000800
 80030cc:	40000c00 	.word	0x40000c00
 80030d0:	40014c00 	.word	0x40014c00
 80030d4:	40001800 	.word	0x40001800

080030d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d122      	bne.n	8003134 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d11b      	bne.n	8003134 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f06f 0202 	mvn.w	r2, #2
 8003104:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	f003 0303 	and.w	r3, r3, #3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d003      	beq.n	8003122 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 f9b4 	bl	8003488 <HAL_TIM_IC_CaptureCallback>
 8003120:	e005      	b.n	800312e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f9a7 	bl	8003476 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f000 f9b6 	bl	800349a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	f003 0304 	and.w	r3, r3, #4
 800313e:	2b04      	cmp	r3, #4
 8003140:	d122      	bne.n	8003188 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	f003 0304 	and.w	r3, r3, #4
 800314c:	2b04      	cmp	r3, #4
 800314e:	d11b      	bne.n	8003188 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f06f 0204 	mvn.w	r2, #4
 8003158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2202      	movs	r2, #2
 800315e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 f98a 	bl	8003488 <HAL_TIM_IC_CaptureCallback>
 8003174:	e005      	b.n	8003182 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 f97d 	bl	8003476 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 f98c 	bl	800349a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	f003 0308 	and.w	r3, r3, #8
 8003192:	2b08      	cmp	r3, #8
 8003194:	d122      	bne.n	80031dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	f003 0308 	and.w	r3, r3, #8
 80031a0:	2b08      	cmp	r3, #8
 80031a2:	d11b      	bne.n	80031dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f06f 0208 	mvn.w	r2, #8
 80031ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2204      	movs	r2, #4
 80031b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	69db      	ldr	r3, [r3, #28]
 80031ba:	f003 0303 	and.w	r3, r3, #3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d003      	beq.n	80031ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f960 	bl	8003488 <HAL_TIM_IC_CaptureCallback>
 80031c8:	e005      	b.n	80031d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 f953 	bl	8003476 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f000 f962 	bl	800349a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	f003 0310 	and.w	r3, r3, #16
 80031e6:	2b10      	cmp	r3, #16
 80031e8:	d122      	bne.n	8003230 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	f003 0310 	and.w	r3, r3, #16
 80031f4:	2b10      	cmp	r3, #16
 80031f6:	d11b      	bne.n	8003230 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f06f 0210 	mvn.w	r2, #16
 8003200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2208      	movs	r2, #8
 8003206:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	69db      	ldr	r3, [r3, #28]
 800320e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003212:	2b00      	cmp	r3, #0
 8003214:	d003      	beq.n	800321e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 f936 	bl	8003488 <HAL_TIM_IC_CaptureCallback>
 800321c:	e005      	b.n	800322a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 f929 	bl	8003476 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 f938 	bl	800349a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b01      	cmp	r3, #1
 800323c:	d10e      	bne.n	800325c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	2b01      	cmp	r3, #1
 800324a:	d107      	bne.n	800325c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f06f 0201 	mvn.w	r2, #1
 8003254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7fd fd9e 	bl	8000d98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003266:	2b80      	cmp	r3, #128	; 0x80
 8003268:	d10e      	bne.n	8003288 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003274:	2b80      	cmp	r3, #128	; 0x80
 8003276:	d107      	bne.n	8003288 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 fad3 	bl	800382e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003292:	2b40      	cmp	r3, #64	; 0x40
 8003294:	d10e      	bne.n	80032b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a0:	2b40      	cmp	r3, #64	; 0x40
 80032a2:	d107      	bne.n	80032b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f8fc 	bl	80034ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	f003 0320 	and.w	r3, r3, #32
 80032be:	2b20      	cmp	r3, #32
 80032c0:	d10e      	bne.n	80032e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	f003 0320 	and.w	r3, r3, #32
 80032cc:	2b20      	cmp	r3, #32
 80032ce:	d107      	bne.n	80032e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f06f 0220 	mvn.w	r2, #32
 80032d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 fa9e 	bl	800381c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032e0:	bf00      	nop
 80032e2:	3708      	adds	r7, #8
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032f2:	2300      	movs	r3, #0
 80032f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d101      	bne.n	8003304 <HAL_TIM_ConfigClockSource+0x1c>
 8003300:	2302      	movs	r3, #2
 8003302:	e0b4      	b.n	800346e <HAL_TIM_ConfigClockSource+0x186>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2202      	movs	r2, #2
 8003310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003322:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800332a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68ba      	ldr	r2, [r7, #8]
 8003332:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800333c:	d03e      	beq.n	80033bc <HAL_TIM_ConfigClockSource+0xd4>
 800333e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003342:	f200 8087 	bhi.w	8003454 <HAL_TIM_ConfigClockSource+0x16c>
 8003346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800334a:	f000 8086 	beq.w	800345a <HAL_TIM_ConfigClockSource+0x172>
 800334e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003352:	d87f      	bhi.n	8003454 <HAL_TIM_ConfigClockSource+0x16c>
 8003354:	2b70      	cmp	r3, #112	; 0x70
 8003356:	d01a      	beq.n	800338e <HAL_TIM_ConfigClockSource+0xa6>
 8003358:	2b70      	cmp	r3, #112	; 0x70
 800335a:	d87b      	bhi.n	8003454 <HAL_TIM_ConfigClockSource+0x16c>
 800335c:	2b60      	cmp	r3, #96	; 0x60
 800335e:	d050      	beq.n	8003402 <HAL_TIM_ConfigClockSource+0x11a>
 8003360:	2b60      	cmp	r3, #96	; 0x60
 8003362:	d877      	bhi.n	8003454 <HAL_TIM_ConfigClockSource+0x16c>
 8003364:	2b50      	cmp	r3, #80	; 0x50
 8003366:	d03c      	beq.n	80033e2 <HAL_TIM_ConfigClockSource+0xfa>
 8003368:	2b50      	cmp	r3, #80	; 0x50
 800336a:	d873      	bhi.n	8003454 <HAL_TIM_ConfigClockSource+0x16c>
 800336c:	2b40      	cmp	r3, #64	; 0x40
 800336e:	d058      	beq.n	8003422 <HAL_TIM_ConfigClockSource+0x13a>
 8003370:	2b40      	cmp	r3, #64	; 0x40
 8003372:	d86f      	bhi.n	8003454 <HAL_TIM_ConfigClockSource+0x16c>
 8003374:	2b30      	cmp	r3, #48	; 0x30
 8003376:	d064      	beq.n	8003442 <HAL_TIM_ConfigClockSource+0x15a>
 8003378:	2b30      	cmp	r3, #48	; 0x30
 800337a:	d86b      	bhi.n	8003454 <HAL_TIM_ConfigClockSource+0x16c>
 800337c:	2b20      	cmp	r3, #32
 800337e:	d060      	beq.n	8003442 <HAL_TIM_ConfigClockSource+0x15a>
 8003380:	2b20      	cmp	r3, #32
 8003382:	d867      	bhi.n	8003454 <HAL_TIM_ConfigClockSource+0x16c>
 8003384:	2b00      	cmp	r3, #0
 8003386:	d05c      	beq.n	8003442 <HAL_TIM_ConfigClockSource+0x15a>
 8003388:	2b10      	cmp	r3, #16
 800338a:	d05a      	beq.n	8003442 <HAL_TIM_ConfigClockSource+0x15a>
 800338c:	e062      	b.n	8003454 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6818      	ldr	r0, [r3, #0]
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	6899      	ldr	r1, [r3, #8]
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685a      	ldr	r2, [r3, #4]
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	f000 f9a4 	bl	80036ea <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80033b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68ba      	ldr	r2, [r7, #8]
 80033b8:	609a      	str	r2, [r3, #8]
      break;
 80033ba:	e04f      	b.n	800345c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6818      	ldr	r0, [r3, #0]
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	6899      	ldr	r1, [r3, #8]
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685a      	ldr	r2, [r3, #4]
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	f000 f98d 	bl	80036ea <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	689a      	ldr	r2, [r3, #8]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033de:	609a      	str	r2, [r3, #8]
      break;
 80033e0:	e03c      	b.n	800345c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6818      	ldr	r0, [r3, #0]
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	6859      	ldr	r1, [r3, #4]
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	461a      	mov	r2, r3
 80033f0:	f000 f904 	bl	80035fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2150      	movs	r1, #80	; 0x50
 80033fa:	4618      	mov	r0, r3
 80033fc:	f000 f95b 	bl	80036b6 <TIM_ITRx_SetConfig>
      break;
 8003400:	e02c      	b.n	800345c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6818      	ldr	r0, [r3, #0]
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	6859      	ldr	r1, [r3, #4]
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	461a      	mov	r2, r3
 8003410:	f000 f922 	bl	8003658 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2160      	movs	r1, #96	; 0x60
 800341a:	4618      	mov	r0, r3
 800341c:	f000 f94b 	bl	80036b6 <TIM_ITRx_SetConfig>
      break;
 8003420:	e01c      	b.n	800345c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6818      	ldr	r0, [r3, #0]
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	6859      	ldr	r1, [r3, #4]
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	461a      	mov	r2, r3
 8003430:	f000 f8e4 	bl	80035fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2140      	movs	r1, #64	; 0x40
 800343a:	4618      	mov	r0, r3
 800343c:	f000 f93b 	bl	80036b6 <TIM_ITRx_SetConfig>
      break;
 8003440:	e00c      	b.n	800345c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4619      	mov	r1, r3
 800344c:	4610      	mov	r0, r2
 800344e:	f000 f932 	bl	80036b6 <TIM_ITRx_SetConfig>
      break;
 8003452:	e003      	b.n	800345c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	73fb      	strb	r3, [r7, #15]
      break;
 8003458:	e000      	b.n	800345c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800345a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800346c:	7bfb      	ldrb	r3, [r7, #15]
}
 800346e:	4618      	mov	r0, r3
 8003470:	3710      	adds	r7, #16
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003476:	b480      	push	{r7}
 8003478:	b083      	sub	sp, #12
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800347e:	bf00      	nop
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	bc80      	pop	{r7}
 8003486:	4770      	bx	lr

08003488 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	bc80      	pop	{r7}
 8003498:	4770      	bx	lr

0800349a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800349a:	b480      	push	{r7}
 800349c:	b083      	sub	sp, #12
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034a2:	bf00      	nop
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bc80      	pop	{r7}
 80034aa:	4770      	bx	lr

080034ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bc80      	pop	{r7}
 80034bc:	4770      	bx	lr
	...

080034c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b085      	sub	sp, #20
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4a3f      	ldr	r2, [pc, #252]	; (80035d0 <TIM_Base_SetConfig+0x110>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d013      	beq.n	8003500 <TIM_Base_SetConfig+0x40>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a3e      	ldr	r2, [pc, #248]	; (80035d4 <TIM_Base_SetConfig+0x114>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d00f      	beq.n	8003500 <TIM_Base_SetConfig+0x40>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034e6:	d00b      	beq.n	8003500 <TIM_Base_SetConfig+0x40>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a3b      	ldr	r2, [pc, #236]	; (80035d8 <TIM_Base_SetConfig+0x118>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d007      	beq.n	8003500 <TIM_Base_SetConfig+0x40>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a3a      	ldr	r2, [pc, #232]	; (80035dc <TIM_Base_SetConfig+0x11c>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d003      	beq.n	8003500 <TIM_Base_SetConfig+0x40>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a39      	ldr	r2, [pc, #228]	; (80035e0 <TIM_Base_SetConfig+0x120>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d108      	bne.n	8003512 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003506:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	68fa      	ldr	r2, [r7, #12]
 800350e:	4313      	orrs	r3, r2
 8003510:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a2e      	ldr	r2, [pc, #184]	; (80035d0 <TIM_Base_SetConfig+0x110>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d02b      	beq.n	8003572 <TIM_Base_SetConfig+0xb2>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a2d      	ldr	r2, [pc, #180]	; (80035d4 <TIM_Base_SetConfig+0x114>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d027      	beq.n	8003572 <TIM_Base_SetConfig+0xb2>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003528:	d023      	beq.n	8003572 <TIM_Base_SetConfig+0xb2>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a2a      	ldr	r2, [pc, #168]	; (80035d8 <TIM_Base_SetConfig+0x118>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d01f      	beq.n	8003572 <TIM_Base_SetConfig+0xb2>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a29      	ldr	r2, [pc, #164]	; (80035dc <TIM_Base_SetConfig+0x11c>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d01b      	beq.n	8003572 <TIM_Base_SetConfig+0xb2>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a28      	ldr	r2, [pc, #160]	; (80035e0 <TIM_Base_SetConfig+0x120>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d017      	beq.n	8003572 <TIM_Base_SetConfig+0xb2>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a27      	ldr	r2, [pc, #156]	; (80035e4 <TIM_Base_SetConfig+0x124>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d013      	beq.n	8003572 <TIM_Base_SetConfig+0xb2>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a26      	ldr	r2, [pc, #152]	; (80035e8 <TIM_Base_SetConfig+0x128>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d00f      	beq.n	8003572 <TIM_Base_SetConfig+0xb2>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a25      	ldr	r2, [pc, #148]	; (80035ec <TIM_Base_SetConfig+0x12c>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d00b      	beq.n	8003572 <TIM_Base_SetConfig+0xb2>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a24      	ldr	r2, [pc, #144]	; (80035f0 <TIM_Base_SetConfig+0x130>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d007      	beq.n	8003572 <TIM_Base_SetConfig+0xb2>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a23      	ldr	r2, [pc, #140]	; (80035f4 <TIM_Base_SetConfig+0x134>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d003      	beq.n	8003572 <TIM_Base_SetConfig+0xb2>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a22      	ldr	r2, [pc, #136]	; (80035f8 <TIM_Base_SetConfig+0x138>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d108      	bne.n	8003584 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003578:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	4313      	orrs	r3, r2
 8003582:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	4313      	orrs	r3, r2
 8003590:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	689a      	ldr	r2, [r3, #8]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a09      	ldr	r2, [pc, #36]	; (80035d0 <TIM_Base_SetConfig+0x110>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d003      	beq.n	80035b8 <TIM_Base_SetConfig+0xf8>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a08      	ldr	r2, [pc, #32]	; (80035d4 <TIM_Base_SetConfig+0x114>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d103      	bne.n	80035c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	691a      	ldr	r2, [r3, #16]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	615a      	str	r2, [r3, #20]
}
 80035c6:	bf00      	nop
 80035c8:	3714      	adds	r7, #20
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bc80      	pop	{r7}
 80035ce:	4770      	bx	lr
 80035d0:	40012c00 	.word	0x40012c00
 80035d4:	40013400 	.word	0x40013400
 80035d8:	40000400 	.word	0x40000400
 80035dc:	40000800 	.word	0x40000800
 80035e0:	40000c00 	.word	0x40000c00
 80035e4:	40014c00 	.word	0x40014c00
 80035e8:	40015000 	.word	0x40015000
 80035ec:	40015400 	.word	0x40015400
 80035f0:	40001800 	.word	0x40001800
 80035f4:	40001c00 	.word	0x40001c00
 80035f8:	40002000 	.word	0x40002000

080035fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b087      	sub	sp, #28
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6a1b      	ldr	r3, [r3, #32]
 800360c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	f023 0201 	bic.w	r2, r3, #1
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003626:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	011b      	lsls	r3, r3, #4
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	4313      	orrs	r3, r2
 8003630:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	f023 030a 	bic.w	r3, r3, #10
 8003638:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	4313      	orrs	r3, r2
 8003640:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	697a      	ldr	r2, [r7, #20]
 800364c:	621a      	str	r2, [r3, #32]
}
 800364e:	bf00      	nop
 8003650:	371c      	adds	r7, #28
 8003652:	46bd      	mov	sp, r7
 8003654:	bc80      	pop	{r7}
 8003656:	4770      	bx	lr

08003658 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003658:	b480      	push	{r7}
 800365a:	b087      	sub	sp, #28
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6a1b      	ldr	r3, [r3, #32]
 800366e:	f023 0210 	bic.w	r2, r3, #16
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003682:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	031b      	lsls	r3, r3, #12
 8003688:	693a      	ldr	r2, [r7, #16]
 800368a:	4313      	orrs	r3, r2
 800368c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003694:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	011b      	lsls	r3, r3, #4
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	4313      	orrs	r3, r2
 800369e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	693a      	ldr	r2, [r7, #16]
 80036a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	697a      	ldr	r2, [r7, #20]
 80036aa:	621a      	str	r2, [r3, #32]
}
 80036ac:	bf00      	nop
 80036ae:	371c      	adds	r7, #28
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bc80      	pop	{r7}
 80036b4:	4770      	bx	lr

080036b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036b6:	b480      	push	{r7}
 80036b8:	b085      	sub	sp, #20
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
 80036be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036ce:	683a      	ldr	r2, [r7, #0]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	f043 0307 	orr.w	r3, r3, #7
 80036d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	609a      	str	r2, [r3, #8]
}
 80036e0:	bf00      	nop
 80036e2:	3714      	adds	r7, #20
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bc80      	pop	{r7}
 80036e8:	4770      	bx	lr

080036ea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036ea:	b480      	push	{r7}
 80036ec:	b087      	sub	sp, #28
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	60f8      	str	r0, [r7, #12]
 80036f2:	60b9      	str	r1, [r7, #8]
 80036f4:	607a      	str	r2, [r7, #4]
 80036f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003704:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	021a      	lsls	r2, r3, #8
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	431a      	orrs	r2, r3
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	4313      	orrs	r3, r2
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	4313      	orrs	r3, r2
 8003716:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	609a      	str	r2, [r3, #8]
}
 800371e:	bf00      	nop
 8003720:	371c      	adds	r7, #28
 8003722:	46bd      	mov	sp, r7
 8003724:	bc80      	pop	{r7}
 8003726:	4770      	bx	lr

08003728 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003728:	b480      	push	{r7}
 800372a:	b085      	sub	sp, #20
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003738:	2b01      	cmp	r3, #1
 800373a:	d101      	bne.n	8003740 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800373c:	2302      	movs	r3, #2
 800373e:	e05a      	b.n	80037f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2202      	movs	r2, #2
 800374c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003766:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	4313      	orrs	r3, r2
 8003770:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a20      	ldr	r2, [pc, #128]	; (8003800 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d022      	beq.n	80037ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a1e      	ldr	r2, [pc, #120]	; (8003804 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d01d      	beq.n	80037ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003796:	d018      	beq.n	80037ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a1a      	ldr	r2, [pc, #104]	; (8003808 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d013      	beq.n	80037ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a19      	ldr	r2, [pc, #100]	; (800380c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d00e      	beq.n	80037ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a17      	ldr	r2, [pc, #92]	; (8003810 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d009      	beq.n	80037ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a16      	ldr	r2, [pc, #88]	; (8003814 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d004      	beq.n	80037ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a14      	ldr	r2, [pc, #80]	; (8003818 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d10c      	bne.n	80037e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	68ba      	ldr	r2, [r7, #8]
 80037d8:	4313      	orrs	r3, r2
 80037da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68ba      	ldr	r2, [r7, #8]
 80037e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3714      	adds	r7, #20
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bc80      	pop	{r7}
 80037fe:	4770      	bx	lr
 8003800:	40012c00 	.word	0x40012c00
 8003804:	40013400 	.word	0x40013400
 8003808:	40000400 	.word	0x40000400
 800380c:	40000800 	.word	0x40000800
 8003810:	40000c00 	.word	0x40000c00
 8003814:	40014c00 	.word	0x40014c00
 8003818:	40001800 	.word	0x40001800

0800381c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003824:	bf00      	nop
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	bc80      	pop	{r7}
 800382c:	4770      	bx	lr

0800382e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800382e:	b480      	push	{r7}
 8003830:	b083      	sub	sp, #12
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003836:	bf00      	nop
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	bc80      	pop	{r7}
 800383e:	4770      	bx	lr

08003840 <GetFontInfo_18pt>:
* Output         : - *pBuffer: Store data pointer
* Return         : None
* Attention		 : None
*******************************************************************************/
void GetFontInfo_18pt(uint16_t* pBuffer,unsigned char ASCII)
{  
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	460b      	mov	r3, r1
 800384a:	70fb      	strb	r3, [r7, #3]
	pBuffer[0]=ArialFontInfo[(ASCII - 33)][0];
 800384c:	78fb      	ldrb	r3, [r7, #3]
 800384e:	3b21      	subs	r3, #33	; 0x21
 8003850:	4a09      	ldr	r2, [pc, #36]	; (8003878 <GetFontInfo_18pt+0x38>)
 8003852:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	801a      	strh	r2, [r3, #0]
	pBuffer[1]=ArialFontInfo[(ASCII - 33)][1];
 800385a:	78fb      	ldrb	r3, [r7, #3]
 800385c:	3b21      	subs	r3, #33	; 0x21
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	3202      	adds	r2, #2
 8003862:	4905      	ldr	r1, [pc, #20]	; (8003878 <GetFontInfo_18pt+0x38>)
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	440b      	add	r3, r1
 8003868:	885b      	ldrh	r3, [r3, #2]
 800386a:	8013      	strh	r3, [r2, #0]
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	bc80      	pop	{r7}
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	0800673c 	.word	0x0800673c

0800387c <GetFontInfo_22pt>:
//	arial_22ptDescriptors, //  Character descriptor array
//	arial_22ptBitmaps, //  Character bitmap array
//};

void GetFontInfo_22pt(uint16_t* pBuffer,unsigned char ASCII)
{  
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	460b      	mov	r3, r1
 8003886:	70fb      	strb	r3, [r7, #3]
	pBuffer[0]=ArialFontInfo_22pt[(ASCII - 33)][0];
 8003888:	78fb      	ldrb	r3, [r7, #3]
 800388a:	3b21      	subs	r3, #33	; 0x21
 800388c:	4a09      	ldr	r2, [pc, #36]	; (80038b4 <GetFontInfo_22pt+0x38>)
 800388e:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	801a      	strh	r2, [r3, #0]
	pBuffer[1]=ArialFontInfo_22pt[(ASCII - 33)][1];
 8003896:	78fb      	ldrb	r3, [r7, #3]
 8003898:	3b21      	subs	r3, #33	; 0x21
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	3202      	adds	r2, #2
 800389e:	4905      	ldr	r1, [pc, #20]	; (80038b4 <GetFontInfo_22pt+0x38>)
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	440b      	add	r3, r1
 80038a4:	885b      	ldrh	r3, [r3, #2]
 80038a6:	8013      	strh	r3, [r2, #0]
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bc80      	pop	{r7}
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	08008008 	.word	0x08008008

080038b8 <GetFontInfo_30pt>:
//	arial_30ptDescriptors, //  Character descriptor array
//	arial_30ptBitmaps, //  Character bitmap array
//};

void GetFontInfo_30pt(uint16_t* pBuffer,unsigned char ASCII)
{  
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	460b      	mov	r3, r1
 80038c2:	70fb      	strb	r3, [r7, #3]
	pBuffer[0]=ArialFontInfo_30pt[(ASCII - 33)][0];
 80038c4:	78fb      	ldrb	r3, [r7, #3]
 80038c6:	3b21      	subs	r3, #33	; 0x21
 80038c8:	4a09      	ldr	r2, [pc, #36]	; (80038f0 <GetFontInfo_30pt+0x38>)
 80038ca:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	801a      	strh	r2, [r3, #0]
	pBuffer[1]=ArialFontInfo_30pt[(ASCII - 33)][1];
 80038d2:	78fb      	ldrb	r3, [r7, #3]
 80038d4:	3b21      	subs	r3, #33	; 0x21
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	3202      	adds	r2, #2
 80038da:	4905      	ldr	r1, [pc, #20]	; (80038f0 <GetFontInfo_30pt+0x38>)
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	440b      	add	r3, r1
 80038e0:	885b      	ldrh	r3, [r3, #2]
 80038e2:	8013      	strh	r3, [r2, #0]
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bc80      	pop	{r7}
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	0800aa20 	.word	0x0800aa20

080038f4 <delay_ms>:
* Return         : None
* Return         : None
* Attention	 : None
*******************************************************************************/
static void delay_ms( unsigned short ms )    
{ 
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	4603      	mov	r3, r0
 80038fc:	80fb      	strh	r3, [r7, #6]
	unsigned short i, j;

	for( i = 0; i < ms; i++ )
 80038fe:	2300      	movs	r3, #0
 8003900:	81fb      	strh	r3, [r7, #14]
 8003902:	e00d      	b.n	8003920 <delay_ms+0x2c>
	{ 
		for( j = 0; j < 1141; j++ );
 8003904:	2300      	movs	r3, #0
 8003906:	81bb      	strh	r3, [r7, #12]
 8003908:	e002      	b.n	8003910 <delay_ms+0x1c>
 800390a:	89bb      	ldrh	r3, [r7, #12]
 800390c:	3301      	adds	r3, #1
 800390e:	81bb      	strh	r3, [r7, #12]
 8003910:	89bb      	ldrh	r3, [r7, #12]
 8003912:	f240 4274 	movw	r2, #1140	; 0x474
 8003916:	4293      	cmp	r3, r2
 8003918:	d9f7      	bls.n	800390a <delay_ms+0x16>
	for( i = 0; i < ms; i++ )
 800391a:	89fb      	ldrh	r3, [r7, #14]
 800391c:	3301      	adds	r3, #1
 800391e:	81fb      	strh	r3, [r7, #14]
 8003920:	89fa      	ldrh	r2, [r7, #14]
 8003922:	88fb      	ldrh	r3, [r7, #6]
 8003924:	429a      	cmp	r2, r3
 8003926:	d3ed      	bcc.n	8003904 <delay_ms+0x10>
	}
} 
 8003928:	bf00      	nop
 800392a:	bf00      	nop
 800392c:	3714      	adds	r7, #20
 800392e:	46bd      	mov	sp, r7
 8003930:	bc80      	pop	{r7}
 8003932:	4770      	bx	lr

08003934 <LCD_Configuration>:
* Output         : None
* Return         : None
* Attention      : None
*******************************************************************************/
static void LCD_Configuration(void)
{
 8003934:	b480      	push	{r7}
 8003936:	b087      	sub	sp, #28
 8003938:	af00      	add	r7, sp, #0
/* 
   D0~D15 -> GPIO3.16~GPIO3.31
	 D0~D15 -> GPIOE.0~GPIOE.16
*/ 

	__HAL_RCC_GPIOA_CLK_ENABLE();
 800393a:	4b4b      	ldr	r3, [pc, #300]	; (8003a68 <LCD_Configuration+0x134>)
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	4a4a      	ldr	r2, [pc, #296]	; (8003a68 <LCD_Configuration+0x134>)
 8003940:	f043 0304 	orr.w	r3, r3, #4
 8003944:	6193      	str	r3, [r2, #24]
 8003946:	4b48      	ldr	r3, [pc, #288]	; (8003a68 <LCD_Configuration+0x134>)
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	f003 0304 	and.w	r3, r3, #4
 800394e:	617b      	str	r3, [r7, #20]
 8003950:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003952:	4b45      	ldr	r3, [pc, #276]	; (8003a68 <LCD_Configuration+0x134>)
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	4a44      	ldr	r2, [pc, #272]	; (8003a68 <LCD_Configuration+0x134>)
 8003958:	f043 0308 	orr.w	r3, r3, #8
 800395c:	6193      	str	r3, [r2, #24]
 800395e:	4b42      	ldr	r3, [pc, #264]	; (8003a68 <LCD_Configuration+0x134>)
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	f003 0308 	and.w	r3, r3, #8
 8003966:	613b      	str	r3, [r7, #16]
 8003968:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800396a:	4b3f      	ldr	r3, [pc, #252]	; (8003a68 <LCD_Configuration+0x134>)
 800396c:	699b      	ldr	r3, [r3, #24]
 800396e:	4a3e      	ldr	r2, [pc, #248]	; (8003a68 <LCD_Configuration+0x134>)
 8003970:	f043 0310 	orr.w	r3, r3, #16
 8003974:	6193      	str	r3, [r2, #24]
 8003976:	4b3c      	ldr	r3, [pc, #240]	; (8003a68 <LCD_Configuration+0x134>)
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	f003 0310 	and.w	r3, r3, #16
 800397e:	60fb      	str	r3, [r7, #12]
 8003980:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8003982:	4b39      	ldr	r3, [pc, #228]	; (8003a68 <LCD_Configuration+0x134>)
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	4a38      	ldr	r2, [pc, #224]	; (8003a68 <LCD_Configuration+0x134>)
 8003988:	f043 0320 	orr.w	r3, r3, #32
 800398c:	6193      	str	r3, [r2, #24]
 800398e:	4b36      	ldr	r3, [pc, #216]	; (8003a68 <LCD_Configuration+0x134>)
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	f003 0320 	and.w	r3, r3, #32
 8003996:	60bb      	str	r3, [r7, #8]
 8003998:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800399a:	4b33      	ldr	r3, [pc, #204]	; (8003a68 <LCD_Configuration+0x134>)
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	4a32      	ldr	r2, [pc, #200]	; (8003a68 <LCD_Configuration+0x134>)
 80039a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039a4:	6193      	str	r3, [r2, #24]
 80039a6:	4b30      	ldr	r3, [pc, #192]	; (8003a68 <LCD_Configuration+0x134>)
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ae:	607b      	str	r3, [r7, #4]
 80039b0:	687b      	ldr	r3, [r7, #4]
//	RCC_APB2PeriphClockCmd(RCC_LCD_RST_PORT, 	ENABLE);
//	RCC_APB2PeriphClockCmd(RCC_LCD_BL_PORT, 	ENABLE);

	/* setting the IO to output mode */

	LCD_DATA_PORT->LCD_DIRL_REG= (0x33333333 << LCD_DATA_BIT_OFFSET);
 80039b2:	4b2e      	ldr	r3, [pc, #184]	; (8003a6c <LCD_Configuration+0x138>)
 80039b4:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80039b8:	601a      	str	r2, [r3, #0]
	LCD_DATA_PORT->LCD_DIRH_REG= (0x33333333 << LCD_DATA_BIT_OFFSET);
 80039ba:	4b2c      	ldr	r3, [pc, #176]	; (8003a6c <LCD_Configuration+0x138>)
 80039bc:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80039c0:	605a      	str	r2, [r3, #4]
	
	/* (RS), (WR), (RD) ,(CS) */

  /* setting the IO to output mode */
	LCD_RS_PORT->LCD_DIRL_REG&=~(0xF<<0);
 80039c2:	4b2b      	ldr	r3, [pc, #172]	; (8003a70 <LCD_Configuration+0x13c>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a2a      	ldr	r2, [pc, #168]	; (8003a70 <LCD_Configuration+0x13c>)
 80039c8:	f023 030f 	bic.w	r3, r3, #15
 80039cc:	6013      	str	r3, [r2, #0]
	LCD_RS_PORT->LCD_DIRL_REG|= (0x3<<0);
 80039ce:	4b28      	ldr	r3, [pc, #160]	; (8003a70 <LCD_Configuration+0x13c>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a27      	ldr	r2, [pc, #156]	; (8003a70 <LCD_Configuration+0x13c>)
 80039d4:	f043 0303 	orr.w	r3, r3, #3
 80039d8:	6013      	str	r3, [r2, #0]
	LCD_RD_PORT->LCD_DIRL_REG&=~(0xF<<16);
 80039da:	4b26      	ldr	r3, [pc, #152]	; (8003a74 <LCD_Configuration+0x140>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a25      	ldr	r2, [pc, #148]	; (8003a74 <LCD_Configuration+0x140>)
 80039e0:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80039e4:	6013      	str	r3, [r2, #0]
	LCD_RD_PORT->LCD_DIRL_REG|= (0x3<<16);
 80039e6:	4b23      	ldr	r3, [pc, #140]	; (8003a74 <LCD_Configuration+0x140>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a22      	ldr	r2, [pc, #136]	; (8003a74 <LCD_Configuration+0x140>)
 80039ec:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80039f0:	6013      	str	r3, [r2, #0]
	LCD_WR_PORT->LCD_DIRL_REG&=~(0xF<<20);
 80039f2:	4b20      	ldr	r3, [pc, #128]	; (8003a74 <LCD_Configuration+0x140>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a1f      	ldr	r2, [pc, #124]	; (8003a74 <LCD_Configuration+0x140>)
 80039f8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80039fc:	6013      	str	r3, [r2, #0]
	LCD_WR_PORT->LCD_DIRL_REG|= (0x3<<20);
 80039fe:	4b1d      	ldr	r3, [pc, #116]	; (8003a74 <LCD_Configuration+0x140>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a1c      	ldr	r2, [pc, #112]	; (8003a74 <LCD_Configuration+0x140>)
 8003a04:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003a08:	6013      	str	r3, [r2, #0]
	LCD_CS_PORT->LCD_DIRL_REG&=~(0xF<<4);
 8003a0a:	4b19      	ldr	r3, [pc, #100]	; (8003a70 <LCD_Configuration+0x13c>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a18      	ldr	r2, [pc, #96]	; (8003a70 <LCD_Configuration+0x13c>)
 8003a10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a14:	6013      	str	r3, [r2, #0]
	LCD_CS_PORT->LCD_DIRL_REG|= (0x3<<4);
 8003a16:	4b16      	ldr	r3, [pc, #88]	; (8003a70 <LCD_Configuration+0x13c>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a15      	ldr	r2, [pc, #84]	; (8003a70 <LCD_Configuration+0x13c>)
 8003a1c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003a20:	6013      	str	r3, [r2, #0]
	LCD_RST_PORT->LCD_DIRL_REG&=~(0xF<<28);
 8003a22:	4b15      	ldr	r3, [pc, #84]	; (8003a78 <LCD_Configuration+0x144>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a14      	ldr	r2, [pc, #80]	; (8003a78 <LCD_Configuration+0x144>)
 8003a28:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003a2c:	6013      	str	r3, [r2, #0]
	LCD_RST_PORT->LCD_DIRL_REG|= (0x3<<28);
 8003a2e:	4b12      	ldr	r3, [pc, #72]	; (8003a78 <LCD_Configuration+0x144>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a11      	ldr	r2, [pc, #68]	; (8003a78 <LCD_Configuration+0x144>)
 8003a34:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8003a38:	6013      	str	r3, [r2, #0]
	LCD_BL_PORT->LCD_DIRL_REG&=~(0xF<<24);
 8003a3a:	4b10      	ldr	r3, [pc, #64]	; (8003a7c <LCD_Configuration+0x148>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a0f      	ldr	r2, [pc, #60]	; (8003a7c <LCD_Configuration+0x148>)
 8003a40:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8003a44:	6013      	str	r3, [r2, #0]
	LCD_BL_PORT->LCD_DIRL_REG|= (0x3<<24);
 8003a46:	4b0d      	ldr	r3, [pc, #52]	; (8003a7c <LCD_Configuration+0x148>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a0c      	ldr	r2, [pc, #48]	; (8003a7c <LCD_Configuration+0x148>)
 8003a4c:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8003a50:	6013      	str	r3, [r2, #0]
	LCD_BL(ON);
 8003a52:	4b0a      	ldr	r3, [pc, #40]	; (8003a7c <LCD_Configuration+0x148>)
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	4a09      	ldr	r2, [pc, #36]	; (8003a7c <LCD_Configuration+0x148>)
 8003a58:	f023 0304 	bic.w	r3, r3, #4
 8003a5c:	60d3      	str	r3, [r2, #12]
}
 8003a5e:	bf00      	nop
 8003a60:	371c      	adds	r7, #28
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bc80      	pop	{r7}
 8003a66:	4770      	bx	lr
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	40011800 	.word	0x40011800
 8003a70:	40010c00 	.word	0x40010c00
 8003a74:	40011000 	.word	0x40011000
 8003a78:	40010800 	.word	0x40010800
 8003a7c:	40011400 	.word	0x40011400

08003a80 <LCD_WriteIndex>:
* Output         : None
* Return         : None
* Attention      : None
*******************************************************************************/
void LCD_WriteIndex(unsigned short index)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	4603      	mov	r3, r0
 8003a88:	80fb      	strh	r3, [r7, #6]
        /* If you are not use STM32, you must change it */
	Clr_Rs;   /* RS low */
 8003a8a:	4b10      	ldr	r3, [pc, #64]	; (8003acc <LCD_WriteIndex+0x4c>)
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	4a0f      	ldr	r2, [pc, #60]	; (8003acc <LCD_WriteIndex+0x4c>)
 8003a90:	f023 0301 	bic.w	r3, r3, #1
 8003a94:	60d3      	str	r3, [r2, #12]
	Set_nRd;  /* RD high */
 8003a96:	4b0e      	ldr	r3, [pc, #56]	; (8003ad0 <LCD_WriteIndex+0x50>)
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	4a0d      	ldr	r2, [pc, #52]	; (8003ad0 <LCD_WriteIndex+0x50>)
 8003a9c:	f043 0310 	orr.w	r3, r3, #16
 8003aa0:	60d3      	str	r3, [r2, #12]
	//Delay_us(LCD_Delay);
        /* write data */
//	GPIOE->ODR = index;	 /* GPIO_Write(GPIOE,index); */
//	LCD_DATA_PORT->LCD_OUTDATA_REG &=~ (0xFFFF<<LCD_DATA_BIT_OFFSET);
//	LCD_DATA_PORT->LCD_OUTDATA_REG |= (index<<LCD_DATA_BIT_OFFSET);
	LCD_DATA_PORT->LCD_OUTDATA_REG = (index<<LCD_DATA_BIT_OFFSET); // Because STM32F103 Port is 16Bit
 8003aa2:	4a0c      	ldr	r2, [pc, #48]	; (8003ad4 <LCD_WriteIndex+0x54>)
 8003aa4:	88fb      	ldrh	r3, [r7, #6]
 8003aa6:	60d3      	str	r3, [r2, #12]
	//wait_delay(25);	
	Clr_nWr;  /* Wr low */
 8003aa8:	4b09      	ldr	r3, [pc, #36]	; (8003ad0 <LCD_WriteIndex+0x50>)
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	4a08      	ldr	r2, [pc, #32]	; (8003ad0 <LCD_WriteIndex+0x50>)
 8003aae:	f023 0320 	bic.w	r3, r3, #32
 8003ab2:	60d3      	str	r3, [r2, #12]
	//wait_delay(1);
	Set_nWr;  /* Wr high */
 8003ab4:	4b06      	ldr	r3, [pc, #24]	; (8003ad0 <LCD_WriteIndex+0x50>)
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	4a05      	ldr	r2, [pc, #20]	; (8003ad0 <LCD_WriteIndex+0x50>)
 8003aba:	f043 0320 	orr.w	r3, r3, #32
 8003abe:	60d3      	str	r3, [r2, #12]
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bc80      	pop	{r7}
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	40010c00 	.word	0x40010c00
 8003ad0:	40011000 	.word	0x40011000
 8003ad4:	40011800 	.word	0x40011800

08003ad8 <LCD_WriteData>:
* Output         : None
* Return         : None
* Attention		 : None
*******************************************************************************/
void LCD_WriteData(unsigned short data)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	4603      	mov	r3, r0
 8003ae0:	80fb      	strh	r3, [r7, #6]
	Set_Rs;  /* RS high */
 8003ae2:	4b0d      	ldr	r3, [pc, #52]	; (8003b18 <LCD_WriteData+0x40>)
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	4a0c      	ldr	r2, [pc, #48]	; (8003b18 <LCD_WriteData+0x40>)
 8003ae8:	f043 0301 	orr.w	r3, r3, #1
 8003aec:	60d3      	str	r3, [r2, #12]
	//Delay_us(LCD_Delay);
        /* write data */
//	GPIOE->ODR = data;	 /* GPIO_Write(GPIOE,data); */
//	LCD_DATA_PORT->LCD_OUTDATA_REG &=~ (0xFFFF<<LCD_DATA_BIT_OFFSET);
//	LCD_DATA_PORT->LCD_OUTDATA_REG |= (data<<LCD_DATA_BIT_OFFSET);
		LCD_DATA_PORT->LCD_OUTDATA_REG = (data<<LCD_DATA_BIT_OFFSET);
 8003aee:	4a0b      	ldr	r2, [pc, #44]	; (8003b1c <LCD_WriteData+0x44>)
 8003af0:	88fb      	ldrh	r3, [r7, #6]
 8003af2:	60d3      	str	r3, [r2, #12]
	Clr_nWr;  /* Wr low */
 8003af4:	4b0a      	ldr	r3, [pc, #40]	; (8003b20 <LCD_WriteData+0x48>)
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	4a09      	ldr	r2, [pc, #36]	; (8003b20 <LCD_WriteData+0x48>)
 8003afa:	f023 0320 	bic.w	r3, r3, #32
 8003afe:	60d3      	str	r3, [r2, #12]
	//wait_delay(1);
	Set_nWr;  /* Wr high */
 8003b00:	4b07      	ldr	r3, [pc, #28]	; (8003b20 <LCD_WriteData+0x48>)
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	4a06      	ldr	r2, [pc, #24]	; (8003b20 <LCD_WriteData+0x48>)
 8003b06:	f043 0320 	orr.w	r3, r3, #32
 8003b0a:	60d3      	str	r3, [r2, #12]
}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bc80      	pop	{r7}
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	40010c00 	.word	0x40010c00
 8003b1c:	40011800 	.word	0x40011800
 8003b20:	40011000 	.word	0x40011000

08003b24 <LCD_ReadData>:
* Output         : None
* Return         : return data
* Attention	 : None
*******************************************************************************/
unsigned short LCD_ReadData(void)
{ 
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
        /* If you are not use STM32, you must change it */

	unsigned short value;
	Set_Rs;  /* RS high */ 
 8003b2a:	4b1a      	ldr	r3, [pc, #104]	; (8003b94 <LCD_ReadData+0x70>)
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	4a19      	ldr	r2, [pc, #100]	; (8003b94 <LCD_ReadData+0x70>)
 8003b30:	f043 0301 	orr.w	r3, r3, #1
 8003b34:	60d3      	str	r3, [r2, #12]
	Set_nWr; /* Wr high */
 8003b36:	4b18      	ldr	r3, [pc, #96]	; (8003b98 <LCD_ReadData+0x74>)
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	4a17      	ldr	r2, [pc, #92]	; (8003b98 <LCD_ReadData+0x74>)
 8003b3c:	f043 0320 	orr.w	r3, r3, #32
 8003b40:	60d3      	str	r3, [r2, #12]
	Clr_nRd; /* Rd low */ 
 8003b42:	4b15      	ldr	r3, [pc, #84]	; (8003b98 <LCD_ReadData+0x74>)
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	4a14      	ldr	r2, [pc, #80]	; (8003b98 <LCD_ReadData+0x74>)
 8003b48:	f023 0310 	bic.w	r3, r3, #16
 8003b4c:	60d3      	str	r3, [r2, #12]
    PE.09(D9), PE.10(D10), PE.11(D11), PE.12(D12), PE.13(D13), PE.14(D14), PE.15(D15)   */

    /* setting the IO to input mode */

    
	LCD_DATA_PORT->LCD_DIRL_REG= (0x88888888 << LCD_DATA_BIT_OFFSET);
 8003b4e:	4b13      	ldr	r3, [pc, #76]	; (8003b9c <LCD_ReadData+0x78>)
 8003b50:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8003b54:	601a      	str	r2, [r3, #0]
	LCD_DATA_PORT->LCD_DIRH_REG= (0x88888888 << LCD_DATA_BIT_OFFSET);
 8003b56:	4b11      	ldr	r3, [pc, #68]	; (8003b9c <LCD_ReadData+0x78>)
 8003b58:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8003b5c:	605a      	str	r2, [r3, #4]
	
	
    /* read data */
//    value = GPIO_ReadInputData(GPIOE);
//    value = GPIO_ReadInputData(GPIOE);
    value = (LCD_DATA_PORT->LCD_INDATA_REG)>>LCD_DATA_BIT_OFFSET;
 8003b5e:	4b0f      	ldr	r3, [pc, #60]	; (8003b9c <LCD_ReadData+0x78>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	80fb      	strh	r3, [r7, #6]
		value = (LCD_DATA_PORT->LCD_INDATA_REG)>>LCD_DATA_BIT_OFFSET;
 8003b64:	4b0d      	ldr	r3, [pc, #52]	; (8003b9c <LCD_ReadData+0x78>)
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	80fb      	strh	r3, [r7, #6]
    PE.09(D9), PE.10(D10), PE.11(D11), PE.12(D12), PE.13(D13), PE.14(D14), PE.15(D15)   
*/
    
    /* setting the IO to output mode */

    LCD_DATA_PORT->LCD_DIRL_REG= (0x33333333 << LCD_DATA_BIT_OFFSET);
 8003b6a:	4b0c      	ldr	r3, [pc, #48]	; (8003b9c <LCD_ReadData+0x78>)
 8003b6c:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8003b70:	601a      	str	r2, [r3, #0]
		LCD_DATA_PORT->LCD_DIRH_REG= (0x33333333 << LCD_DATA_BIT_OFFSET);
 8003b72:	4b0a      	ldr	r3, [pc, #40]	; (8003b9c <LCD_ReadData+0x78>)
 8003b74:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8003b78:	605a      	str	r2, [r3, #4]

    Set_nRd;   /* Rd high */
 8003b7a:	4b07      	ldr	r3, [pc, #28]	; (8003b98 <LCD_ReadData+0x74>)
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	4a06      	ldr	r2, [pc, #24]	; (8003b98 <LCD_ReadData+0x74>)
 8003b80:	f043 0310 	orr.w	r3, r3, #16
 8003b84:	60d3      	str	r3, [r2, #12]
    return value;  /* return data */
 8003b86:	88fb      	ldrh	r3, [r7, #6]
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bc80      	pop	{r7}
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	40010c00 	.word	0x40010c00
 8003b98:	40011000 	.word	0x40011000
 8003b9c:	40011800 	.word	0x40011800

08003ba0 <LCD_WriteReg>:
* Output         : None
* Return         : None
* Attention	 : None
*******************************************************************************/
void LCD_WriteReg( unsigned short LCD_Reg, unsigned short LCD_RegValue )
{ 
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	460a      	mov	r2, r1
 8003baa:	80fb      	strh	r3, [r7, #6]
 8003bac:	4613      	mov	r3, r2
 8003bae:	80bb      	strh	r3, [r7, #4]
	/* Write 16-bit Index, then Write Reg */

	Clr_Cs;   /* Cs low */ 
 8003bb0:	4b0b      	ldr	r3, [pc, #44]	; (8003be0 <LCD_WriteReg+0x40>)
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	4a0a      	ldr	r2, [pc, #40]	; (8003be0 <LCD_WriteReg+0x40>)
 8003bb6:	f023 0302 	bic.w	r3, r3, #2
 8003bba:	60d3      	str	r3, [r2, #12]

        /* selected LCD register */ 
	LCD_WriteIndex(LCD_Reg);
 8003bbc:	88fb      	ldrh	r3, [r7, #6]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7ff ff5e 	bl	8003a80 <LCD_WriteIndex>
      
	/* Write register data */
	LCD_WriteData(LCD_RegValue);
 8003bc4:	88bb      	ldrh	r3, [r7, #4]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7ff ff86 	bl	8003ad8 <LCD_WriteData>
  
	Set_Cs;   /* Cs high */
 8003bcc:	4b04      	ldr	r3, [pc, #16]	; (8003be0 <LCD_WriteReg+0x40>)
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	4a03      	ldr	r2, [pc, #12]	; (8003be0 <LCD_WriteReg+0x40>)
 8003bd2:	f043 0302 	orr.w	r3, r3, #2
 8003bd6:	60d3      	str	r3, [r2, #12]
}
 8003bd8:	bf00      	nop
 8003bda:	3708      	adds	r7, #8
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	40010c00 	.word	0x40010c00

08003be4 <LCD_ReadReg>:
* Output         : None
* Return         : return Register data.
* Attention	 : None
*******************************************************************************/
unsigned short LCD_ReadReg(unsigned short LCD_Reg)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	4603      	mov	r3, r0
 8003bec:	80fb      	strh	r3, [r7, #6]
	unsigned short LCD_RAM;
	
	Clr_Cs;  /* Cs low */ 
 8003bee:	4b0c      	ldr	r3, [pc, #48]	; (8003c20 <LCD_ReadReg+0x3c>)
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	4a0b      	ldr	r2, [pc, #44]	; (8003c20 <LCD_ReadReg+0x3c>)
 8003bf4:	f023 0302 	bic.w	r3, r3, #2
 8003bf8:	60d3      	str	r3, [r2, #12]
 
        /* selected LCD register */ 
	LCD_WriteIndex(LCD_Reg);
 8003bfa:	88fb      	ldrh	r3, [r7, #6]
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7ff ff3f 	bl	8003a80 <LCD_WriteIndex>

	/* Write register data */
	LCD_RAM = LCD_ReadData(); 
 8003c02:	f7ff ff8f 	bl	8003b24 <LCD_ReadData>
 8003c06:	4603      	mov	r3, r0
 8003c08:	81fb      	strh	r3, [r7, #14]
     	
	Set_Cs;  /* Cs high */
 8003c0a:	4b05      	ldr	r3, [pc, #20]	; (8003c20 <LCD_ReadReg+0x3c>)
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	4a04      	ldr	r2, [pc, #16]	; (8003c20 <LCD_ReadReg+0x3c>)
 8003c10:	f043 0302 	orr.w	r3, r3, #2
 8003c14:	60d3      	str	r3, [r2, #12]

        /* return read data */
	return LCD_RAM;
 8003c16:	89fb      	ldrh	r3, [r7, #14]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3710      	adds	r7, #16
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	40010c00 	.word	0x40010c00

08003c24 <LCD_SetCursor>:
* Output         : None
* Return         : None
* Attention		 : None
*******************************************************************************/
void LCD_SetCursor( unsigned short Xpos, unsigned short Ypos )
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	460a      	mov	r2, r1
 8003c2e:	80fb      	strh	r3, [r7, #6]
 8003c30:	4613      	mov	r3, r2
 8003c32:	80bb      	strh	r3, [r7, #4]
    LCD_WriteReg(0x004e, Xpos );     
 8003c34:	88fb      	ldrh	r3, [r7, #6]
 8003c36:	4619      	mov	r1, r3
 8003c38:	204e      	movs	r0, #78	; 0x4e
 8003c3a:	f7ff ffb1 	bl	8003ba0 <LCD_WriteReg>
    LCD_WriteReg(0x004f, Ypos );     
 8003c3e:	88bb      	ldrh	r3, [r7, #4]
 8003c40:	4619      	mov	r1, r3
 8003c42:	204f      	movs	r0, #79	; 0x4f
 8003c44:	f7ff ffac 	bl	8003ba0 <LCD_WriteReg>
}
 8003c48:	bf00      	nop
 8003c4a:	3708      	adds	r7, #8
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <LCD_reset_sequence>:


static void LCD_reset_sequence(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	af00      	add	r7, sp, #0
    Set_Rst;
 8003c54:	4b0e      	ldr	r3, [pc, #56]	; (8003c90 <LCD_reset_sequence+0x40>)
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	4a0d      	ldr	r2, [pc, #52]	; (8003c90 <LCD_reset_sequence+0x40>)
 8003c5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c5e:	60d3      	str	r3, [r2, #12]
    delay_ms(50);
 8003c60:	2032      	movs	r0, #50	; 0x32
 8003c62:	f7ff fe47 	bl	80038f4 <delay_ms>
    Clr_Rst;
 8003c66:	4b0a      	ldr	r3, [pc, #40]	; (8003c90 <LCD_reset_sequence+0x40>)
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	4a09      	ldr	r2, [pc, #36]	; (8003c90 <LCD_reset_sequence+0x40>)
 8003c6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c70:	60d3      	str	r3, [r2, #12]
    delay_ms(1000);
 8003c72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c76:	f7ff fe3d 	bl	80038f4 <delay_ms>
    Set_Rst;
 8003c7a:	4b05      	ldr	r3, [pc, #20]	; (8003c90 <LCD_reset_sequence+0x40>)
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	4a04      	ldr	r2, [pc, #16]	; (8003c90 <LCD_reset_sequence+0x40>)
 8003c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c84:	60d3      	str	r3, [r2, #12]
    delay_ms(150);
 8003c86:	2096      	movs	r0, #150	; 0x96
 8003c88:	f7ff fe34 	bl	80038f4 <delay_ms>
}
 8003c8c:	bf00      	nop
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	40010800 	.word	0x40010800

08003c94 <LCD_Initializtion>:
* Output         : None
* Return         : None
* Attention	 : None
*******************************************************************************/
void LCD_Initializtion(void)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b08e      	sub	sp, #56	; 0x38
 8003c98:	af00      	add	r7, sp, #0
	unsigned short LCD_ID;
	char str[50];
	
	LCD_Configuration();
 8003c9a:	f7ff fe4b 	bl	8003934 <LCD_Configuration>
	LCD_reset_sequence();
 8003c9e:	f7ff ffd7 	bl	8003c50 <LCD_reset_sequence>
	LCD_ID = LCD_ReadReg(0x0000);		/* read the LCD ID, if Controller is ILI9320, The ID value is 0x9320 */
 8003ca2:	2000      	movs	r0, #0
 8003ca4:	f7ff ff9e 	bl	8003be4 <LCD_ReadReg>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	86fb      	strh	r3, [r7, #54]	; 0x36
	
	sprintf(str,"LCD ID:%x\r\n",LCD_ID);
 8003cac:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003cae:	1d3b      	adds	r3, r7, #4
 8003cb0:	49f0      	ldr	r1, [pc, #960]	; (8004074 <LCD_Initializtion+0x3e0>)
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f001 f856 	bl	8004d64 <siprintf>
	//UARTPuts(USART1,str);
	if( LCD_ID == 0x9320 || LCD_ID == 0x9300 )
 8003cb8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003cba:	f249 3220 	movw	r2, #37664	; 0x9320
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d004      	beq.n	8003ccc <LCD_Initializtion+0x38>
 8003cc2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003cc4:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 8003cc8:	f040 80ac 	bne.w	8003e24 <LCD_Initializtion+0x190>
	{
		//UARTPuts(USART1,"ILI Driver\r\n");
	    LCD_WriteReg(0x00,0x0000);
 8003ccc:	2100      	movs	r1, #0
 8003cce:	2000      	movs	r0, #0
 8003cd0:	f7ff ff66 	bl	8003ba0 <LCD_WriteReg>
	    LCD_WriteReg(0x01,0x0100);	/* Driver Output Contral */
 8003cd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003cd8:	2001      	movs	r0, #1
 8003cda:	f7ff ff61 	bl	8003ba0 <LCD_WriteReg>
	    LCD_WriteReg(0x02,0x0700);	/* LCD Driver Waveform Contral */
 8003cde:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8003ce2:	2002      	movs	r0, #2
 8003ce4:	f7ff ff5c 	bl	8003ba0 <LCD_WriteReg>
	    LCD_WriteReg(0x03,0x1018);	/* Entry Mode Set */
 8003ce8:	f241 0118 	movw	r1, #4120	; 0x1018
 8003cec:	2003      	movs	r0, #3
 8003cee:	f7ff ff57 	bl	8003ba0 <LCD_WriteReg>
		
	    LCD_WriteReg(0x04,0x0000);	/* Scalling Contral */
 8003cf2:	2100      	movs	r1, #0
 8003cf4:	2004      	movs	r0, #4
 8003cf6:	f7ff ff53 	bl	8003ba0 <LCD_WriteReg>
	    LCD_WriteReg(0x08,0x0202);	/* Display Contral */
 8003cfa:	f240 2102 	movw	r1, #514	; 0x202
 8003cfe:	2008      	movs	r0, #8
 8003d00:	f7ff ff4e 	bl	8003ba0 <LCD_WriteReg>
	    LCD_WriteReg(0x09,0x0000);	/* Display Contral 3.(0x0000) */
 8003d04:	2100      	movs	r1, #0
 8003d06:	2009      	movs	r0, #9
 8003d08:	f7ff ff4a 	bl	8003ba0 <LCD_WriteReg>
	    LCD_WriteReg(0x0a,0x0000);	/* Frame Cycle Contal.(0x0000) */
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	200a      	movs	r0, #10
 8003d10:	f7ff ff46 	bl	8003ba0 <LCD_WriteReg>
	    LCD_WriteReg(0x0c,(1<<0));	/* Extern Display Interface Contral */
 8003d14:	2101      	movs	r1, #1
 8003d16:	200c      	movs	r0, #12
 8003d18:	f7ff ff42 	bl	8003ba0 <LCD_WriteReg>
	    LCD_WriteReg(0x0d,0x0000);	/* Frame Maker Position */
 8003d1c:	2100      	movs	r1, #0
 8003d1e:	200d      	movs	r0, #13
 8003d20:	f7ff ff3e 	bl	8003ba0 <LCD_WriteReg>
	    LCD_WriteReg(0x0f,0x0000);	/* Extern Display Interface Contral 2. */
 8003d24:	2100      	movs	r1, #0
 8003d26:	200f      	movs	r0, #15
 8003d28:	f7ff ff3a 	bl	8003ba0 <LCD_WriteReg>
		
	    delay_ms(100);  /* delay 100 ms */		
 8003d2c:	2064      	movs	r0, #100	; 0x64
 8003d2e:	f7ff fde1 	bl	80038f4 <delay_ms>
	    LCD_WriteReg(0x07,0x0101);	/* Display Contral */
 8003d32:	f240 1101 	movw	r1, #257	; 0x101
 8003d36:	2007      	movs	r0, #7
 8003d38:	f7ff ff32 	bl	8003ba0 <LCD_WriteReg>
	    delay_ms(100);  /* delay 100 ms */		
 8003d3c:	2064      	movs	r0, #100	; 0x64
 8003d3e:	f7ff fdd9 	bl	80038f4 <delay_ms>
	
	    LCD_WriteReg(0x10,(1<<12)|(0<<8)|(1<<7)|(1<<6)|(0<<4));	/* Power Control 1.(0x16b0)	*/
 8003d42:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8003d46:	2010      	movs	r0, #16
 8003d48:	f7ff ff2a 	bl	8003ba0 <LCD_WriteReg>
	    LCD_WriteReg(0x11,0x0007);								/* Power Control 2 */
 8003d4c:	2107      	movs	r1, #7
 8003d4e:	2011      	movs	r0, #17
 8003d50:	f7ff ff26 	bl	8003ba0 <LCD_WriteReg>
	    LCD_WriteReg(0x12,(1<<8)|(1<<4)|(0<<0));				/* Power Control 3.(0x0138)	*/
 8003d54:	f44f 7188 	mov.w	r1, #272	; 0x110
 8003d58:	2012      	movs	r0, #18
 8003d5a:	f7ff ff21 	bl	8003ba0 <LCD_WriteReg>
	    LCD_WriteReg(0x13,0x0b00);								/* Power Control 4 */
 8003d5e:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 8003d62:	2013      	movs	r0, #19
 8003d64:	f7ff ff1c 	bl	8003ba0 <LCD_WriteReg>
	    LCD_WriteReg(0x29,0x0000);								/* Power Control 7 */
 8003d68:	2100      	movs	r1, #0
 8003d6a:	2029      	movs	r0, #41	; 0x29
 8003d6c:	f7ff ff18 	bl	8003ba0 <LCD_WriteReg>
		
	    LCD_WriteReg(0x2b,(1<<14)|(1<<4));
 8003d70:	f244 0110 	movw	r1, #16400	; 0x4010
 8003d74:	202b      	movs	r0, #43	; 0x2b
 8003d76:	f7ff ff13 	bl	8003ba0 <LCD_WriteReg>
			
	    LCD_WriteReg(0x50,0);       /* Set X Start */
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	2050      	movs	r0, #80	; 0x50
 8003d7e:	f7ff ff0f 	bl	8003ba0 <LCD_WriteReg>
	    LCD_WriteReg(0x51,239);	    /* Set X End */
 8003d82:	21ef      	movs	r1, #239	; 0xef
 8003d84:	2051      	movs	r0, #81	; 0x51
 8003d86:	f7ff ff0b 	bl	8003ba0 <LCD_WriteReg>
	    LCD_WriteReg(0x52,0);	    /* Set Y Start */
 8003d8a:	2100      	movs	r1, #0
 8003d8c:	2052      	movs	r0, #82	; 0x52
 8003d8e:	f7ff ff07 	bl	8003ba0 <LCD_WriteReg>
	    LCD_WriteReg(0x53,319);	    /* Set Y End */
 8003d92:	f240 113f 	movw	r1, #319	; 0x13f
 8003d96:	2053      	movs	r0, #83	; 0x53
 8003d98:	f7ff ff02 	bl	8003ba0 <LCD_WriteReg>
		
	    LCD_WriteReg(0x60,0x2700);	/* Driver Output Control */
 8003d9c:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8003da0:	2060      	movs	r0, #96	; 0x60
 8003da2:	f7ff fefd 	bl	8003ba0 <LCD_WriteReg>
	    LCD_WriteReg(0x61,0x0001);	/* Driver Output Control */
 8003da6:	2101      	movs	r1, #1
 8003da8:	2061      	movs	r0, #97	; 0x61
 8003daa:	f7ff fef9 	bl	8003ba0 <LCD_WriteReg>
	    LCD_WriteReg(0x6a,0x0000);	/* Vertical Srcoll Control */
 8003dae:	2100      	movs	r1, #0
 8003db0:	206a      	movs	r0, #106	; 0x6a
 8003db2:	f7ff fef5 	bl	8003ba0 <LCD_WriteReg>
		
	    LCD_WriteReg(0x80,0x0000);	/* Display Position? Partial Display 1 */
 8003db6:	2100      	movs	r1, #0
 8003db8:	2080      	movs	r0, #128	; 0x80
 8003dba:	f7ff fef1 	bl	8003ba0 <LCD_WriteReg>
	    LCD_WriteReg(0x81,0x0000);	/* RAM Address Start? Partial Display 1 */
 8003dbe:	2100      	movs	r1, #0
 8003dc0:	2081      	movs	r0, #129	; 0x81
 8003dc2:	f7ff feed 	bl	8003ba0 <LCD_WriteReg>
	    LCD_WriteReg(0x82,0x0000);	/* RAM Address End-Partial Display 1 */
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	2082      	movs	r0, #130	; 0x82
 8003dca:	f7ff fee9 	bl	8003ba0 <LCD_WriteReg>
	    LCD_WriteReg(0x83,0x0000);	/* Displsy Position? Partial Display 2 */
 8003dce:	2100      	movs	r1, #0
 8003dd0:	2083      	movs	r0, #131	; 0x83
 8003dd2:	f7ff fee5 	bl	8003ba0 <LCD_WriteReg>
	    LCD_WriteReg(0x84,0x0000);	/* RAM Address Start? Partial Display 2 */
 8003dd6:	2100      	movs	r1, #0
 8003dd8:	2084      	movs	r0, #132	; 0x84
 8003dda:	f7ff fee1 	bl	8003ba0 <LCD_WriteReg>
	    LCD_WriteReg(0x85,0x0000);	/* RAM Address End? Partial Display 2 */
 8003dde:	2100      	movs	r1, #0
 8003de0:	2085      	movs	r0, #133	; 0x85
 8003de2:	f7ff fedd 	bl	8003ba0 <LCD_WriteReg>
		
	    LCD_WriteReg(0x90,(0<<7)|(16<<0));	/* Frame Cycle Contral.(0x0013)	*/
 8003de6:	2110      	movs	r1, #16
 8003de8:	2090      	movs	r0, #144	; 0x90
 8003dea:	f7ff fed9 	bl	8003ba0 <LCD_WriteReg>
	    LCD_WriteReg(0x92,0x0000);	/* Panel Interface Contral 2.(0x0000) */
 8003dee:	2100      	movs	r1, #0
 8003df0:	2092      	movs	r0, #146	; 0x92
 8003df2:	f7ff fed5 	bl	8003ba0 <LCD_WriteReg>
	    LCD_WriteReg(0x93,0x0001);	/* Panel Interface Contral 3. */
 8003df6:	2101      	movs	r1, #1
 8003df8:	2093      	movs	r0, #147	; 0x93
 8003dfa:	f7ff fed1 	bl	8003ba0 <LCD_WriteReg>
	    LCD_WriteReg(0x95,0x0110);	/* Frame Cycle Contral.(0x0110)	*/
 8003dfe:	f44f 7188 	mov.w	r1, #272	; 0x110
 8003e02:	2095      	movs	r0, #149	; 0x95
 8003e04:	f7ff fecc 	bl	8003ba0 <LCD_WriteReg>
	    LCD_WriteReg(0x97,(0<<8));	
 8003e08:	2100      	movs	r1, #0
 8003e0a:	2097      	movs	r0, #151	; 0x97
 8003e0c:	f7ff fec8 	bl	8003ba0 <LCD_WriteReg>
	    LCD_WriteReg(0x98,0x0000);	/* Frame Cycle Contral */
 8003e10:	2100      	movs	r1, #0
 8003e12:	2098      	movs	r0, #152	; 0x98
 8003e14:	f7ff fec4 	bl	8003ba0 <LCD_WriteReg>
	    LCD_WriteReg(0x07,0x0173);
 8003e18:	f240 1173 	movw	r1, #371	; 0x173
 8003e1c:	2007      	movs	r0, #7
 8003e1e:	f7ff febf 	bl	8003ba0 <LCD_WriteReg>
 8003e22:	e1c2      	b.n	80041aa <LCD_Initializtion+0x516>
	}
	else if( LCD_ID == 0x8989 )		 //LCD_Code = SSD1289;
 8003e24:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003e26:	f648 1289 	movw	r2, #35209	; 0x8989
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	f040 8124 	bne.w	8004078 <LCD_Initializtion+0x3e4>
	{
			LCD_WriteReg(0x0000,0x0001);    delay_ms(50);   /* ´ٍ؟ھ¾§صٌ */
 8003e30:	2101      	movs	r1, #1
 8003e32:	2000      	movs	r0, #0
 8003e34:	f7ff feb4 	bl	8003ba0 <LCD_WriteReg>
 8003e38:	2032      	movs	r0, #50	; 0x32
 8003e3a:	f7ff fd5b 	bl	80038f4 <delay_ms>
	    LCD_WriteReg(0x0003,0xA8A4);    delay_ms(50);	
 8003e3e:	f64a 01a4 	movw	r1, #43172	; 0xa8a4
 8003e42:	2003      	movs	r0, #3
 8003e44:	f7ff feac 	bl	8003ba0 <LCD_WriteReg>
 8003e48:	2032      	movs	r0, #50	; 0x32
 8003e4a:	f7ff fd53 	bl	80038f4 <delay_ms>
	    LCD_WriteReg(0x000C,0x0000);    delay_ms(50);   
 8003e4e:	2100      	movs	r1, #0
 8003e50:	200c      	movs	r0, #12
 8003e52:	f7ff fea5 	bl	8003ba0 <LCD_WriteReg>
 8003e56:	2032      	movs	r0, #50	; 0x32
 8003e58:	f7ff fd4c 	bl	80038f4 <delay_ms>
	    LCD_WriteReg(0x000D,0x080C);    delay_ms(50);   
 8003e5c:	f640 010c 	movw	r1, #2060	; 0x80c
 8003e60:	200d      	movs	r0, #13
 8003e62:	f7ff fe9d 	bl	8003ba0 <LCD_WriteReg>
 8003e66:	2032      	movs	r0, #50	; 0x32
 8003e68:	f7ff fd44 	bl	80038f4 <delay_ms>
	    LCD_WriteReg(0x000E,0x2B00);    delay_ms(50);   
 8003e6c:	f44f 512c 	mov.w	r1, #11008	; 0x2b00
 8003e70:	200e      	movs	r0, #14
 8003e72:	f7ff fe95 	bl	8003ba0 <LCD_WriteReg>
 8003e76:	2032      	movs	r0, #50	; 0x32
 8003e78:	f7ff fd3c 	bl	80038f4 <delay_ms>
	    LCD_WriteReg(0x001E,0x00B0);    delay_ms(50);   
 8003e7c:	21b0      	movs	r1, #176	; 0xb0
 8003e7e:	201e      	movs	r0, #30
 8003e80:	f7ff fe8e 	bl	8003ba0 <LCD_WriteReg>
 8003e84:	2032      	movs	r0, #50	; 0x32
 8003e86:	f7ff fd35 	bl	80038f4 <delay_ms>
	    LCD_WriteReg(0x0001,0x2B3F);    delay_ms(50);   /* ا‎¶¯تن³ِ؟طضئ320*240 0x2B3F */
 8003e8a:	f642 313f 	movw	r1, #11071	; 0x2b3f
 8003e8e:	2001      	movs	r0, #1
 8003e90:	f7ff fe86 	bl	8003ba0 <LCD_WriteReg>
 8003e94:	2032      	movs	r0, #50	; 0x32
 8003e96:	f7ff fd2d 	bl	80038f4 <delay_ms>
	    LCD_WriteReg(0x0002,0x0600);    delay_ms(50);
 8003e9a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003e9e:	2002      	movs	r0, #2
 8003ea0:	f7ff fe7e 	bl	8003ba0 <LCD_WriteReg>
 8003ea4:	2032      	movs	r0, #50	; 0x32
 8003ea6:	f7ff fd25 	bl	80038f4 <delay_ms>
	    LCD_WriteReg(0x0010,0x0000);    delay_ms(50);
 8003eaa:	2100      	movs	r1, #0
 8003eac:	2010      	movs	r0, #16
 8003eae:	f7ff fe77 	bl	8003ba0 <LCD_WriteReg>
 8003eb2:	2032      	movs	r0, #50	; 0x32
 8003eb4:	f7ff fd1e 	bl	80038f4 <delay_ms>
	    LCD_WriteReg(0x0011,0x6070);    delay_ms(50);   /* ¶¨زهت‎¾ف¸ٌت½ 16خ»ة« ؛لئء 0x6070 */
 8003eb8:	f246 0170 	movw	r1, #24688	; 0x6070
 8003ebc:	2011      	movs	r0, #17
 8003ebe:	f7ff fe6f 	bl	8003ba0 <LCD_WriteReg>
 8003ec2:	2032      	movs	r0, #50	; 0x32
 8003ec4:	f7ff fd16 	bl	80038f4 <delay_ms>
	    LCD_WriteReg(0x0005,0x0000);    delay_ms(50);
 8003ec8:	2100      	movs	r1, #0
 8003eca:	2005      	movs	r0, #5
 8003ecc:	f7ff fe68 	bl	8003ba0 <LCD_WriteReg>
 8003ed0:	2032      	movs	r0, #50	; 0x32
 8003ed2:	f7ff fd0f 	bl	80038f4 <delay_ms>
	    LCD_WriteReg(0x0006,0x0000);    delay_ms(50);
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	2006      	movs	r0, #6
 8003eda:	f7ff fe61 	bl	8003ba0 <LCD_WriteReg>
 8003ede:	2032      	movs	r0, #50	; 0x32
 8003ee0:	f7ff fd08 	bl	80038f4 <delay_ms>
	    //LCD_WriteReg(0x0016,0xEF1C);    delay_ms(50);
	    //LCD_WriteReg(0x0017,0x0003);    delay_ms(50);
	    LCD_WriteReg(0x0007,0x0133);    delay_ms(50);         
 8003ee4:	f240 1133 	movw	r1, #307	; 0x133
 8003ee8:	2007      	movs	r0, #7
 8003eea:	f7ff fe59 	bl	8003ba0 <LCD_WriteReg>
 8003eee:	2032      	movs	r0, #50	; 0x32
 8003ef0:	f7ff fd00 	bl	80038f4 <delay_ms>
	    LCD_WriteReg(0x000B,0x0000);    delay_ms(50);
 8003ef4:	2100      	movs	r1, #0
 8003ef6:	200b      	movs	r0, #11
 8003ef8:	f7ff fe52 	bl	8003ba0 <LCD_WriteReg>
 8003efc:	2032      	movs	r0, #50	; 0x32
 8003efe:	f7ff fcf9 	bl	80038f4 <delay_ms>
	    LCD_WriteReg(0x000F,0x0000);    delay_ms(50);   /* ة¨أè؟ھت¼µطض· */
 8003f02:	2100      	movs	r1, #0
 8003f04:	200f      	movs	r0, #15
 8003f06:	f7ff fe4b 	bl	8003ba0 <LCD_WriteReg>
 8003f0a:	2032      	movs	r0, #50	; 0x32
 8003f0c:	f7ff fcf2 	bl	80038f4 <delay_ms>
	    LCD_WriteReg(0x0041,0x0000);    delay_ms(50);
 8003f10:	2100      	movs	r1, #0
 8003f12:	2041      	movs	r0, #65	; 0x41
 8003f14:	f7ff fe44 	bl	8003ba0 <LCD_WriteReg>
 8003f18:	2032      	movs	r0, #50	; 0x32
 8003f1a:	f7ff fceb 	bl	80038f4 <delay_ms>
	    LCD_WriteReg(0x0042,0x0000);    delay_ms(50);
 8003f1e:	2100      	movs	r1, #0
 8003f20:	2042      	movs	r0, #66	; 0x42
 8003f22:	f7ff fe3d 	bl	8003ba0 <LCD_WriteReg>
 8003f26:	2032      	movs	r0, #50	; 0x32
 8003f28:	f7ff fce4 	bl	80038f4 <delay_ms>
	    LCD_WriteReg(0x0048,0x0000);    delay_ms(50);
 8003f2c:	2100      	movs	r1, #0
 8003f2e:	2048      	movs	r0, #72	; 0x48
 8003f30:	f7ff fe36 	bl	8003ba0 <LCD_WriteReg>
 8003f34:	2032      	movs	r0, #50	; 0x32
 8003f36:	f7ff fcdd 	bl	80038f4 <delay_ms>
	    LCD_WriteReg(0x0049,0x013F);    delay_ms(50);
 8003f3a:	f240 113f 	movw	r1, #319	; 0x13f
 8003f3e:	2049      	movs	r0, #73	; 0x49
 8003f40:	f7ff fe2e 	bl	8003ba0 <LCD_WriteReg>
 8003f44:	2032      	movs	r0, #50	; 0x32
 8003f46:	f7ff fcd5 	bl	80038f4 <delay_ms>
	    LCD_WriteReg(0x004A,0x0000);    delay_ms(50);
 8003f4a:	2100      	movs	r1, #0
 8003f4c:	204a      	movs	r0, #74	; 0x4a
 8003f4e:	f7ff fe27 	bl	8003ba0 <LCD_WriteReg>
 8003f52:	2032      	movs	r0, #50	; 0x32
 8003f54:	f7ff fcce 	bl	80038f4 <delay_ms>
	    LCD_WriteReg(0x004B,0x0000);    delay_ms(50);
 8003f58:	2100      	movs	r1, #0
 8003f5a:	204b      	movs	r0, #75	; 0x4b
 8003f5c:	f7ff fe20 	bl	8003ba0 <LCD_WriteReg>
 8003f60:	2032      	movs	r0, #50	; 0x32
 8003f62:	f7ff fcc7 	bl	80038f4 <delay_ms>
	    LCD_WriteReg(0x0044,0xEF00);    delay_ms(50);
 8003f66:	f44f 416f 	mov.w	r1, #61184	; 0xef00
 8003f6a:	2044      	movs	r0, #68	; 0x44
 8003f6c:	f7ff fe18 	bl	8003ba0 <LCD_WriteReg>
 8003f70:	2032      	movs	r0, #50	; 0x32
 8003f72:	f7ff fcbf 	bl	80038f4 <delay_ms>
	    LCD_WriteReg(0x0045,0x0000);    delay_ms(50);
 8003f76:	2100      	movs	r1, #0
 8003f78:	2045      	movs	r0, #69	; 0x45
 8003f7a:	f7ff fe11 	bl	8003ba0 <LCD_WriteReg>
 8003f7e:	2032      	movs	r0, #50	; 0x32
 8003f80:	f7ff fcb8 	bl	80038f4 <delay_ms>
	    LCD_WriteReg(0x0046,0x013F);    delay_ms(50);
 8003f84:	f240 113f 	movw	r1, #319	; 0x13f
 8003f88:	2046      	movs	r0, #70	; 0x46
 8003f8a:	f7ff fe09 	bl	8003ba0 <LCD_WriteReg>
 8003f8e:	2032      	movs	r0, #50	; 0x32
 8003f90:	f7ff fcb0 	bl	80038f4 <delay_ms>
	    LCD_WriteReg(0x0030,0x0707);    delay_ms(50);
 8003f94:	f240 7107 	movw	r1, #1799	; 0x707
 8003f98:	2030      	movs	r0, #48	; 0x30
 8003f9a:	f7ff fe01 	bl	8003ba0 <LCD_WriteReg>
 8003f9e:	2032      	movs	r0, #50	; 0x32
 8003fa0:	f7ff fca8 	bl	80038f4 <delay_ms>
	    LCD_WriteReg(0x0031,0x0204);    delay_ms(50);
 8003fa4:	f44f 7101 	mov.w	r1, #516	; 0x204
 8003fa8:	2031      	movs	r0, #49	; 0x31
 8003faa:	f7ff fdf9 	bl	8003ba0 <LCD_WriteReg>
 8003fae:	2032      	movs	r0, #50	; 0x32
 8003fb0:	f7ff fca0 	bl	80038f4 <delay_ms>
	    LCD_WriteReg(0x0032,0x0204);    delay_ms(50);
 8003fb4:	f44f 7101 	mov.w	r1, #516	; 0x204
 8003fb8:	2032      	movs	r0, #50	; 0x32
 8003fba:	f7ff fdf1 	bl	8003ba0 <LCD_WriteReg>
 8003fbe:	2032      	movs	r0, #50	; 0x32
 8003fc0:	f7ff fc98 	bl	80038f4 <delay_ms>
	    LCD_WriteReg(0x0033,0x0502);    delay_ms(50);
 8003fc4:	f240 5102 	movw	r1, #1282	; 0x502
 8003fc8:	2033      	movs	r0, #51	; 0x33
 8003fca:	f7ff fde9 	bl	8003ba0 <LCD_WriteReg>
 8003fce:	2032      	movs	r0, #50	; 0x32
 8003fd0:	f7ff fc90 	bl	80038f4 <delay_ms>
	    LCD_WriteReg(0x0034,0x0507);    delay_ms(50);
 8003fd4:	f240 5107 	movw	r1, #1287	; 0x507
 8003fd8:	2034      	movs	r0, #52	; 0x34
 8003fda:	f7ff fde1 	bl	8003ba0 <LCD_WriteReg>
 8003fde:	2032      	movs	r0, #50	; 0x32
 8003fe0:	f7ff fc88 	bl	80038f4 <delay_ms>
	    LCD_WriteReg(0x0035,0x0204);    delay_ms(50);
 8003fe4:	f44f 7101 	mov.w	r1, #516	; 0x204
 8003fe8:	2035      	movs	r0, #53	; 0x35
 8003fea:	f7ff fdd9 	bl	8003ba0 <LCD_WriteReg>
 8003fee:	2032      	movs	r0, #50	; 0x32
 8003ff0:	f7ff fc80 	bl	80038f4 <delay_ms>
	    LCD_WriteReg(0x0036,0x0204);    delay_ms(50);
 8003ff4:	f44f 7101 	mov.w	r1, #516	; 0x204
 8003ff8:	2036      	movs	r0, #54	; 0x36
 8003ffa:	f7ff fdd1 	bl	8003ba0 <LCD_WriteReg>
 8003ffe:	2032      	movs	r0, #50	; 0x32
 8004000:	f7ff fc78 	bl	80038f4 <delay_ms>
	    LCD_WriteReg(0x0037,0x0502);    delay_ms(50);
 8004004:	f240 5102 	movw	r1, #1282	; 0x502
 8004008:	2037      	movs	r0, #55	; 0x37
 800400a:	f7ff fdc9 	bl	8003ba0 <LCD_WriteReg>
 800400e:	2032      	movs	r0, #50	; 0x32
 8004010:	f7ff fc70 	bl	80038f4 <delay_ms>
	    LCD_WriteReg(0x003A,0x0302);    delay_ms(50);
 8004014:	f240 3102 	movw	r1, #770	; 0x302
 8004018:	203a      	movs	r0, #58	; 0x3a
 800401a:	f7ff fdc1 	bl	8003ba0 <LCD_WriteReg>
 800401e:	2032      	movs	r0, #50	; 0x32
 8004020:	f7ff fc68 	bl	80038f4 <delay_ms>
	    LCD_WriteReg(0x003B,0x0302);    delay_ms(50);
 8004024:	f240 3102 	movw	r1, #770	; 0x302
 8004028:	203b      	movs	r0, #59	; 0x3b
 800402a:	f7ff fdb9 	bl	8003ba0 <LCD_WriteReg>
 800402e:	2032      	movs	r0, #50	; 0x32
 8004030:	f7ff fc60 	bl	80038f4 <delay_ms>
	    LCD_WriteReg(0x0023,0x0000);    delay_ms(50);
 8004034:	2100      	movs	r1, #0
 8004036:	2023      	movs	r0, #35	; 0x23
 8004038:	f7ff fdb2 	bl	8003ba0 <LCD_WriteReg>
 800403c:	2032      	movs	r0, #50	; 0x32
 800403e:	f7ff fc59 	bl	80038f4 <delay_ms>
	    LCD_WriteReg(0x0024,0x0000);    delay_ms(50);
 8004042:	2100      	movs	r1, #0
 8004044:	2024      	movs	r0, #36	; 0x24
 8004046:	f7ff fdab 	bl	8003ba0 <LCD_WriteReg>
 800404a:	2032      	movs	r0, #50	; 0x32
 800404c:	f7ff fc52 	bl	80038f4 <delay_ms>
	    LCD_WriteReg(0x0025,0x8000);    delay_ms(50);
 8004050:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004054:	2025      	movs	r0, #37	; 0x25
 8004056:	f7ff fda3 	bl	8003ba0 <LCD_WriteReg>
 800405a:	2032      	movs	r0, #50	; 0x32
 800405c:	f7ff fc4a 	bl	80038f4 <delay_ms>
	    LCD_WriteReg(0x004f,0);        /* ذذت×ض·0 */
 8004060:	2100      	movs	r1, #0
 8004062:	204f      	movs	r0, #79	; 0x4f
 8004064:	f7ff fd9c 	bl	8003ba0 <LCD_WriteReg>
	    LCD_WriteReg(0x004e,0);        /* ءذت×ض·0 */
 8004068:	2100      	movs	r1, #0
 800406a:	204e      	movs	r0, #78	; 0x4e
 800406c:	f7ff fd98 	bl	8003ba0 <LCD_WriteReg>
 8004070:	e09b      	b.n	80041aa <LCD_Initializtion+0x516>
 8004072:	bf00      	nop
 8004074:	08005704 	.word	0x08005704
	}

	else if(LCD_ID==0x8999)	   //הӦքȽ֯ICΪSSD1289
 8004078:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800407a:	f648 1299 	movw	r2, #35225	; 0x8999
 800407e:	4293      	cmp	r3, r2
 8004080:	f040 8092 	bne.w	80041a8 <LCD_Initializtion+0x514>
	{
		//UARTPuts(USART1,"SSD1298 Driver\r\n");
		//************* Start Initial Sequence **********//
		LCD_WriteReg(0x00, 0x0001); // Start internal OSC.
 8004084:	2101      	movs	r1, #1
 8004086:	2000      	movs	r0, #0
 8004088:	f7ff fd8a 	bl	8003ba0 <LCD_WriteReg>
		LCD_WriteReg(0x01, 0x3B3F); // Driver output control, RL=0;REV=1;GD=1;BGR=0;SM=0;TB=1
 800408c:	f643 313f 	movw	r1, #15167	; 0x3b3f
 8004090:	2001      	movs	r0, #1
 8004092:	f7ff fd85 	bl	8003ba0 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0600); // set 1 line inversion
 8004096:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800409a:	2002      	movs	r0, #2
 800409c:	f7ff fd80 	bl	8003ba0 <LCD_WriteReg>
		//************* Power control setup ************/
		LCD_WriteReg(0x0C, 0x0007); // Adjust VCIX2 output voltage
 80040a0:	2107      	movs	r1, #7
 80040a2:	200c      	movs	r0, #12
 80040a4:	f7ff fd7c 	bl	8003ba0 <LCD_WriteReg>
		LCD_WriteReg(0x0D, 0x0006); // Set amplitude magnification of VLCD63
 80040a8:	2106      	movs	r1, #6
 80040aa:	200d      	movs	r0, #13
 80040ac:	f7ff fd78 	bl	8003ba0 <LCD_WriteReg>
		LCD_WriteReg(0x0E, 0x3200); // Set alternating amplitude of VCOM
 80040b0:	f44f 5148 	mov.w	r1, #12800	; 0x3200
 80040b4:	200e      	movs	r0, #14
 80040b6:	f7ff fd73 	bl	8003ba0 <LCD_WriteReg>
		LCD_WriteReg(0x1E, 0x00BB); // Set VcomH voltage
 80040ba:	21bb      	movs	r1, #187	; 0xbb
 80040bc:	201e      	movs	r0, #30
 80040be:	f7ff fd6f 	bl	8003ba0 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x6A64); // Step-up factor/cycle setting  7b30
 80040c2:	f646 2164 	movw	r1, #27236	; 0x6a64
 80040c6:	2003      	movs	r0, #3
 80040c8:	f7ff fd6a 	bl	8003ba0 <LCD_WriteReg>
		//************ RAM position control **********/
		LCD_WriteReg(0x0F, 0x0000); // Gate scan position start at G0.
 80040cc:	2100      	movs	r1, #0
 80040ce:	200f      	movs	r0, #15
 80040d0:	f7ff fd66 	bl	8003ba0 <LCD_WriteReg>
		LCD_WriteReg(0x44, 0xEF00); // Horizontal RAM address position
 80040d4:	f44f 416f 	mov.w	r1, #61184	; 0xef00
 80040d8:	2044      	movs	r0, #68	; 0x44
 80040da:	f7ff fd61 	bl	8003ba0 <LCD_WriteReg>
		LCD_WriteReg(0x45, 0x0000); // Vertical RAM address start position
 80040de:	2100      	movs	r1, #0
 80040e0:	2045      	movs	r0, #69	; 0x45
 80040e2:	f7ff fd5d 	bl	8003ba0 <LCD_WriteReg>
		LCD_WriteReg(0x46, 0x013F); // Vertical RAM address end position
 80040e6:	f240 113f 	movw	r1, #319	; 0x13f
 80040ea:	2046      	movs	r0, #70	; 0x46
 80040ec:	f7ff fd58 	bl	8003ba0 <LCD_WriteReg>
		// ----------- Adjust the Gamma Curve ----------//
		LCD_WriteReg(0x30, 0x0000);
 80040f0:	2100      	movs	r1, #0
 80040f2:	2030      	movs	r0, #48	; 0x30
 80040f4:	f7ff fd54 	bl	8003ba0 <LCD_WriteReg>
		LCD_WriteReg(0x31, 0x0706);
 80040f8:	f240 7106 	movw	r1, #1798	; 0x706
 80040fc:	2031      	movs	r0, #49	; 0x31
 80040fe:	f7ff fd4f 	bl	8003ba0 <LCD_WriteReg>
		LCD_WriteReg(0x32, 0x0206);
 8004102:	f240 2106 	movw	r1, #518	; 0x206
 8004106:	2032      	movs	r0, #50	; 0x32
 8004108:	f7ff fd4a 	bl	8003ba0 <LCD_WriteReg>
		LCD_WriteReg(0x33, 0x0300);
 800410c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004110:	2033      	movs	r0, #51	; 0x33
 8004112:	f7ff fd45 	bl	8003ba0 <LCD_WriteReg>
		LCD_WriteReg(0x34, 0x0002);
 8004116:	2102      	movs	r1, #2
 8004118:	2034      	movs	r0, #52	; 0x34
 800411a:	f7ff fd41 	bl	8003ba0 <LCD_WriteReg>
		LCD_WriteReg(0x35, 0x0000);
 800411e:	2100      	movs	r1, #0
 8004120:	2035      	movs	r0, #53	; 0x35
 8004122:	f7ff fd3d 	bl	8003ba0 <LCD_WriteReg>
		LCD_WriteReg(0x36, 0x0707);
 8004126:	f240 7107 	movw	r1, #1799	; 0x707
 800412a:	2036      	movs	r0, #54	; 0x36
 800412c:	f7ff fd38 	bl	8003ba0 <LCD_WriteReg>
		LCD_WriteReg(0x37, 0x0200);
 8004130:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004134:	2037      	movs	r0, #55	; 0x37
 8004136:	f7ff fd33 	bl	8003ba0 <LCD_WriteReg>
		LCD_WriteReg(0x3A, 0x0908);
 800413a:	f640 1108 	movw	r1, #2312	; 0x908
 800413e:	203a      	movs	r0, #58	; 0x3a
 8004140:	f7ff fd2e 	bl	8003ba0 <LCD_WriteReg>
		LCD_WriteReg(0x3B, 0x0F0D);
 8004144:	f640 710d 	movw	r1, #3853	; 0xf0d
 8004148:	203b      	movs	r0, #59	; 0x3b
 800414a:	f7ff fd29 	bl	8003ba0 <LCD_WriteReg>
		//************* Special command **************/
		LCD_WriteReg(0x28, 0x0006); // Enable test command
 800414e:	2106      	movs	r1, #6
 8004150:	2028      	movs	r0, #40	; 0x28
 8004152:	f7ff fd25 	bl	8003ba0 <LCD_WriteReg>
		LCD_WriteReg(0x2F, 0x12EB); // RAM speed tuning
 8004156:	f241 21eb 	movw	r1, #4843	; 0x12eb
 800415a:	202f      	movs	r0, #47	; 0x2f
 800415c:	f7ff fd20 	bl	8003ba0 <LCD_WriteReg>
		LCD_WriteReg(0x26, 0x7000); // Internal Bandgap strength
 8004160:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8004164:	2026      	movs	r0, #38	; 0x26
 8004166:	f7ff fd1b 	bl	8003ba0 <LCD_WriteReg>
		LCD_WriteReg(0x20, 0xB0E3); // Internal Vcom strength
 800416a:	f24b 01e3 	movw	r1, #45283	; 0xb0e3
 800416e:	2020      	movs	r0, #32
 8004170:	f7ff fd16 	bl	8003ba0 <LCD_WriteReg>
		LCD_WriteReg(0x27, 0x0044); // Internal Vcomh/VcomL timing
 8004174:	2144      	movs	r1, #68	; 0x44
 8004176:	2027      	movs	r0, #39	; 0x27
 8004178:	f7ff fd12 	bl	8003ba0 <LCD_WriteReg>
		LCD_WriteReg(0x2E, 0x7E45); // VCOM charge sharing time  
 800417c:	f647 6145 	movw	r1, #32325	; 0x7e45
 8004180:	202e      	movs	r0, #46	; 0x2e
 8004182:	f7ff fd0d 	bl	8003ba0 <LCD_WriteReg>
		//************* Turn On display ******************/
		LCD_WriteReg(0x10, 0x0000); // Sleep mode off.
 8004186:	2100      	movs	r1, #0
 8004188:	2010      	movs	r0, #16
 800418a:	f7ff fd09 	bl	8003ba0 <LCD_WriteReg>
		delay_ms(8); // Wait 30mS
 800418e:	2008      	movs	r0, #8
 8004190:	f7ff fbb0 	bl	80038f4 <delay_ms>
		LCD_WriteReg(0x11, 0x6878); // Entry mode setup. 262K type B, take care on the data bus with 16it only 
 8004194:	f646 0178 	movw	r1, #26744	; 0x6878
 8004198:	2011      	movs	r0, #17
 800419a:	f7ff fd01 	bl	8003ba0 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0033); // Display ON	*/
 800419e:	2133      	movs	r1, #51	; 0x33
 80041a0:	2007      	movs	r0, #7
 80041a2:	f7ff fcfd 	bl	8003ba0 <LCD_WriteReg>
 80041a6:	e000      	b.n	80041aa <LCD_Initializtion+0x516>
	else
	{
		//UARTPuts(USART1,"else Driver\r\n");
				/* read LCD ID fail, testing terminated */
				/* fatal error */
				while(1);
 80041a8:	e7fe      	b.n	80041a8 <LCD_Initializtion+0x514>
	}					
    delay_ms(50);   /* delay 50 ms */		
 80041aa:	2032      	movs	r0, #50	; 0x32
 80041ac:	f7ff fba2 	bl	80038f4 <delay_ms>
}
 80041b0:	bf00      	nop
 80041b2:	3738      	adds	r7, #56	; 0x38
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <LCD_Clear>:
* Output         : None
* Return         : None
* Attention	 : None
*******************************************************************************/
void LCD_Clear( unsigned short color )
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	4603      	mov	r3, r0
 80041c0:	80fb      	strh	r3, [r7, #6]
	unsigned int index=0;
 80041c2:	2300      	movs	r3, #0
 80041c4:	60fb      	str	r3, [r7, #12]
	
	LCD_SetCursor(0,0); 
 80041c6:	2100      	movs	r1, #0
 80041c8:	2000      	movs	r0, #0
 80041ca:	f7ff fd2b 	bl	8003c24 <LCD_SetCursor>
	
	Clr_Cs;  /* Cs low */
 80041ce:	4b10      	ldr	r3, [pc, #64]	; (8004210 <LCD_Clear+0x58>)
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	4a0f      	ldr	r2, [pc, #60]	; (8004210 <LCD_Clear+0x58>)
 80041d4:	f023 0302 	bic.w	r3, r3, #2
 80041d8:	60d3      	str	r3, [r2, #12]

        /* selected LCD register */ 
	LCD_WriteIndex(0x0022);
 80041da:	2022      	movs	r0, #34	; 0x22
 80041dc:	f7ff fc50 	bl	8003a80 <LCD_WriteIndex>

	for( index = 0; index < MAX_X * MAX_Y; index++ )
 80041e0:	2300      	movs	r3, #0
 80041e2:	60fb      	str	r3, [r7, #12]
 80041e4:	e006      	b.n	80041f4 <LCD_Clear+0x3c>
	{
                /* Write data */
		LCD_WriteData( color );
 80041e6:	88fb      	ldrh	r3, [r7, #6]
 80041e8:	4618      	mov	r0, r3
 80041ea:	f7ff fc75 	bl	8003ad8 <LCD_WriteData>
	for( index = 0; index < MAX_X * MAX_Y; index++ )
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	3301      	adds	r3, #1
 80041f2:	60fb      	str	r3, [r7, #12]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 80041fa:	d3f4      	bcc.n	80041e6 <LCD_Clear+0x2e>
	}

	Set_Cs;  /* Cs high */
 80041fc:	4b04      	ldr	r3, [pc, #16]	; (8004210 <LCD_Clear+0x58>)
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	4a03      	ldr	r2, [pc, #12]	; (8004210 <LCD_Clear+0x58>)
 8004202:	f043 0302 	orr.w	r3, r3, #2
 8004206:	60d3      	str	r3, [r2, #12]
}
 8004208:	bf00      	nop
 800420a:	3710      	adds	r7, #16
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	40010c00 	.word	0x40010c00

08004214 <LCD_SetPoint>:
* Output         : None
* Return         : None
* Attention		 : None
*******************************************************************************/
void LCD_SetPoint(uint16_t Xpos,uint16_t Ypos,uint16_t point)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	4603      	mov	r3, r0
 800421c:	80fb      	strh	r3, [r7, #6]
 800421e:	460b      	mov	r3, r1
 8004220:	80bb      	strh	r3, [r7, #4]
 8004222:	4613      	mov	r3, r2
 8004224:	807b      	strh	r3, [r7, #2]
	if( Xpos >= MAX_X || Ypos >= MAX_Y )
 8004226:	88fb      	ldrh	r3, [r7, #6]
 8004228:	2bef      	cmp	r3, #239	; 0xef
 800422a:	d816      	bhi.n	800425a <LCD_SetPoint+0x46>
 800422c:	88bb      	ldrh	r3, [r7, #4]
 800422e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004232:	d212      	bcs.n	800425a <LCD_SetPoint+0x46>
	{
		return;
	}
	LCD_SetCursor(MAX_X-1-Xpos,MAX_Y-1-Ypos); //Inverted position
 8004234:	88fb      	ldrh	r3, [r7, #6]
 8004236:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 800423a:	b29a      	uxth	r2, r3
 800423c:	88bb      	ldrh	r3, [r7, #4]
 800423e:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8004242:	3301      	adds	r3, #1
 8004244:	b29b      	uxth	r3, r3
 8004246:	4619      	mov	r1, r3
 8004248:	4610      	mov	r0, r2
 800424a:	f7ff fceb 	bl	8003c24 <LCD_SetCursor>
//	LCD_SetCursor(Xpos,Ypos); //Non Inverted position
	LCD_WriteReg(0x0022,point);
 800424e:	887b      	ldrh	r3, [r7, #2]
 8004250:	4619      	mov	r1, r3
 8004252:	2022      	movs	r0, #34	; 0x22
 8004254:	f7ff fca4 	bl	8003ba0 <LCD_WriteReg>
 8004258:	e000      	b.n	800425c <LCD_SetPoint+0x48>
		return;
 800425a:	bf00      	nop
}
 800425c:	3708      	adds	r7, #8
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}

08004262 <LCD_DrawLine>:
* Output         : None
* Return         : None
* Attention		 : None
*******************************************************************************/	 
void LCD_DrawLine( uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1 , uint16_t color )
{
 8004262:	b590      	push	{r4, r7, lr}
 8004264:	b085      	sub	sp, #20
 8004266:	af00      	add	r7, sp, #0
 8004268:	4604      	mov	r4, r0
 800426a:	4608      	mov	r0, r1
 800426c:	4611      	mov	r1, r2
 800426e:	461a      	mov	r2, r3
 8004270:	4623      	mov	r3, r4
 8004272:	80fb      	strh	r3, [r7, #6]
 8004274:	4603      	mov	r3, r0
 8004276:	80bb      	strh	r3, [r7, #4]
 8004278:	460b      	mov	r3, r1
 800427a:	807b      	strh	r3, [r7, #2]
 800427c:	4613      	mov	r3, r2
 800427e:	803b      	strh	r3, [r7, #0]
    short dx,dy;      /* The definition of the X Y axis increase the value of the variable */
    short temp;       

    if( x0 > x1 )     
 8004280:	88fa      	ldrh	r2, [r7, #6]
 8004282:	887b      	ldrh	r3, [r7, #2]
 8004284:	429a      	cmp	r2, r3
 8004286:	d905      	bls.n	8004294 <LCD_DrawLine+0x32>
    {
	    temp = x1;
 8004288:	887b      	ldrh	r3, [r7, #2]
 800428a:	81fb      	strh	r3, [r7, #14]
		x1 = x0;
 800428c:	88fb      	ldrh	r3, [r7, #6]
 800428e:	807b      	strh	r3, [r7, #2]
		x0 = temp;   
 8004290:	89fb      	ldrh	r3, [r7, #14]
 8004292:	80fb      	strh	r3, [r7, #6]
    }
    if( y0 > y1 )     
 8004294:	88ba      	ldrh	r2, [r7, #4]
 8004296:	883b      	ldrh	r3, [r7, #0]
 8004298:	429a      	cmp	r2, r3
 800429a:	d905      	bls.n	80042a8 <LCD_DrawLine+0x46>
    {
		temp = y1;
 800429c:	883b      	ldrh	r3, [r7, #0]
 800429e:	81fb      	strh	r3, [r7, #14]
		y1 = y0;
 80042a0:	88bb      	ldrh	r3, [r7, #4]
 80042a2:	803b      	strh	r3, [r7, #0]
		y0 = temp;   
 80042a4:	89fb      	ldrh	r3, [r7, #14]
 80042a6:	80bb      	strh	r3, [r7, #4]
    }
  
	dx = x1-x0;       
 80042a8:	887a      	ldrh	r2, [r7, #2]
 80042aa:	88fb      	ldrh	r3, [r7, #6]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	81bb      	strh	r3, [r7, #12]
	dy = y1-y0;       
 80042b2:	883a      	ldrh	r2, [r7, #0]
 80042b4:	88bb      	ldrh	r3, [r7, #4]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	817b      	strh	r3, [r7, #10]

    if( dx == 0 )     
 80042bc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d10d      	bne.n	80042e0 <LCD_DrawLine+0x7e>
    {
        do
        { 
            LCD_SetPoint(x0, y0, color);   
 80042c4:	8c3a      	ldrh	r2, [r7, #32]
 80042c6:	88b9      	ldrh	r1, [r7, #4]
 80042c8:	88fb      	ldrh	r3, [r7, #6]
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7ff ffa2 	bl	8004214 <LCD_SetPoint>
            y0++;
 80042d0:	88bb      	ldrh	r3, [r7, #4]
 80042d2:	3301      	adds	r3, #1
 80042d4:	80bb      	strh	r3, [r7, #4]
        }
        while( y1 >= y0 ); 
 80042d6:	883a      	ldrh	r2, [r7, #0]
 80042d8:	88bb      	ldrh	r3, [r7, #4]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d2f2      	bcs.n	80042c4 <LCD_DrawLine+0x62>
		return; 
 80042de:	e084      	b.n	80043ea <LCD_DrawLine+0x188>
    }
    if( dy == 0 )     
 80042e0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d10d      	bne.n	8004304 <LCD_DrawLine+0xa2>
    {
        do
        {
            LCD_SetPoint(x0, y0, color);
 80042e8:	8c3a      	ldrh	r2, [r7, #32]
 80042ea:	88b9      	ldrh	r1, [r7, #4]
 80042ec:	88fb      	ldrh	r3, [r7, #6]
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7ff ff90 	bl	8004214 <LCD_SetPoint>
            x0++;
 80042f4:	88fb      	ldrh	r3, [r7, #6]
 80042f6:	3301      	adds	r3, #1
 80042f8:	80fb      	strh	r3, [r7, #6]
        }
        while( x1 >= x0 ); 
 80042fa:	887a      	ldrh	r2, [r7, #2]
 80042fc:	88fb      	ldrh	r3, [r7, #6]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d2f2      	bcs.n	80042e8 <LCD_DrawLine+0x86>
		return;
 8004302:	e072      	b.n	80043ea <LCD_DrawLine+0x188>
    }
	
    if( dx > dy )                        
 8004304:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004308:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800430c:	429a      	cmp	r2, r3
 800430e:	dd36      	ble.n	800437e <LCD_DrawLine+0x11c>
    {
	    temp = 2 * dy - dx;                
 8004310:	897b      	ldrh	r3, [r7, #10]
 8004312:	005b      	lsls	r3, r3, #1
 8004314:	b29a      	uxth	r2, r3
 8004316:	89bb      	ldrh	r3, [r7, #12]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	b29b      	uxth	r3, r3
 800431c:	81fb      	strh	r3, [r7, #14]
        while( x0 != x1 )
 800431e:	e023      	b.n	8004368 <LCD_DrawLine+0x106>
        {
	        LCD_SetPoint(x0,y0,color);  
 8004320:	8c3a      	ldrh	r2, [r7, #32]
 8004322:	88b9      	ldrh	r1, [r7, #4]
 8004324:	88fb      	ldrh	r3, [r7, #6]
 8004326:	4618      	mov	r0, r3
 8004328:	f7ff ff74 	bl	8004214 <LCD_SetPoint>
	        x0++;                        
 800432c:	88fb      	ldrh	r3, [r7, #6]
 800432e:	3301      	adds	r3, #1
 8004330:	80fb      	strh	r3, [r7, #6]
	        if( temp > 0 )               
 8004332:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004336:	2b00      	cmp	r3, #0
 8004338:	dd0f      	ble.n	800435a <LCD_DrawLine+0xf8>
	        {
	            y0++;                    
 800433a:	88bb      	ldrh	r3, [r7, #4]
 800433c:	3301      	adds	r3, #1
 800433e:	80bb      	strh	r3, [r7, #4]
	            temp += 2 * dy - 2 * dx; 
 8004340:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004344:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	b29b      	uxth	r3, r3
 800434c:	005b      	lsls	r3, r3, #1
 800434e:	b29a      	uxth	r2, r3
 8004350:	89fb      	ldrh	r3, [r7, #14]
 8004352:	4413      	add	r3, r2
 8004354:	b29b      	uxth	r3, r3
 8004356:	81fb      	strh	r3, [r7, #14]
 8004358:	e006      	b.n	8004368 <LCD_DrawLine+0x106>
	 	    }
            else         
            {
			    temp += 2 * dy;          
 800435a:	897b      	ldrh	r3, [r7, #10]
 800435c:	005b      	lsls	r3, r3, #1
 800435e:	b29a      	uxth	r2, r3
 8004360:	89fb      	ldrh	r3, [r7, #14]
 8004362:	4413      	add	r3, r2
 8004364:	b29b      	uxth	r3, r3
 8004366:	81fb      	strh	r3, [r7, #14]
        while( x0 != x1 )
 8004368:	88fa      	ldrh	r2, [r7, #6]
 800436a:	887b      	ldrh	r3, [r7, #2]
 800436c:	429a      	cmp	r2, r3
 800436e:	d1d7      	bne.n	8004320 <LCD_DrawLine+0xbe>
			}       
        }
        LCD_SetPoint(x0,y0,color);
 8004370:	8c3a      	ldrh	r2, [r7, #32]
 8004372:	88b9      	ldrh	r1, [r7, #4]
 8004374:	88fb      	ldrh	r3, [r7, #6]
 8004376:	4618      	mov	r0, r3
 8004378:	f7ff ff4c 	bl	8004214 <LCD_SetPoint>
 800437c:	e035      	b.n	80043ea <LCD_DrawLine+0x188>
    }  
    else
    {
	    temp = 2 * dx - dy;                     
 800437e:	89bb      	ldrh	r3, [r7, #12]
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	b29a      	uxth	r2, r3
 8004384:	897b      	ldrh	r3, [r7, #10]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	b29b      	uxth	r3, r3
 800438a:	81fb      	strh	r3, [r7, #14]
        while( y0 != y1 )
 800438c:	e023      	b.n	80043d6 <LCD_DrawLine+0x174>
        {
	 	    LCD_SetPoint(x0,y0,color);     
 800438e:	8c3a      	ldrh	r2, [r7, #32]
 8004390:	88b9      	ldrh	r1, [r7, #4]
 8004392:	88fb      	ldrh	r3, [r7, #6]
 8004394:	4618      	mov	r0, r3
 8004396:	f7ff ff3d 	bl	8004214 <LCD_SetPoint>
            y0++;                 
 800439a:	88bb      	ldrh	r3, [r7, #4]
 800439c:	3301      	adds	r3, #1
 800439e:	80bb      	strh	r3, [r7, #4]
            if( temp > 0 )           
 80043a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	dd0f      	ble.n	80043c8 <LCD_DrawLine+0x166>
            {
                x0++;               
 80043a8:	88fb      	ldrh	r3, [r7, #6]
 80043aa:	3301      	adds	r3, #1
 80043ac:	80fb      	strh	r3, [r7, #6]
                temp+=2*dy-2*dx; 
 80043ae:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80043b2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	005b      	lsls	r3, r3, #1
 80043bc:	b29a      	uxth	r2, r3
 80043be:	89fb      	ldrh	r3, [r7, #14]
 80043c0:	4413      	add	r3, r2
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	81fb      	strh	r3, [r7, #14]
 80043c6:	e006      	b.n	80043d6 <LCD_DrawLine+0x174>
            }
            else
			{
                temp += 2 * dy;
 80043c8:	897b      	ldrh	r3, [r7, #10]
 80043ca:	005b      	lsls	r3, r3, #1
 80043cc:	b29a      	uxth	r2, r3
 80043ce:	89fb      	ldrh	r3, [r7, #14]
 80043d0:	4413      	add	r3, r2
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	81fb      	strh	r3, [r7, #14]
        while( y0 != y1 )
 80043d6:	88ba      	ldrh	r2, [r7, #4]
 80043d8:	883b      	ldrh	r3, [r7, #0]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d1d7      	bne.n	800438e <LCD_DrawLine+0x12c>
			}
        } 
        LCD_SetPoint(x0,y0,color);
 80043de:	8c3a      	ldrh	r2, [r7, #32]
 80043e0:	88b9      	ldrh	r1, [r7, #4]
 80043e2:	88fb      	ldrh	r3, [r7, #6]
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7ff ff15 	bl	8004214 <LCD_SetPoint>
	}
} 
 80043ea:	3714      	adds	r7, #20
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd90      	pop	{r4, r7, pc}

080043f0 <PutCharArial_18pt>:
* Output         : None
* Return         : None
* Attention		 : None
*******************************************************************************/
uint8_t PutCharArial_18pt( uint16_t Xpos, uint16_t Ypos, uint8_t ASCI, uint16_t charColor, uint16_t bkColor )
{
 80043f0:	b590      	push	{r4, r7, lr}
 80043f2:	b095      	sub	sp, #84	; 0x54
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	4604      	mov	r4, r0
 80043f8:	4608      	mov	r0, r1
 80043fa:	4611      	mov	r1, r2
 80043fc:	461a      	mov	r2, r3
 80043fe:	4623      	mov	r3, r4
 8004400:	80fb      	strh	r3, [r7, #6]
 8004402:	4603      	mov	r3, r0
 8004404:	80bb      	strh	r3, [r7, #4]
 8004406:	460b      	mov	r3, r1
 8004408:	70fb      	strb	r3, [r7, #3]
 800440a:	4613      	mov	r3, r2
 800440c:	803b      	strh	r3, [r7, #0]
	char str[50];
	uint16_t i, j,k,OffsetByte=0;
 800440e:	2300      	movs	r3, #0
 8004410:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	uint16_t FontInfo[2];	//FontInfo[0] -> Char width in bits ,FontInfo[1] -> Offset in bytes
	uint8_t Width_Data;
	uint8_t  WidthByte_Index,WidthByte_Index_Temp;
	
	if(ASCI==' ') //Space
 8004414:	78fb      	ldrb	r3, [r7, #3]
 8004416:	2b20      	cmp	r3, #32
 8004418:	d105      	bne.n	8004426 <PutCharArial_18pt+0x36>
	{
		FontInfo[0]=CHAR_SPACE_18PT;
 800441a:	2302      	movs	r3, #2
 800441c:	81bb      	strh	r3, [r7, #12]
		WidthByte_Index=1;
 800441e:	2301      	movs	r3, #1
 8004420:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8004424:	e016      	b.n	8004454 <PutCharArial_18pt+0x64>
	}
	else
	{
		GetFontInfo_18pt(FontInfo,ASCI);  /* get font data */
 8004426:	78fa      	ldrb	r2, [r7, #3]
 8004428:	f107 030c 	add.w	r3, r7, #12
 800442c:	4611      	mov	r1, r2
 800442e:	4618      	mov	r0, r3
 8004430:	f7ff fa06 	bl	8003840 <GetFontInfo_18pt>
		WidthByte_Index=FontInfo[0]/8;
 8004434:	89bb      	ldrh	r3, [r7, #12]
 8004436:	08db      	lsrs	r3, r3, #3
 8004438:	b29b      	uxth	r3, r3
 800443a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		if(FontInfo[0]%8)	WidthByte_Index++;
 800443e:	89bb      	ldrh	r3, [r7, #12]
 8004440:	f003 0307 	and.w	r3, r3, #7
 8004444:	b29b      	uxth	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d004      	beq.n	8004454 <PutCharArial_18pt+0x64>
 800444a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800444e:	3301      	adds	r3, #1
 8004450:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	}
	for( i=0; i<ARIALFONT_HIGHT_18PT; i++ )
 8004454:	2300      	movs	r3, #0
 8004456:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800445a:	e072      	b.n	8004542 <PutCharArial_18pt+0x152>
	{
		j=0;
 800445c:	2300      	movs	r3, #0
 800445e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		WidthByte_Index_Temp=WidthByte_Index;
 8004462:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004466:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
		while(WidthByte_Index_Temp)
 800446a:	e061      	b.n	8004530 <PutCharArial_18pt+0x140>
		{
			if(ASCI==' ') //Space
 800446c:	78fb      	ldrb	r3, [r7, #3]
 800446e:	2b20      	cmp	r3, #32
 8004470:	d103      	bne.n	800447a <PutCharArial_18pt+0x8a>
				Width_Data=0;
 8004472:	2300      	movs	r3, #0
 8004474:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8004478:	e008      	b.n	800448c <PutCharArial_18pt+0x9c>
			else
				Width_Data=arial_18pt[FontInfo[1]+OffsetByte];
 800447a:	89fb      	ldrh	r3, [r7, #14]
 800447c:	461a      	mov	r2, r3
 800447e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004482:	4413      	add	r3, r2
 8004484:	4a34      	ldr	r2, [pc, #208]	; (8004558 <PutCharArial_18pt+0x168>)
 8004486:	5cd3      	ldrb	r3, [r2, r3]
 8004488:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			for(k=0;k<8;k++)
 800448c:	2300      	movs	r3, #0
 800448e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004492:	e03d      	b.n	8004510 <PutCharArial_18pt+0x120>
			{
				if((Width_Data & (1<<(7-k))) !=0 )
 8004494:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8004498:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800449c:	f1c3 0307 	rsb	r3, r3, #7
 80044a0:	fa42 f303 	asr.w	r3, r2, r3
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00e      	beq.n	80044ca <PutCharArial_18pt+0xda>
				{
						LCD_SetPoint( Xpos + j, Ypos + i, charColor );  /* Character color */
 80044ac:	88fa      	ldrh	r2, [r7, #6]
 80044ae:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80044b2:	4413      	add	r3, r2
 80044b4:	b298      	uxth	r0, r3
 80044b6:	88ba      	ldrh	r2, [r7, #4]
 80044b8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80044bc:	4413      	add	r3, r2
 80044be:	b29b      	uxth	r3, r3
 80044c0:	883a      	ldrh	r2, [r7, #0]
 80044c2:	4619      	mov	r1, r3
 80044c4:	f7ff fea6 	bl	8004214 <LCD_SetPoint>
 80044c8:	e012      	b.n	80044f0 <PutCharArial_18pt+0x100>
				}
				else
				{
					if(bkColor==NO_BG){}
 80044ca:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d00e      	beq.n	80044f0 <PutCharArial_18pt+0x100>
					else
					{
						LCD_SetPoint( Xpos + j, Ypos + i, bkColor );  /* Background color */
 80044d2:	88fa      	ldrh	r2, [r7, #6]
 80044d4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80044d8:	4413      	add	r3, r2
 80044da:	b298      	uxth	r0, r3
 80044dc:	88ba      	ldrh	r2, [r7, #4]
 80044de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80044e2:	4413      	add	r3, r2
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	f8b7 2060 	ldrh.w	r2, [r7, #96]	; 0x60
 80044ea:	4619      	mov	r1, r3
 80044ec:	f7ff fe92 	bl	8004214 <LCD_SetPoint>
					}
				}
				j++;
 80044f0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80044f4:	3301      	adds	r3, #1
 80044f6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
				if(j>FontInfo[0]+CHAR_SPACE_18PT)	break;
 80044fa:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80044fe:	89bb      	ldrh	r3, [r7, #12]
 8004500:	3302      	adds	r3, #2
 8004502:	429a      	cmp	r2, r3
 8004504:	dc09      	bgt.n	800451a <PutCharArial_18pt+0x12a>
			for(k=0;k<8;k++)
 8004506:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800450a:	3301      	adds	r3, #1
 800450c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004510:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004514:	2b07      	cmp	r3, #7
 8004516:	d9bd      	bls.n	8004494 <PutCharArial_18pt+0xa4>
 8004518:	e000      	b.n	800451c <PutCharArial_18pt+0x12c>
				if(j>FontInfo[0]+CHAR_SPACE_18PT)	break;
 800451a:	bf00      	nop
			}
			OffsetByte++;
 800451c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004520:	3301      	adds	r3, #1
 8004522:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
			WidthByte_Index_Temp--;
 8004526:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800452a:	3b01      	subs	r3, #1
 800452c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
		while(WidthByte_Index_Temp)
 8004530:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8004534:	2b00      	cmp	r3, #0
 8004536:	d199      	bne.n	800446c <PutCharArial_18pt+0x7c>
	for( i=0; i<ARIALFONT_HIGHT_18PT; i++ )
 8004538:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800453c:	3301      	adds	r3, #1
 800453e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004542:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004546:	2b17      	cmp	r3, #23
 8004548:	d988      	bls.n	800445c <PutCharArial_18pt+0x6c>
		}
	}
	return FontInfo[0];
 800454a:	89bb      	ldrh	r3, [r7, #12]
 800454c:	b2db      	uxtb	r3, r3
}
 800454e:	4618      	mov	r0, r3
 8004550:	3754      	adds	r7, #84	; 0x54
 8004552:	46bd      	mov	sp, r7
 8004554:	bd90      	pop	{r4, r7, pc}
 8004556:	bf00      	nop
 8004558:	08005734 	.word	0x08005734

0800455c <GUI_TextArial_18pt>:
* Output         : None
* Return         : None
* Attention		 : None
*******************************************************************************/
void GUI_TextArial_18pt(uint16_t Xpos, uint16_t Ypos, uint8_t *str,uint16_t Color, uint16_t bkColor)
{
 800455c:	b590      	push	{r4, r7, lr}
 800455e:	b089      	sub	sp, #36	; 0x24
 8004560:	af02      	add	r7, sp, #8
 8004562:	60ba      	str	r2, [r7, #8]
 8004564:	461a      	mov	r2, r3
 8004566:	4603      	mov	r3, r0
 8004568:	81fb      	strh	r3, [r7, #14]
 800456a:	460b      	mov	r3, r1
 800456c:	81bb      	strh	r3, [r7, #12]
 800456e:	4613      	mov	r3, r2
 8004570:	80fb      	strh	r3, [r7, #6]
    uint8_t TempChar;
	uint8_t CharWidth;
    do
    {
        TempChar = *str++;  
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	1c5a      	adds	r2, r3, #1
 8004576:	60ba      	str	r2, [r7, #8]
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	75fb      	strb	r3, [r7, #23]
        CharWidth=PutCharArial_18pt( Xpos, Ypos, TempChar, Color, bkColor );    
 800457c:	88fc      	ldrh	r4, [r7, #6]
 800457e:	7dfa      	ldrb	r2, [r7, #23]
 8004580:	89b9      	ldrh	r1, [r7, #12]
 8004582:	89f8      	ldrh	r0, [r7, #14]
 8004584:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004586:	9300      	str	r3, [sp, #0]
 8004588:	4623      	mov	r3, r4
 800458a:	f7ff ff31 	bl	80043f0 <PutCharArial_18pt>
 800458e:	4603      	mov	r3, r0
 8004590:	75bb      	strb	r3, [r7, #22]
        if( Xpos < MAX_X - 8 )
 8004592:	89fb      	ldrh	r3, [r7, #14]
 8004594:	2be7      	cmp	r3, #231	; 0xe7
 8004596:	d807      	bhi.n	80045a8 <GUI_TextArial_18pt+0x4c>
        {
            Xpos += CharWidth+CHAR_SPACE_18PT;
 8004598:	7dbb      	ldrb	r3, [r7, #22]
 800459a:	b29a      	uxth	r2, r3
 800459c:	89fb      	ldrh	r3, [r7, #14]
 800459e:	4413      	add	r3, r2
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	3302      	adds	r3, #2
 80045a4:	81fb      	strh	r3, [r7, #14]
 80045a6:	e00d      	b.n	80045c4 <GUI_TextArial_18pt+0x68>
        } 
        else if ( Ypos < MAX_Y - ARIALFONT_HIGHT_18PT )
 80045a8:	89bb      	ldrh	r3, [r7, #12]
 80045aa:	f5b3 7f94 	cmp.w	r3, #296	; 0x128
 80045ae:	d205      	bcs.n	80045bc <GUI_TextArial_18pt+0x60>
        {
            Xpos = 0;
 80045b0:	2300      	movs	r3, #0
 80045b2:	81fb      	strh	r3, [r7, #14]
            Ypos += ARIALFONT_HIGHT_18PT;
 80045b4:	89bb      	ldrh	r3, [r7, #12]
 80045b6:	3318      	adds	r3, #24
 80045b8:	81bb      	strh	r3, [r7, #12]
 80045ba:	e003      	b.n	80045c4 <GUI_TextArial_18pt+0x68>
        }   
        else
        {
            Xpos = 0;
 80045bc:	2300      	movs	r3, #0
 80045be:	81fb      	strh	r3, [r7, #14]
            Ypos = 0;
 80045c0:	2300      	movs	r3, #0
 80045c2:	81bb      	strh	r3, [r7, #12]
        }    
    }
    while ( *str != 0 );
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d1d2      	bne.n	8004572 <GUI_TextArial_18pt+0x16>
}
 80045cc:	bf00      	nop
 80045ce:	bf00      	nop
 80045d0:	371c      	adds	r7, #28
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd90      	pop	{r4, r7, pc}
	...

080045d8 <PutCharArial_22pt>:
* Output         : None
* Return         : None
* Attention		 : None
*******************************************************************************/
uint8_t PutCharArial_22pt( uint16_t Xpos, uint16_t Ypos, uint8_t ASCI, uint16_t charColor, uint16_t bkColor )
{
 80045d8:	b590      	push	{r4, r7, lr}
 80045da:	b095      	sub	sp, #84	; 0x54
 80045dc:	af00      	add	r7, sp, #0
 80045de:	4604      	mov	r4, r0
 80045e0:	4608      	mov	r0, r1
 80045e2:	4611      	mov	r1, r2
 80045e4:	461a      	mov	r2, r3
 80045e6:	4623      	mov	r3, r4
 80045e8:	80fb      	strh	r3, [r7, #6]
 80045ea:	4603      	mov	r3, r0
 80045ec:	80bb      	strh	r3, [r7, #4]
 80045ee:	460b      	mov	r3, r1
 80045f0:	70fb      	strb	r3, [r7, #3]
 80045f2:	4613      	mov	r3, r2
 80045f4:	803b      	strh	r3, [r7, #0]
	char str[50];
	uint16_t i, j,k,OffsetByte=0;
 80045f6:	2300      	movs	r3, #0
 80045f8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	uint16_t FontInfo[2];	//FontInfo[0] -> Char width in bits ,FontInfo[1] -> Offset in bytes
	uint8_t Width_Data;
	uint8_t  WidthByte_Index,WidthByte_Index_Temp;
	
	if(ASCI==' ') //Space
 80045fc:	78fb      	ldrb	r3, [r7, #3]
 80045fe:	2b20      	cmp	r3, #32
 8004600:	d105      	bne.n	800460e <PutCharArial_22pt+0x36>
	{
		FontInfo[0]=CHAR_SPACE_22PT;
 8004602:	2302      	movs	r3, #2
 8004604:	81bb      	strh	r3, [r7, #12]
		WidthByte_Index=1;
 8004606:	2301      	movs	r3, #1
 8004608:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800460c:	e016      	b.n	800463c <PutCharArial_22pt+0x64>
	}
	else
	{
		GetFontInfo_22pt(FontInfo,ASCI);  /* get font data */
 800460e:	78fa      	ldrb	r2, [r7, #3]
 8004610:	f107 030c 	add.w	r3, r7, #12
 8004614:	4611      	mov	r1, r2
 8004616:	4618      	mov	r0, r3
 8004618:	f7ff f930 	bl	800387c <GetFontInfo_22pt>
		WidthByte_Index=FontInfo[0]/8;
 800461c:	89bb      	ldrh	r3, [r7, #12]
 800461e:	08db      	lsrs	r3, r3, #3
 8004620:	b29b      	uxth	r3, r3
 8004622:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		if(FontInfo[0]%8)	WidthByte_Index++;
 8004626:	89bb      	ldrh	r3, [r7, #12]
 8004628:	f003 0307 	and.w	r3, r3, #7
 800462c:	b29b      	uxth	r3, r3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d004      	beq.n	800463c <PutCharArial_22pt+0x64>
 8004632:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004636:	3301      	adds	r3, #1
 8004638:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	}
	for( i=0; i<ARIALFONT_HIGHT_22PT; i++ )
 800463c:	2300      	movs	r3, #0
 800463e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004642:	e072      	b.n	800472a <PutCharArial_22pt+0x152>
	{
		j=0;
 8004644:	2300      	movs	r3, #0
 8004646:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		WidthByte_Index_Temp=WidthByte_Index;
 800464a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800464e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
		while(WidthByte_Index_Temp)
 8004652:	e061      	b.n	8004718 <PutCharArial_22pt+0x140>
		{
			if(ASCI==' ') //Space
 8004654:	78fb      	ldrb	r3, [r7, #3]
 8004656:	2b20      	cmp	r3, #32
 8004658:	d103      	bne.n	8004662 <PutCharArial_22pt+0x8a>
				Width_Data=0;
 800465a:	2300      	movs	r3, #0
 800465c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8004660:	e008      	b.n	8004674 <PutCharArial_22pt+0x9c>
			else
				Width_Data=arial_22pt[FontInfo[1]+OffsetByte];
 8004662:	89fb      	ldrh	r3, [r7, #14]
 8004664:	461a      	mov	r2, r3
 8004666:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800466a:	4413      	add	r3, r2
 800466c:	4a34      	ldr	r2, [pc, #208]	; (8004740 <PutCharArial_22pt+0x168>)
 800466e:	5cd3      	ldrb	r3, [r2, r3]
 8004670:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			for(k=0;k<8;k++)
 8004674:	2300      	movs	r3, #0
 8004676:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800467a:	e03d      	b.n	80046f8 <PutCharArial_22pt+0x120>
			{
				if((Width_Data & (1<<(7-k))) !=0 )
 800467c:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8004680:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004684:	f1c3 0307 	rsb	r3, r3, #7
 8004688:	fa42 f303 	asr.w	r3, r2, r3
 800468c:	f003 0301 	and.w	r3, r3, #1
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00e      	beq.n	80046b2 <PutCharArial_22pt+0xda>
				{
						LCD_SetPoint( Xpos + j, Ypos + i, charColor );  /* Character color */
 8004694:	88fa      	ldrh	r2, [r7, #6]
 8004696:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800469a:	4413      	add	r3, r2
 800469c:	b298      	uxth	r0, r3
 800469e:	88ba      	ldrh	r2, [r7, #4]
 80046a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80046a4:	4413      	add	r3, r2
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	883a      	ldrh	r2, [r7, #0]
 80046aa:	4619      	mov	r1, r3
 80046ac:	f7ff fdb2 	bl	8004214 <LCD_SetPoint>
 80046b0:	e012      	b.n	80046d8 <PutCharArial_22pt+0x100>
				}
				else
				{
					if(bkColor==NO_BG){}
 80046b2:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d00e      	beq.n	80046d8 <PutCharArial_22pt+0x100>
					else
					{
						LCD_SetPoint( Xpos + j, Ypos + i, bkColor );  /* Background color */
 80046ba:	88fa      	ldrh	r2, [r7, #6]
 80046bc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80046c0:	4413      	add	r3, r2
 80046c2:	b298      	uxth	r0, r3
 80046c4:	88ba      	ldrh	r2, [r7, #4]
 80046c6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80046ca:	4413      	add	r3, r2
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	f8b7 2060 	ldrh.w	r2, [r7, #96]	; 0x60
 80046d2:	4619      	mov	r1, r3
 80046d4:	f7ff fd9e 	bl	8004214 <LCD_SetPoint>
					}
				}
				j++;
 80046d8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80046dc:	3301      	adds	r3, #1
 80046de:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
				if(j>FontInfo[0]+CHAR_SPACE_22PT)	break;
 80046e2:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80046e6:	89bb      	ldrh	r3, [r7, #12]
 80046e8:	3302      	adds	r3, #2
 80046ea:	429a      	cmp	r2, r3
 80046ec:	dc09      	bgt.n	8004702 <PutCharArial_22pt+0x12a>
			for(k=0;k<8;k++)
 80046ee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80046f2:	3301      	adds	r3, #1
 80046f4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80046f8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80046fc:	2b07      	cmp	r3, #7
 80046fe:	d9bd      	bls.n	800467c <PutCharArial_22pt+0xa4>
 8004700:	e000      	b.n	8004704 <PutCharArial_22pt+0x12c>
				if(j>FontInfo[0]+CHAR_SPACE_22PT)	break;
 8004702:	bf00      	nop
			}
			OffsetByte++;
 8004704:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004708:	3301      	adds	r3, #1
 800470a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
			WidthByte_Index_Temp--;
 800470e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8004712:	3b01      	subs	r3, #1
 8004714:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
		while(WidthByte_Index_Temp)
 8004718:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800471c:	2b00      	cmp	r3, #0
 800471e:	d199      	bne.n	8004654 <PutCharArial_22pt+0x7c>
	for( i=0; i<ARIALFONT_HIGHT_22PT; i++ )
 8004720:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004724:	3301      	adds	r3, #1
 8004726:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800472a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800472e:	2b1d      	cmp	r3, #29
 8004730:	d988      	bls.n	8004644 <PutCharArial_22pt+0x6c>
		}
	}
	return FontInfo[0];
 8004732:	89bb      	ldrh	r3, [r7, #12]
 8004734:	b2db      	uxtb	r3, r3
}
 8004736:	4618      	mov	r0, r3
 8004738:	3754      	adds	r7, #84	; 0x54
 800473a:	46bd      	mov	sp, r7
 800473c:	bd90      	pop	{r4, r7, pc}
 800473e:	bf00      	nop
 8004740:	080068b4 	.word	0x080068b4

08004744 <PutCharArial_30pt>:
* Output         : None
* Return         : None
* Attention		 : None
*******************************************************************************/
uint8_t PutCharArial_30pt( uint16_t Xpos, uint16_t Ypos, uint8_t ASCI, uint16_t charColor, uint16_t bkColor )
{
 8004744:	b590      	push	{r4, r7, lr}
 8004746:	b095      	sub	sp, #84	; 0x54
 8004748:	af00      	add	r7, sp, #0
 800474a:	4604      	mov	r4, r0
 800474c:	4608      	mov	r0, r1
 800474e:	4611      	mov	r1, r2
 8004750:	461a      	mov	r2, r3
 8004752:	4623      	mov	r3, r4
 8004754:	80fb      	strh	r3, [r7, #6]
 8004756:	4603      	mov	r3, r0
 8004758:	80bb      	strh	r3, [r7, #4]
 800475a:	460b      	mov	r3, r1
 800475c:	70fb      	strb	r3, [r7, #3]
 800475e:	4613      	mov	r3, r2
 8004760:	803b      	strh	r3, [r7, #0]
	char str[50];
	uint16_t i, j,k,OffsetByte=0;
 8004762:	2300      	movs	r3, #0
 8004764:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	uint16_t FontInfo[2];	//FontInfo[0] -> Char width in bits ,FontInfo[1] -> Offset in bytes
	uint8_t Width_Data;
	uint8_t  WidthByte_Index,WidthByte_Index_Temp;
	
	if(ASCI==' ') //Space
 8004768:	78fb      	ldrb	r3, [r7, #3]
 800476a:	2b20      	cmp	r3, #32
 800476c:	d105      	bne.n	800477a <PutCharArial_30pt+0x36>
	{
		FontInfo[0]=CHAR_SPACE_30PT;
 800476e:	2303      	movs	r3, #3
 8004770:	81bb      	strh	r3, [r7, #12]
		WidthByte_Index=1;
 8004772:	2301      	movs	r3, #1
 8004774:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8004778:	e016      	b.n	80047a8 <PutCharArial_30pt+0x64>
	}
	else
	{
		GetFontInfo_30pt(FontInfo,ASCI);  /* get font data */
 800477a:	78fa      	ldrb	r2, [r7, #3]
 800477c:	f107 030c 	add.w	r3, r7, #12
 8004780:	4611      	mov	r1, r2
 8004782:	4618      	mov	r0, r3
 8004784:	f7ff f898 	bl	80038b8 <GetFontInfo_30pt>
		WidthByte_Index=FontInfo[0]/8;
 8004788:	89bb      	ldrh	r3, [r7, #12]
 800478a:	08db      	lsrs	r3, r3, #3
 800478c:	b29b      	uxth	r3, r3
 800478e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		if(FontInfo[0]%8)	WidthByte_Index++;
 8004792:	89bb      	ldrh	r3, [r7, #12]
 8004794:	f003 0307 	and.w	r3, r3, #7
 8004798:	b29b      	uxth	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d004      	beq.n	80047a8 <PutCharArial_30pt+0x64>
 800479e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80047a2:	3301      	adds	r3, #1
 80047a4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	}
	for( i=0; i<ARIALFONT_HIGHT_30PT; i++ )
 80047a8:	2300      	movs	r3, #0
 80047aa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80047ae:	e072      	b.n	8004896 <PutCharArial_30pt+0x152>
	{
		j=0;
 80047b0:	2300      	movs	r3, #0
 80047b2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		WidthByte_Index_Temp=WidthByte_Index;
 80047b6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80047ba:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
		while(WidthByte_Index_Temp)
 80047be:	e061      	b.n	8004884 <PutCharArial_30pt+0x140>
		{
			if(ASCI==' ') //Space
 80047c0:	78fb      	ldrb	r3, [r7, #3]
 80047c2:	2b20      	cmp	r3, #32
 80047c4:	d103      	bne.n	80047ce <PutCharArial_30pt+0x8a>
				Width_Data=0;
 80047c6:	2300      	movs	r3, #0
 80047c8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80047cc:	e008      	b.n	80047e0 <PutCharArial_30pt+0x9c>
			else
				Width_Data=arial_30pt[FontInfo[1]+OffsetByte];
 80047ce:	89fb      	ldrh	r3, [r7, #14]
 80047d0:	461a      	mov	r2, r3
 80047d2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80047d6:	4413      	add	r3, r2
 80047d8:	4a34      	ldr	r2, [pc, #208]	; (80048ac <PutCharArial_30pt+0x168>)
 80047da:	5cd3      	ldrb	r3, [r2, r3]
 80047dc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			for(k=0;k<8;k++)
 80047e0:	2300      	movs	r3, #0
 80047e2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80047e6:	e03d      	b.n	8004864 <PutCharArial_30pt+0x120>
			{
				if((Width_Data & (1<<(7-k))) !=0 )
 80047e8:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80047ec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80047f0:	f1c3 0307 	rsb	r3, r3, #7
 80047f4:	fa42 f303 	asr.w	r3, r2, r3
 80047f8:	f003 0301 	and.w	r3, r3, #1
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00e      	beq.n	800481e <PutCharArial_30pt+0xda>
				{
						LCD_SetPoint( Xpos + j, Ypos + i, charColor );  /* Character color */
 8004800:	88fa      	ldrh	r2, [r7, #6]
 8004802:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004806:	4413      	add	r3, r2
 8004808:	b298      	uxth	r0, r3
 800480a:	88ba      	ldrh	r2, [r7, #4]
 800480c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004810:	4413      	add	r3, r2
 8004812:	b29b      	uxth	r3, r3
 8004814:	883a      	ldrh	r2, [r7, #0]
 8004816:	4619      	mov	r1, r3
 8004818:	f7ff fcfc 	bl	8004214 <LCD_SetPoint>
 800481c:	e012      	b.n	8004844 <PutCharArial_30pt+0x100>
				}
				else
				{
					if(bkColor==NO_BG){}
 800481e:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8004822:	2b01      	cmp	r3, #1
 8004824:	d00e      	beq.n	8004844 <PutCharArial_30pt+0x100>
					else
					{
						LCD_SetPoint( Xpos + j, Ypos + i, bkColor );  /* Background color */
 8004826:	88fa      	ldrh	r2, [r7, #6]
 8004828:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800482c:	4413      	add	r3, r2
 800482e:	b298      	uxth	r0, r3
 8004830:	88ba      	ldrh	r2, [r7, #4]
 8004832:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004836:	4413      	add	r3, r2
 8004838:	b29b      	uxth	r3, r3
 800483a:	f8b7 2060 	ldrh.w	r2, [r7, #96]	; 0x60
 800483e:	4619      	mov	r1, r3
 8004840:	f7ff fce8 	bl	8004214 <LCD_SetPoint>
					}
				}
				j++;
 8004844:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004848:	3301      	adds	r3, #1
 800484a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
				if(j>FontInfo[0]+CHAR_SPACE_30PT)	break;
 800484e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8004852:	89bb      	ldrh	r3, [r7, #12]
 8004854:	3303      	adds	r3, #3
 8004856:	429a      	cmp	r2, r3
 8004858:	dc09      	bgt.n	800486e <PutCharArial_30pt+0x12a>
			for(k=0;k<8;k++)
 800485a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800485e:	3301      	adds	r3, #1
 8004860:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004864:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004868:	2b07      	cmp	r3, #7
 800486a:	d9bd      	bls.n	80047e8 <PutCharArial_30pt+0xa4>
 800486c:	e000      	b.n	8004870 <PutCharArial_30pt+0x12c>
				if(j>FontInfo[0]+CHAR_SPACE_30PT)	break;
 800486e:	bf00      	nop
			}
			OffsetByte++;
 8004870:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004874:	3301      	adds	r3, #1
 8004876:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
			WidthByte_Index_Temp--;
 800487a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800487e:	3b01      	subs	r3, #1
 8004880:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
		while(WidthByte_Index_Temp)
 8004884:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8004888:	2b00      	cmp	r3, #0
 800488a:	d199      	bne.n	80047c0 <PutCharArial_30pt+0x7c>
	for( i=0; i<ARIALFONT_HIGHT_30PT; i++ )
 800488c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004890:	3301      	adds	r3, #1
 8004892:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004896:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800489a:	2b27      	cmp	r3, #39	; 0x27
 800489c:	d988      	bls.n	80047b0 <PutCharArial_30pt+0x6c>
		}
	}
	return FontInfo[0];
 800489e:	89bb      	ldrh	r3, [r7, #12]
 80048a0:	b2db      	uxtb	r3, r3
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3754      	adds	r7, #84	; 0x54
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd90      	pop	{r4, r7, pc}
 80048aa:	bf00      	nop
 80048ac:	08008180 	.word	0x08008180

080048b0 <GUI_TextArial_30pt>:
* Output         : None
* Return         : None
* Attention		 : None
*******************************************************************************/
void GUI_TextArial_30pt(uint16_t Xpos, uint16_t Ypos, uint8_t *str,uint16_t Color, uint16_t bkColor)
{
 80048b0:	b590      	push	{r4, r7, lr}
 80048b2:	b089      	sub	sp, #36	; 0x24
 80048b4:	af02      	add	r7, sp, #8
 80048b6:	60ba      	str	r2, [r7, #8]
 80048b8:	461a      	mov	r2, r3
 80048ba:	4603      	mov	r3, r0
 80048bc:	81fb      	strh	r3, [r7, #14]
 80048be:	460b      	mov	r3, r1
 80048c0:	81bb      	strh	r3, [r7, #12]
 80048c2:	4613      	mov	r3, r2
 80048c4:	80fb      	strh	r3, [r7, #6]
    uint8_t TempChar;
	uint8_t CharWidth;
    do
    {
        TempChar = *str++;  
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	1c5a      	adds	r2, r3, #1
 80048ca:	60ba      	str	r2, [r7, #8]
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	75fb      	strb	r3, [r7, #23]
        CharWidth=PutCharArial_30pt( Xpos, Ypos, TempChar, Color, bkColor );    
 80048d0:	88fc      	ldrh	r4, [r7, #6]
 80048d2:	7dfa      	ldrb	r2, [r7, #23]
 80048d4:	89b9      	ldrh	r1, [r7, #12]
 80048d6:	89f8      	ldrh	r0, [r7, #14]
 80048d8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80048da:	9300      	str	r3, [sp, #0]
 80048dc:	4623      	mov	r3, r4
 80048de:	f7ff ff31 	bl	8004744 <PutCharArial_30pt>
 80048e2:	4603      	mov	r3, r0
 80048e4:	75bb      	strb	r3, [r7, #22]
        if( Xpos < MAX_X - 8 )
 80048e6:	89fb      	ldrh	r3, [r7, #14]
 80048e8:	2be7      	cmp	r3, #231	; 0xe7
 80048ea:	d807      	bhi.n	80048fc <GUI_TextArial_30pt+0x4c>
        {
            Xpos += CharWidth+CHAR_SPACE_30PT;
 80048ec:	7dbb      	ldrb	r3, [r7, #22]
 80048ee:	b29a      	uxth	r2, r3
 80048f0:	89fb      	ldrh	r3, [r7, #14]
 80048f2:	4413      	add	r3, r2
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	3303      	adds	r3, #3
 80048f8:	81fb      	strh	r3, [r7, #14]
 80048fa:	e00d      	b.n	8004918 <GUI_TextArial_30pt+0x68>
        } 
        else if ( Ypos < MAX_Y - ARIALFONT_HIGHT_30PT )
 80048fc:	89bb      	ldrh	r3, [r7, #12]
 80048fe:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8004902:	d205      	bcs.n	8004910 <GUI_TextArial_30pt+0x60>
        {
            Xpos = 0;
 8004904:	2300      	movs	r3, #0
 8004906:	81fb      	strh	r3, [r7, #14]
            Ypos += ARIALFONT_HIGHT_30PT;
 8004908:	89bb      	ldrh	r3, [r7, #12]
 800490a:	3328      	adds	r3, #40	; 0x28
 800490c:	81bb      	strh	r3, [r7, #12]
 800490e:	e003      	b.n	8004918 <GUI_TextArial_30pt+0x68>
        }   
        else
        {
            Xpos = 0;
 8004910:	2300      	movs	r3, #0
 8004912:	81fb      	strh	r3, [r7, #14]
            Ypos = 0;
 8004914:	2300      	movs	r3, #0
 8004916:	81bb      	strh	r3, [r7, #12]
        }    
    }
    while ( *str != 0 );
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1d2      	bne.n	80048c6 <GUI_TextArial_30pt+0x16>
}
 8004920:	bf00      	nop
 8004922:	bf00      	nop
 8004924:	371c      	adds	r7, #28
 8004926:	46bd      	mov	sp, r7
 8004928:	bd90      	pop	{r4, r7, pc}
	...

0800492c <Draw_BMP_Slice>:
         yp++;
     }
}

uint8_t Draw_BMP_Slice(unsigned int x_pos, unsigned int y_pos, signed int W, signed int H, const unsigned short *bitmap)
{
 800492c:	b480      	push	{r7}
 800492e:	b08b      	sub	sp, #44	; 0x2c
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	607a      	str	r2, [r7, #4]
 8004938:	603b      	str	r3, [r7, #0]
//					 LCD_SetPoint(xp,yp,bitmap[index++]);
//         }
//				 index= index+bitmap[0]-W;
//         yp++;
//     }
	signed int xp = 0;
 800493a:	2300      	movs	r3, #0
 800493c:	627b      	str	r3, [r7, #36]	; 0x24
	signed int yp = (y_pos );
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	623b      	str	r3, [r7, #32]
	unsigned long index = 0;
 8004942:	2300      	movs	r3, #0
 8004944:	61fb      	str	r3, [r7, #28]
	signed int BMPW=bitmap[index++];
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	1c5a      	adds	r2, r3, #1
 800494a:	61fa      	str	r2, [r7, #28]
 800494c:	005b      	lsls	r3, r3, #1
 800494e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004950:	4413      	add	r3, r2
 8004952:	881b      	ldrh	r3, [r3, #0]
 8004954:	61bb      	str	r3, [r7, #24]
	signed int BMPH=bitmap[index++];
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	1c5a      	adds	r2, r3, #1
 800495a:	61fa      	str	r2, [r7, #28]
 800495c:	005b      	lsls	r3, r3, #1
 800495e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004960:	4413      	add	r3, r2
 8004962:	881b      	ldrh	r3, [r3, #0]
 8004964:	617b      	str	r3, [r7, #20]
	
	index= (bitmap[0]*y_pos)+x_pos+2;
 8004966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004968:	881b      	ldrh	r3, [r3, #0]
 800496a:	461a      	mov	r2, r3
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	fb03 f202 	mul.w	r2, r3, r2
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	4413      	add	r3, r2
 8004976:	3302      	adds	r3, #2
 8004978:	61fb      	str	r3, [r7, #28]
	if( BMPW > MAX_X || BMPH > MAX_Y )
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	2bf0      	cmp	r3, #240	; 0xf0
 800497e:	dc03      	bgt.n	8004988 <Draw_BMP_Slice+0x5c>
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004986:	dd01      	ble.n	800498c <Draw_BMP_Slice+0x60>
	{
		return 1; //Pic is bigger than LCD Size
 8004988:	2301      	movs	r3, #1
 800498a:	e0bb      	b.n	8004b04 <Draw_BMP_Slice+0x1d8>
	}
	Clr_Cs;   /* Cs low */ 
 800498c:	4b60      	ldr	r3, [pc, #384]	; (8004b10 <Draw_BMP_Slice+0x1e4>)
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	4a5f      	ldr	r2, [pc, #380]	; (8004b10 <Draw_BMP_Slice+0x1e4>)
 8004992:	f023 0302 	bic.w	r3, r3, #2
 8004996:	60d3      	str	r3, [r2, #12]
	Set_nRd;  /* RD high */
 8004998:	4b5e      	ldr	r3, [pc, #376]	; (8004b14 <Draw_BMP_Slice+0x1e8>)
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	4a5d      	ldr	r2, [pc, #372]	; (8004b14 <Draw_BMP_Slice+0x1e8>)
 800499e:	f043 0310 	orr.w	r3, r3, #16
 80049a2:	60d3      	str	r3, [r2, #12]
	while(yp < H+y_pos)
 80049a4:	e0a0      	b.n	8004ae8 <Draw_BMP_Slice+0x1bc>
	{
		for(xp = x_pos; xp < (x_pos + W); xp++)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	627b      	str	r3, [r7, #36]	; 0x24
 80049aa:	e08b      	b.n	8004ac4 <Draw_BMP_Slice+0x198>
		{
			//LCD_WriteIndex(GLCD_X_CURSOR_REG);	/* selected LCD register */ 
			Clr_Rs;   /* RS low */		
 80049ac:	4b58      	ldr	r3, [pc, #352]	; (8004b10 <Draw_BMP_Slice+0x1e4>)
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	4a57      	ldr	r2, [pc, #348]	; (8004b10 <Draw_BMP_Slice+0x1e4>)
 80049b2:	f023 0301 	bic.w	r3, r3, #1
 80049b6:	60d3      	str	r3, [r2, #12]
			//LCD_DATA_PORT->LCD_OUTDATA_REG &=~ (0xFFFF<<LCD_DATA_BIT_OFFSET);
			//LCD_DATA_PORT->LCD_OUTDATA_REG |= (GLCD_X_CURSOR_REG<<LCD_DATA_BIT_OFFSET);
			LCD_DATA_PORT->LCD_OUTDATA_REG = (GLCD_X_CURSOR_REG<<LCD_DATA_BIT_OFFSET);
 80049b8:	4b57      	ldr	r3, [pc, #348]	; (8004b18 <Draw_BMP_Slice+0x1ec>)
 80049ba:	224e      	movs	r2, #78	; 0x4e
 80049bc:	60da      	str	r2, [r3, #12]
			Clr_nWr;  /* Wr low */
 80049be:	4b55      	ldr	r3, [pc, #340]	; (8004b14 <Draw_BMP_Slice+0x1e8>)
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	4a54      	ldr	r2, [pc, #336]	; (8004b14 <Draw_BMP_Slice+0x1e8>)
 80049c4:	f023 0320 	bic.w	r3, r3, #32
 80049c8:	60d3      	str	r3, [r2, #12]
			Set_nWr;  /* Wr high */
 80049ca:	4b52      	ldr	r3, [pc, #328]	; (8004b14 <Draw_BMP_Slice+0x1e8>)
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	4a51      	ldr	r2, [pc, #324]	; (8004b14 <Draw_BMP_Slice+0x1e8>)
 80049d0:	f043 0320 	orr.w	r3, r3, #32
 80049d4:	60d3      	str	r3, [r2, #12]
			//LCD_WriteData(MAX_X-1-xp);	/* Write register data */
			Set_Rs;  /* RS high */
 80049d6:	4b4e      	ldr	r3, [pc, #312]	; (8004b10 <Draw_BMP_Slice+0x1e4>)
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	4a4d      	ldr	r2, [pc, #308]	; (8004b10 <Draw_BMP_Slice+0x1e4>)
 80049dc:	f043 0301 	orr.w	r3, r3, #1
 80049e0:	60d3      	str	r3, [r2, #12]
			//LCD_DATA_PORT->LCD_OUTDATA_REG &=~ (0xFFFF<<LCD_DATA_BIT_OFFSET);
			//LCD_DATA_PORT->LCD_OUTDATA_REG |= ((MAX_X-1-xp)<<LCD_DATA_BIT_OFFSET);
			LCD_DATA_PORT->LCD_OUTDATA_REG = ((MAX_X-1-xp)<<LCD_DATA_BIT_OFFSET);
 80049e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e4:	f1c3 02ef 	rsb	r2, r3, #239	; 0xef
 80049e8:	4b4b      	ldr	r3, [pc, #300]	; (8004b18 <Draw_BMP_Slice+0x1ec>)
 80049ea:	60da      	str	r2, [r3, #12]
			Clr_nWr;  /* Wr low */
 80049ec:	4b49      	ldr	r3, [pc, #292]	; (8004b14 <Draw_BMP_Slice+0x1e8>)
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	4a48      	ldr	r2, [pc, #288]	; (8004b14 <Draw_BMP_Slice+0x1e8>)
 80049f2:	f023 0320 	bic.w	r3, r3, #32
 80049f6:	60d3      	str	r3, [r2, #12]
			Set_nWr;  /* Wr high */
 80049f8:	4b46      	ldr	r3, [pc, #280]	; (8004b14 <Draw_BMP_Slice+0x1e8>)
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	4a45      	ldr	r2, [pc, #276]	; (8004b14 <Draw_BMP_Slice+0x1e8>)
 80049fe:	f043 0320 	orr.w	r3, r3, #32
 8004a02:	60d3      	str	r3, [r2, #12]
			//LCD_WriteIndex(GLCD_Y_CURSOR_REG);	/* selected LCD register */ 
			Clr_Rs;   /* RS low */		
 8004a04:	4b42      	ldr	r3, [pc, #264]	; (8004b10 <Draw_BMP_Slice+0x1e4>)
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	4a41      	ldr	r2, [pc, #260]	; (8004b10 <Draw_BMP_Slice+0x1e4>)
 8004a0a:	f023 0301 	bic.w	r3, r3, #1
 8004a0e:	60d3      	str	r3, [r2, #12]
			//LCD_DATA_PORT->LCD_OUTDATA_REG &=~ (0xFFFF<<LCD_DATA_BIT_OFFSET);
			//LCD_DATA_PORT->LCD_OUTDATA_REG |= (GLCD_Y_CURSOR_REG<<LCD_DATA_BIT_OFFSET);
			LCD_DATA_PORT->LCD_OUTDATA_REG = (GLCD_Y_CURSOR_REG<<LCD_DATA_BIT_OFFSET);
 8004a10:	4b41      	ldr	r3, [pc, #260]	; (8004b18 <Draw_BMP_Slice+0x1ec>)
 8004a12:	224f      	movs	r2, #79	; 0x4f
 8004a14:	60da      	str	r2, [r3, #12]
			Clr_nWr;  /* Wr low */
 8004a16:	4b3f      	ldr	r3, [pc, #252]	; (8004b14 <Draw_BMP_Slice+0x1e8>)
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	4a3e      	ldr	r2, [pc, #248]	; (8004b14 <Draw_BMP_Slice+0x1e8>)
 8004a1c:	f023 0320 	bic.w	r3, r3, #32
 8004a20:	60d3      	str	r3, [r2, #12]
			Set_nWr;  /* Wr high */
 8004a22:	4b3c      	ldr	r3, [pc, #240]	; (8004b14 <Draw_BMP_Slice+0x1e8>)
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	4a3b      	ldr	r2, [pc, #236]	; (8004b14 <Draw_BMP_Slice+0x1e8>)
 8004a28:	f043 0320 	orr.w	r3, r3, #32
 8004a2c:	60d3      	str	r3, [r2, #12]
//			LCD_WriteData(MAX_Y-1-yp);	/* Write register data */
			Set_Rs;  /* RS high */
 8004a2e:	4b38      	ldr	r3, [pc, #224]	; (8004b10 <Draw_BMP_Slice+0x1e4>)
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	4a37      	ldr	r2, [pc, #220]	; (8004b10 <Draw_BMP_Slice+0x1e4>)
 8004a34:	f043 0301 	orr.w	r3, r3, #1
 8004a38:	60d3      	str	r3, [r2, #12]
			//LCD_DATA_PORT->LCD_OUTDATA_REG &=~ (0xFFFF<<LCD_DATA_BIT_OFFSET);
			//LCD_DATA_PORT->LCD_OUTDATA_REG |= ((MAX_Y-1-yp)<<LCD_DATA_BIT_OFFSET);
			LCD_DATA_PORT->LCD_OUTDATA_REG = ((MAX_Y-1-yp)<<LCD_DATA_BIT_OFFSET);
 8004a3a:	6a3b      	ldr	r3, [r7, #32]
 8004a3c:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8004a40:	3301      	adds	r3, #1
 8004a42:	4a35      	ldr	r2, [pc, #212]	; (8004b18 <Draw_BMP_Slice+0x1ec>)
 8004a44:	60d3      	str	r3, [r2, #12]
			Clr_nWr;  /* Wr low */
 8004a46:	4b33      	ldr	r3, [pc, #204]	; (8004b14 <Draw_BMP_Slice+0x1e8>)
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	4a32      	ldr	r2, [pc, #200]	; (8004b14 <Draw_BMP_Slice+0x1e8>)
 8004a4c:	f023 0320 	bic.w	r3, r3, #32
 8004a50:	60d3      	str	r3, [r2, #12]
			Set_nWr;  /* Wr high */
 8004a52:	4b30      	ldr	r3, [pc, #192]	; (8004b14 <Draw_BMP_Slice+0x1e8>)
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	4a2f      	ldr	r2, [pc, #188]	; (8004b14 <Draw_BMP_Slice+0x1e8>)
 8004a58:	f043 0320 	orr.w	r3, r3, #32
 8004a5c:	60d3      	str	r3, [r2, #12]
//			LCD_WriteIndex(GLCD_DATA_REG);	/* selected LCD register */ 
			Clr_Rs;   /* RS low */
 8004a5e:	4b2c      	ldr	r3, [pc, #176]	; (8004b10 <Draw_BMP_Slice+0x1e4>)
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	4a2b      	ldr	r2, [pc, #172]	; (8004b10 <Draw_BMP_Slice+0x1e4>)
 8004a64:	f023 0301 	bic.w	r3, r3, #1
 8004a68:	60d3      	str	r3, [r2, #12]
			//LCD_DATA_PORT->LCD_OUTDATA_REG &=~ (0xFFFF<<LCD_DATA_BIT_OFFSET);
			//LCD_DATA_PORT->LCD_OUTDATA_REG |= (GLCD_DATA_REG<<LCD_DATA_BIT_OFFSET);
			LCD_DATA_PORT->LCD_OUTDATA_REG = (GLCD_DATA_REG<<LCD_DATA_BIT_OFFSET);
 8004a6a:	4b2b      	ldr	r3, [pc, #172]	; (8004b18 <Draw_BMP_Slice+0x1ec>)
 8004a6c:	2222      	movs	r2, #34	; 0x22
 8004a6e:	60da      	str	r2, [r3, #12]
			Clr_nWr;  /* Wr low */
 8004a70:	4b28      	ldr	r3, [pc, #160]	; (8004b14 <Draw_BMP_Slice+0x1e8>)
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	4a27      	ldr	r2, [pc, #156]	; (8004b14 <Draw_BMP_Slice+0x1e8>)
 8004a76:	f023 0320 	bic.w	r3, r3, #32
 8004a7a:	60d3      	str	r3, [r2, #12]
			Set_nWr;  /* Wr high */
 8004a7c:	4b25      	ldr	r3, [pc, #148]	; (8004b14 <Draw_BMP_Slice+0x1e8>)
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	4a24      	ldr	r2, [pc, #144]	; (8004b14 <Draw_BMP_Slice+0x1e8>)
 8004a82:	f043 0320 	orr.w	r3, r3, #32
 8004a86:	60d3      	str	r3, [r2, #12]
			//LCD_WriteData(bitmap[index++]);	/* Write register data */
			Set_Rs;  /* RS high */
 8004a88:	4b21      	ldr	r3, [pc, #132]	; (8004b10 <Draw_BMP_Slice+0x1e4>)
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	4a20      	ldr	r2, [pc, #128]	; (8004b10 <Draw_BMP_Slice+0x1e4>)
 8004a8e:	f043 0301 	orr.w	r3, r3, #1
 8004a92:	60d3      	str	r3, [r2, #12]
			//LCD_DATA_PORT->LCD_OUTDATA_REG &=~ (0xFFFF<<LCD_DATA_BIT_OFFSET);
			//LCD_DATA_PORT->LCD_OUTDATA_REG |= ((bitmap[index++])<<LCD_DATA_BIT_OFFSET);
			LCD_DATA_PORT->LCD_OUTDATA_REG = ((bitmap[index++])<<LCD_DATA_BIT_OFFSET);
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	1c5a      	adds	r2, r3, #1
 8004a98:	61fa      	str	r2, [r7, #28]
 8004a9a:	005b      	lsls	r3, r3, #1
 8004a9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a9e:	4413      	add	r3, r2
 8004aa0:	881a      	ldrh	r2, [r3, #0]
 8004aa2:	4b1d      	ldr	r3, [pc, #116]	; (8004b18 <Draw_BMP_Slice+0x1ec>)
 8004aa4:	60da      	str	r2, [r3, #12]
			Clr_nWr;  /* Wr low */
 8004aa6:	4b1b      	ldr	r3, [pc, #108]	; (8004b14 <Draw_BMP_Slice+0x1e8>)
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	4a1a      	ldr	r2, [pc, #104]	; (8004b14 <Draw_BMP_Slice+0x1e8>)
 8004aac:	f023 0320 	bic.w	r3, r3, #32
 8004ab0:	60d3      	str	r3, [r2, #12]
			Set_nWr;  /* Wr high */
 8004ab2:	4b18      	ldr	r3, [pc, #96]	; (8004b14 <Draw_BMP_Slice+0x1e8>)
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	4a17      	ldr	r2, [pc, #92]	; (8004b14 <Draw_BMP_Slice+0x1e8>)
 8004ab8:	f043 0320 	orr.w	r3, r3, #32
 8004abc:	60d3      	str	r3, [r2, #12]
		for(xp = x_pos; xp < (x_pos + W); xp++)
 8004abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	441a      	add	r2, r3
 8004aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004acc:	429a      	cmp	r2, r3
 8004ace:	f63f af6d 	bhi.w	80049ac <Draw_BMP_Slice+0x80>
		}
		index= index+bitmap[0]-W;
 8004ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad4:	881b      	ldrh	r3, [r3, #0]
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	441a      	add	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	61fb      	str	r3, [r7, #28]
		yp++;
 8004ae2:	6a3b      	ldr	r3, [r7, #32]
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	623b      	str	r3, [r7, #32]
	while(yp < H+y_pos)
 8004ae8:	683a      	ldr	r2, [r7, #0]
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	441a      	add	r2, r3
 8004aee:	6a3b      	ldr	r3, [r7, #32]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	f63f af58 	bhi.w	80049a6 <Draw_BMP_Slice+0x7a>
	}
	Set_Cs;
 8004af6:	4b06      	ldr	r3, [pc, #24]	; (8004b10 <Draw_BMP_Slice+0x1e4>)
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	4a05      	ldr	r2, [pc, #20]	; (8004b10 <Draw_BMP_Slice+0x1e4>)
 8004afc:	f043 0302 	orr.w	r3, r3, #2
 8004b00:	60d3      	str	r3, [r2, #12]
	return 0;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	372c      	adds	r7, #44	; 0x2c
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bc80      	pop	{r7}
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	40010c00 	.word	0x40010c00
 8004b14:	40011000 	.word	0x40011000
 8004b18:	40011800 	.word	0x40011800

08004b1c <Draw_BMP_Fast>:

uint8_t Draw_BMP_Fast(unsigned int x_pos, unsigned int y_pos, const unsigned short *bitmap)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b08b      	sub	sp, #44	; 0x2c
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	607a      	str	r2, [r7, #4]
	signed int xp = 0;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	627b      	str	r3, [r7, #36]	; 0x24
	signed int yp = (y_pos );
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	623b      	str	r3, [r7, #32]
	unsigned long index = 0;
 8004b30:	2300      	movs	r3, #0
 8004b32:	61fb      	str	r3, [r7, #28]
	signed int BMPW=bitmap[index++];
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	1c5a      	adds	r2, r3, #1
 8004b38:	61fa      	str	r2, [r7, #28]
 8004b3a:	005b      	lsls	r3, r3, #1
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	4413      	add	r3, r2
 8004b40:	881b      	ldrh	r3, [r3, #0]
 8004b42:	61bb      	str	r3, [r7, #24]
	signed int BMPH=bitmap[index++];
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	1c5a      	adds	r2, r3, #1
 8004b48:	61fa      	str	r2, [r7, #28]
 8004b4a:	005b      	lsls	r3, r3, #1
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	4413      	add	r3, r2
 8004b50:	881b      	ldrh	r3, [r3, #0]
 8004b52:	617b      	str	r3, [r7, #20]
	
	if( BMPW > MAX_X || BMPH > MAX_Y )
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	2bf0      	cmp	r3, #240	; 0xf0
 8004b58:	dc03      	bgt.n	8004b62 <Draw_BMP_Fast+0x46>
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004b60:	dd01      	ble.n	8004b66 <Draw_BMP_Fast+0x4a>
	{
		return 1; //Pic is bigger than LCD Size
 8004b62:	2301      	movs	r3, #1
 8004b64:	e0b3      	b.n	8004cce <Draw_BMP_Fast+0x1b2>
	}
	Clr_Cs;   /* Cs low */ 
 8004b66:	4b5c      	ldr	r3, [pc, #368]	; (8004cd8 <Draw_BMP_Fast+0x1bc>)
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	4a5b      	ldr	r2, [pc, #364]	; (8004cd8 <Draw_BMP_Fast+0x1bc>)
 8004b6c:	f023 0302 	bic.w	r3, r3, #2
 8004b70:	60d3      	str	r3, [r2, #12]
	Set_nRd;  /* RD high */
 8004b72:	4b5a      	ldr	r3, [pc, #360]	; (8004cdc <Draw_BMP_Fast+0x1c0>)
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	4a59      	ldr	r2, [pc, #356]	; (8004cdc <Draw_BMP_Fast+0x1c0>)
 8004b78:	f043 0310 	orr.w	r3, r3, #16
 8004b7c:	60d3      	str	r3, [r2, #12]
	while(yp < (BMPH+y_pos))
 8004b7e:	e098      	b.n	8004cb2 <Draw_BMP_Fast+0x196>
	{
		for(xp = x_pos; xp < (x_pos + BMPW); xp++)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	627b      	str	r3, [r7, #36]	; 0x24
 8004b84:	e08b      	b.n	8004c9e <Draw_BMP_Fast+0x182>
		{
			//LCD_WriteIndex(GLCD_X_CURSOR_REG);	/* selected LCD register */ 
			Clr_Rs;   /* RS low */		
 8004b86:	4b54      	ldr	r3, [pc, #336]	; (8004cd8 <Draw_BMP_Fast+0x1bc>)
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	4a53      	ldr	r2, [pc, #332]	; (8004cd8 <Draw_BMP_Fast+0x1bc>)
 8004b8c:	f023 0301 	bic.w	r3, r3, #1
 8004b90:	60d3      	str	r3, [r2, #12]
			//LCD_DATA_PORT->LCD_OUTDATA_REG &=~ (0xFFFF<<LCD_DATA_BIT_OFFSET);
			//LCD_DATA_PORT->LCD_OUTDATA_REG |= (GLCD_X_CURSOR_REG<<LCD_DATA_BIT_OFFSET);
			LCD_DATA_PORT->LCD_OUTDATA_REG = (GLCD_X_CURSOR_REG<<LCD_DATA_BIT_OFFSET);
 8004b92:	4b53      	ldr	r3, [pc, #332]	; (8004ce0 <Draw_BMP_Fast+0x1c4>)
 8004b94:	224e      	movs	r2, #78	; 0x4e
 8004b96:	60da      	str	r2, [r3, #12]
			Clr_nWr;  /* Wr low */
 8004b98:	4b50      	ldr	r3, [pc, #320]	; (8004cdc <Draw_BMP_Fast+0x1c0>)
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	4a4f      	ldr	r2, [pc, #316]	; (8004cdc <Draw_BMP_Fast+0x1c0>)
 8004b9e:	f023 0320 	bic.w	r3, r3, #32
 8004ba2:	60d3      	str	r3, [r2, #12]
			Set_nWr;  /* Wr high */
 8004ba4:	4b4d      	ldr	r3, [pc, #308]	; (8004cdc <Draw_BMP_Fast+0x1c0>)
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	4a4c      	ldr	r2, [pc, #304]	; (8004cdc <Draw_BMP_Fast+0x1c0>)
 8004baa:	f043 0320 	orr.w	r3, r3, #32
 8004bae:	60d3      	str	r3, [r2, #12]
			//LCD_WriteData(MAX_X-1-xp);	/* Write register data */
			Set_Rs;  /* RS high */
 8004bb0:	4b49      	ldr	r3, [pc, #292]	; (8004cd8 <Draw_BMP_Fast+0x1bc>)
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	4a48      	ldr	r2, [pc, #288]	; (8004cd8 <Draw_BMP_Fast+0x1bc>)
 8004bb6:	f043 0301 	orr.w	r3, r3, #1
 8004bba:	60d3      	str	r3, [r2, #12]
			//LCD_DATA_PORT->LCD_OUTDATA_REG &=~ (0xFFFF<<LCD_DATA_BIT_OFFSET);
			//LCD_DATA_PORT->LCD_OUTDATA_REG |= ((MAX_X-1-xp)<<LCD_DATA_BIT_OFFSET);
			LCD_DATA_PORT->LCD_OUTDATA_REG = ((MAX_X-1-xp)<<LCD_DATA_BIT_OFFSET);
 8004bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbe:	f1c3 02ef 	rsb	r2, r3, #239	; 0xef
 8004bc2:	4b47      	ldr	r3, [pc, #284]	; (8004ce0 <Draw_BMP_Fast+0x1c4>)
 8004bc4:	60da      	str	r2, [r3, #12]
			Clr_nWr;  /* Wr low */
 8004bc6:	4b45      	ldr	r3, [pc, #276]	; (8004cdc <Draw_BMP_Fast+0x1c0>)
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	4a44      	ldr	r2, [pc, #272]	; (8004cdc <Draw_BMP_Fast+0x1c0>)
 8004bcc:	f023 0320 	bic.w	r3, r3, #32
 8004bd0:	60d3      	str	r3, [r2, #12]
			Set_nWr;  /* Wr high */
 8004bd2:	4b42      	ldr	r3, [pc, #264]	; (8004cdc <Draw_BMP_Fast+0x1c0>)
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	4a41      	ldr	r2, [pc, #260]	; (8004cdc <Draw_BMP_Fast+0x1c0>)
 8004bd8:	f043 0320 	orr.w	r3, r3, #32
 8004bdc:	60d3      	str	r3, [r2, #12]
			//LCD_WriteIndex(GLCD_Y_CURSOR_REG);	/* selected LCD register */ 
			Clr_Rs;   /* RS low */		
 8004bde:	4b3e      	ldr	r3, [pc, #248]	; (8004cd8 <Draw_BMP_Fast+0x1bc>)
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	4a3d      	ldr	r2, [pc, #244]	; (8004cd8 <Draw_BMP_Fast+0x1bc>)
 8004be4:	f023 0301 	bic.w	r3, r3, #1
 8004be8:	60d3      	str	r3, [r2, #12]
			//LCD_DATA_PORT->LCD_OUTDATA_REG &=~ (0xFFFF<<LCD_DATA_BIT_OFFSET);
			//LCD_DATA_PORT->LCD_OUTDATA_REG |= (GLCD_Y_CURSOR_REG<<LCD_DATA_BIT_OFFSET);
			LCD_DATA_PORT->LCD_OUTDATA_REG = (GLCD_Y_CURSOR_REG<<LCD_DATA_BIT_OFFSET);
 8004bea:	4b3d      	ldr	r3, [pc, #244]	; (8004ce0 <Draw_BMP_Fast+0x1c4>)
 8004bec:	224f      	movs	r2, #79	; 0x4f
 8004bee:	60da      	str	r2, [r3, #12]
			Clr_nWr;  /* Wr low */
 8004bf0:	4b3a      	ldr	r3, [pc, #232]	; (8004cdc <Draw_BMP_Fast+0x1c0>)
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	4a39      	ldr	r2, [pc, #228]	; (8004cdc <Draw_BMP_Fast+0x1c0>)
 8004bf6:	f023 0320 	bic.w	r3, r3, #32
 8004bfa:	60d3      	str	r3, [r2, #12]
			Set_nWr;  /* Wr high */
 8004bfc:	4b37      	ldr	r3, [pc, #220]	; (8004cdc <Draw_BMP_Fast+0x1c0>)
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	4a36      	ldr	r2, [pc, #216]	; (8004cdc <Draw_BMP_Fast+0x1c0>)
 8004c02:	f043 0320 	orr.w	r3, r3, #32
 8004c06:	60d3      	str	r3, [r2, #12]
//			LCD_WriteData(MAX_Y-1-yp);	/* Write register data */
			Set_Rs;  /* RS high */
 8004c08:	4b33      	ldr	r3, [pc, #204]	; (8004cd8 <Draw_BMP_Fast+0x1bc>)
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	4a32      	ldr	r2, [pc, #200]	; (8004cd8 <Draw_BMP_Fast+0x1bc>)
 8004c0e:	f043 0301 	orr.w	r3, r3, #1
 8004c12:	60d3      	str	r3, [r2, #12]
			//LCD_DATA_PORT->LCD_OUTDATA_REG &=~ (0xFFFF<<LCD_DATA_BIT_OFFSET);
			//LCD_DATA_PORT->LCD_OUTDATA_REG |= ((MAX_Y-1-yp)<<LCD_DATA_BIT_OFFSET);
			LCD_DATA_PORT->LCD_OUTDATA_REG = ((MAX_Y-1-yp)<<LCD_DATA_BIT_OFFSET);
 8004c14:	6a3b      	ldr	r3, [r7, #32]
 8004c16:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	4a30      	ldr	r2, [pc, #192]	; (8004ce0 <Draw_BMP_Fast+0x1c4>)
 8004c1e:	60d3      	str	r3, [r2, #12]
			Clr_nWr;  /* Wr low */
 8004c20:	4b2e      	ldr	r3, [pc, #184]	; (8004cdc <Draw_BMP_Fast+0x1c0>)
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	4a2d      	ldr	r2, [pc, #180]	; (8004cdc <Draw_BMP_Fast+0x1c0>)
 8004c26:	f023 0320 	bic.w	r3, r3, #32
 8004c2a:	60d3      	str	r3, [r2, #12]
			Set_nWr;  /* Wr high */
 8004c2c:	4b2b      	ldr	r3, [pc, #172]	; (8004cdc <Draw_BMP_Fast+0x1c0>)
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	4a2a      	ldr	r2, [pc, #168]	; (8004cdc <Draw_BMP_Fast+0x1c0>)
 8004c32:	f043 0320 	orr.w	r3, r3, #32
 8004c36:	60d3      	str	r3, [r2, #12]
//			LCD_WriteIndex(GLCD_DATA_REG);	/* selected LCD register */ 
			Clr_Rs;   /* RS low */
 8004c38:	4b27      	ldr	r3, [pc, #156]	; (8004cd8 <Draw_BMP_Fast+0x1bc>)
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	4a26      	ldr	r2, [pc, #152]	; (8004cd8 <Draw_BMP_Fast+0x1bc>)
 8004c3e:	f023 0301 	bic.w	r3, r3, #1
 8004c42:	60d3      	str	r3, [r2, #12]
			//LCD_DATA_PORT->LCD_OUTDATA_REG &=~ (0xFFFF<<LCD_DATA_BIT_OFFSET);
			//
			LCD_DATA_PORT->LCD_OUTDATA_REG = (GLCD_DATA_REG<<LCD_DATA_BIT_OFFSET);
 8004c44:	4b26      	ldr	r3, [pc, #152]	; (8004ce0 <Draw_BMP_Fast+0x1c4>)
 8004c46:	2222      	movs	r2, #34	; 0x22
 8004c48:	60da      	str	r2, [r3, #12]
			Clr_nWr;  /* Wr low */
 8004c4a:	4b24      	ldr	r3, [pc, #144]	; (8004cdc <Draw_BMP_Fast+0x1c0>)
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	4a23      	ldr	r2, [pc, #140]	; (8004cdc <Draw_BMP_Fast+0x1c0>)
 8004c50:	f023 0320 	bic.w	r3, r3, #32
 8004c54:	60d3      	str	r3, [r2, #12]
			Set_nWr;  /* Wr high */
 8004c56:	4b21      	ldr	r3, [pc, #132]	; (8004cdc <Draw_BMP_Fast+0x1c0>)
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	4a20      	ldr	r2, [pc, #128]	; (8004cdc <Draw_BMP_Fast+0x1c0>)
 8004c5c:	f043 0320 	orr.w	r3, r3, #32
 8004c60:	60d3      	str	r3, [r2, #12]
			//LCD_WriteData(bitmap[index++]);	/* Write register data */
			Set_Rs;  /* RS high */
 8004c62:	4b1d      	ldr	r3, [pc, #116]	; (8004cd8 <Draw_BMP_Fast+0x1bc>)
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	4a1c      	ldr	r2, [pc, #112]	; (8004cd8 <Draw_BMP_Fast+0x1bc>)
 8004c68:	f043 0301 	orr.w	r3, r3, #1
 8004c6c:	60d3      	str	r3, [r2, #12]
			//LCD_DATA_PORT->LCD_OUTDATA_REG &=~ (0xFFFF<<LCD_DATA_BIT_OFFSET);
			//LCD_DATA_PORT->LCD_OUTDATA_REG |= ((bitmap[index++])<<LCD_DATA_BIT_OFFSET);
			LCD_DATA_PORT->LCD_OUTDATA_REG = ((bitmap[index++])<<LCD_DATA_BIT_OFFSET);
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	1c5a      	adds	r2, r3, #1
 8004c72:	61fa      	str	r2, [r7, #28]
 8004c74:	005b      	lsls	r3, r3, #1
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	4413      	add	r3, r2
 8004c7a:	881a      	ldrh	r2, [r3, #0]
 8004c7c:	4b18      	ldr	r3, [pc, #96]	; (8004ce0 <Draw_BMP_Fast+0x1c4>)
 8004c7e:	60da      	str	r2, [r3, #12]
			Clr_nWr;  /* Wr low */
 8004c80:	4b16      	ldr	r3, [pc, #88]	; (8004cdc <Draw_BMP_Fast+0x1c0>)
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	4a15      	ldr	r2, [pc, #84]	; (8004cdc <Draw_BMP_Fast+0x1c0>)
 8004c86:	f023 0320 	bic.w	r3, r3, #32
 8004c8a:	60d3      	str	r3, [r2, #12]
			Set_nWr;  /* Wr high */
 8004c8c:	4b13      	ldr	r3, [pc, #76]	; (8004cdc <Draw_BMP_Fast+0x1c0>)
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	4a12      	ldr	r2, [pc, #72]	; (8004cdc <Draw_BMP_Fast+0x1c0>)
 8004c92:	f043 0320 	orr.w	r3, r3, #32
 8004c96:	60d3      	str	r3, [r2, #12]
		for(xp = x_pos; xp < (x_pos + BMPW); xp++)
 8004c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c9e:	69ba      	ldr	r2, [r7, #24]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	441a      	add	r2, r3
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	f63f af6d 	bhi.w	8004b86 <Draw_BMP_Fast+0x6a>
		}
		 yp++;
 8004cac:	6a3b      	ldr	r3, [r7, #32]
 8004cae:	3301      	adds	r3, #1
 8004cb0:	623b      	str	r3, [r7, #32]
	while(yp < (BMPH+y_pos))
 8004cb2:	697a      	ldr	r2, [r7, #20]
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	441a      	add	r2, r3
 8004cb8:	6a3b      	ldr	r3, [r7, #32]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	f63f af60 	bhi.w	8004b80 <Draw_BMP_Fast+0x64>
	}
	Set_Cs;
 8004cc0:	4b05      	ldr	r3, [pc, #20]	; (8004cd8 <Draw_BMP_Fast+0x1bc>)
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	4a04      	ldr	r2, [pc, #16]	; (8004cd8 <Draw_BMP_Fast+0x1bc>)
 8004cc6:	f043 0302 	orr.w	r3, r3, #2
 8004cca:	60d3      	str	r3, [r2, #12]
	return 0;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	372c      	adds	r7, #44	; 0x2c
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bc80      	pop	{r7}
 8004cd6:	4770      	bx	lr
 8004cd8:	40010c00 	.word	0x40010c00
 8004cdc:	40011000 	.word	0x40011000
 8004ce0:	40011800 	.word	0x40011800

08004ce4 <__errno>:
 8004ce4:	4b01      	ldr	r3, [pc, #4]	; (8004cec <__errno+0x8>)
 8004ce6:	6818      	ldr	r0, [r3, #0]
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	20000038 	.word	0x20000038

08004cf0 <__libc_init_array>:
 8004cf0:	b570      	push	{r4, r5, r6, lr}
 8004cf2:	2600      	movs	r6, #0
 8004cf4:	4d0c      	ldr	r5, [pc, #48]	; (8004d28 <__libc_init_array+0x38>)
 8004cf6:	4c0d      	ldr	r4, [pc, #52]	; (8004d2c <__libc_init_array+0x3c>)
 8004cf8:	1b64      	subs	r4, r4, r5
 8004cfa:	10a4      	asrs	r4, r4, #2
 8004cfc:	42a6      	cmp	r6, r4
 8004cfe:	d109      	bne.n	8004d14 <__libc_init_array+0x24>
 8004d00:	f000 fc9c 	bl	800563c <_init>
 8004d04:	2600      	movs	r6, #0
 8004d06:	4d0a      	ldr	r5, [pc, #40]	; (8004d30 <__libc_init_array+0x40>)
 8004d08:	4c0a      	ldr	r4, [pc, #40]	; (8004d34 <__libc_init_array+0x44>)
 8004d0a:	1b64      	subs	r4, r4, r5
 8004d0c:	10a4      	asrs	r4, r4, #2
 8004d0e:	42a6      	cmp	r6, r4
 8004d10:	d105      	bne.n	8004d1e <__libc_init_array+0x2e>
 8004d12:	bd70      	pop	{r4, r5, r6, pc}
 8004d14:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d18:	4798      	blx	r3
 8004d1a:	3601      	adds	r6, #1
 8004d1c:	e7ee      	b.n	8004cfc <__libc_init_array+0xc>
 8004d1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d22:	4798      	blx	r3
 8004d24:	3601      	adds	r6, #1
 8004d26:	e7f2      	b.n	8004d0e <__libc_init_array+0x1e>
 8004d28:	080311e0 	.word	0x080311e0
 8004d2c:	080311e0 	.word	0x080311e0
 8004d30:	080311e0 	.word	0x080311e0
 8004d34:	080311e4 	.word	0x080311e4

08004d38 <memcpy>:
 8004d38:	440a      	add	r2, r1
 8004d3a:	4291      	cmp	r1, r2
 8004d3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d40:	d100      	bne.n	8004d44 <memcpy+0xc>
 8004d42:	4770      	bx	lr
 8004d44:	b510      	push	{r4, lr}
 8004d46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d4a:	4291      	cmp	r1, r2
 8004d4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d50:	d1f9      	bne.n	8004d46 <memcpy+0xe>
 8004d52:	bd10      	pop	{r4, pc}

08004d54 <memset>:
 8004d54:	4603      	mov	r3, r0
 8004d56:	4402      	add	r2, r0
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d100      	bne.n	8004d5e <memset+0xa>
 8004d5c:	4770      	bx	lr
 8004d5e:	f803 1b01 	strb.w	r1, [r3], #1
 8004d62:	e7f9      	b.n	8004d58 <memset+0x4>

08004d64 <siprintf>:
 8004d64:	b40e      	push	{r1, r2, r3}
 8004d66:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d6a:	b500      	push	{lr}
 8004d6c:	b09c      	sub	sp, #112	; 0x70
 8004d6e:	ab1d      	add	r3, sp, #116	; 0x74
 8004d70:	9002      	str	r0, [sp, #8]
 8004d72:	9006      	str	r0, [sp, #24]
 8004d74:	9107      	str	r1, [sp, #28]
 8004d76:	9104      	str	r1, [sp, #16]
 8004d78:	4808      	ldr	r0, [pc, #32]	; (8004d9c <siprintf+0x38>)
 8004d7a:	4909      	ldr	r1, [pc, #36]	; (8004da0 <siprintf+0x3c>)
 8004d7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d80:	9105      	str	r1, [sp, #20]
 8004d82:	6800      	ldr	r0, [r0, #0]
 8004d84:	a902      	add	r1, sp, #8
 8004d86:	9301      	str	r3, [sp, #4]
 8004d88:	f000 f868 	bl	8004e5c <_svfiprintf_r>
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	9b02      	ldr	r3, [sp, #8]
 8004d90:	701a      	strb	r2, [r3, #0]
 8004d92:	b01c      	add	sp, #112	; 0x70
 8004d94:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d98:	b003      	add	sp, #12
 8004d9a:	4770      	bx	lr
 8004d9c:	20000038 	.word	0x20000038
 8004da0:	ffff0208 	.word	0xffff0208

08004da4 <__ssputs_r>:
 8004da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004da8:	688e      	ldr	r6, [r1, #8]
 8004daa:	4682      	mov	sl, r0
 8004dac:	429e      	cmp	r6, r3
 8004dae:	460c      	mov	r4, r1
 8004db0:	4690      	mov	r8, r2
 8004db2:	461f      	mov	r7, r3
 8004db4:	d838      	bhi.n	8004e28 <__ssputs_r+0x84>
 8004db6:	898a      	ldrh	r2, [r1, #12]
 8004db8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004dbc:	d032      	beq.n	8004e24 <__ssputs_r+0x80>
 8004dbe:	6825      	ldr	r5, [r4, #0]
 8004dc0:	6909      	ldr	r1, [r1, #16]
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	eba5 0901 	sub.w	r9, r5, r1
 8004dc8:	6965      	ldr	r5, [r4, #20]
 8004dca:	444b      	add	r3, r9
 8004dcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004dd0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004dd4:	106d      	asrs	r5, r5, #1
 8004dd6:	429d      	cmp	r5, r3
 8004dd8:	bf38      	it	cc
 8004dda:	461d      	movcc	r5, r3
 8004ddc:	0553      	lsls	r3, r2, #21
 8004dde:	d531      	bpl.n	8004e44 <__ssputs_r+0xa0>
 8004de0:	4629      	mov	r1, r5
 8004de2:	f000 fb61 	bl	80054a8 <_malloc_r>
 8004de6:	4606      	mov	r6, r0
 8004de8:	b950      	cbnz	r0, 8004e00 <__ssputs_r+0x5c>
 8004dea:	230c      	movs	r3, #12
 8004dec:	f04f 30ff 	mov.w	r0, #4294967295
 8004df0:	f8ca 3000 	str.w	r3, [sl]
 8004df4:	89a3      	ldrh	r3, [r4, #12]
 8004df6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dfa:	81a3      	strh	r3, [r4, #12]
 8004dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e00:	464a      	mov	r2, r9
 8004e02:	6921      	ldr	r1, [r4, #16]
 8004e04:	f7ff ff98 	bl	8004d38 <memcpy>
 8004e08:	89a3      	ldrh	r3, [r4, #12]
 8004e0a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004e0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e12:	81a3      	strh	r3, [r4, #12]
 8004e14:	6126      	str	r6, [r4, #16]
 8004e16:	444e      	add	r6, r9
 8004e18:	6026      	str	r6, [r4, #0]
 8004e1a:	463e      	mov	r6, r7
 8004e1c:	6165      	str	r5, [r4, #20]
 8004e1e:	eba5 0509 	sub.w	r5, r5, r9
 8004e22:	60a5      	str	r5, [r4, #8]
 8004e24:	42be      	cmp	r6, r7
 8004e26:	d900      	bls.n	8004e2a <__ssputs_r+0x86>
 8004e28:	463e      	mov	r6, r7
 8004e2a:	4632      	mov	r2, r6
 8004e2c:	4641      	mov	r1, r8
 8004e2e:	6820      	ldr	r0, [r4, #0]
 8004e30:	f000 fab8 	bl	80053a4 <memmove>
 8004e34:	68a3      	ldr	r3, [r4, #8]
 8004e36:	2000      	movs	r0, #0
 8004e38:	1b9b      	subs	r3, r3, r6
 8004e3a:	60a3      	str	r3, [r4, #8]
 8004e3c:	6823      	ldr	r3, [r4, #0]
 8004e3e:	4433      	add	r3, r6
 8004e40:	6023      	str	r3, [r4, #0]
 8004e42:	e7db      	b.n	8004dfc <__ssputs_r+0x58>
 8004e44:	462a      	mov	r2, r5
 8004e46:	f000 fba3 	bl	8005590 <_realloc_r>
 8004e4a:	4606      	mov	r6, r0
 8004e4c:	2800      	cmp	r0, #0
 8004e4e:	d1e1      	bne.n	8004e14 <__ssputs_r+0x70>
 8004e50:	4650      	mov	r0, sl
 8004e52:	6921      	ldr	r1, [r4, #16]
 8004e54:	f000 fac0 	bl	80053d8 <_free_r>
 8004e58:	e7c7      	b.n	8004dea <__ssputs_r+0x46>
	...

08004e5c <_svfiprintf_r>:
 8004e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e60:	4698      	mov	r8, r3
 8004e62:	898b      	ldrh	r3, [r1, #12]
 8004e64:	4607      	mov	r7, r0
 8004e66:	061b      	lsls	r3, r3, #24
 8004e68:	460d      	mov	r5, r1
 8004e6a:	4614      	mov	r4, r2
 8004e6c:	b09d      	sub	sp, #116	; 0x74
 8004e6e:	d50e      	bpl.n	8004e8e <_svfiprintf_r+0x32>
 8004e70:	690b      	ldr	r3, [r1, #16]
 8004e72:	b963      	cbnz	r3, 8004e8e <_svfiprintf_r+0x32>
 8004e74:	2140      	movs	r1, #64	; 0x40
 8004e76:	f000 fb17 	bl	80054a8 <_malloc_r>
 8004e7a:	6028      	str	r0, [r5, #0]
 8004e7c:	6128      	str	r0, [r5, #16]
 8004e7e:	b920      	cbnz	r0, 8004e8a <_svfiprintf_r+0x2e>
 8004e80:	230c      	movs	r3, #12
 8004e82:	603b      	str	r3, [r7, #0]
 8004e84:	f04f 30ff 	mov.w	r0, #4294967295
 8004e88:	e0d1      	b.n	800502e <_svfiprintf_r+0x1d2>
 8004e8a:	2340      	movs	r3, #64	; 0x40
 8004e8c:	616b      	str	r3, [r5, #20]
 8004e8e:	2300      	movs	r3, #0
 8004e90:	9309      	str	r3, [sp, #36]	; 0x24
 8004e92:	2320      	movs	r3, #32
 8004e94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e98:	2330      	movs	r3, #48	; 0x30
 8004e9a:	f04f 0901 	mov.w	r9, #1
 8004e9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ea2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005048 <_svfiprintf_r+0x1ec>
 8004ea6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004eaa:	4623      	mov	r3, r4
 8004eac:	469a      	mov	sl, r3
 8004eae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004eb2:	b10a      	cbz	r2, 8004eb8 <_svfiprintf_r+0x5c>
 8004eb4:	2a25      	cmp	r2, #37	; 0x25
 8004eb6:	d1f9      	bne.n	8004eac <_svfiprintf_r+0x50>
 8004eb8:	ebba 0b04 	subs.w	fp, sl, r4
 8004ebc:	d00b      	beq.n	8004ed6 <_svfiprintf_r+0x7a>
 8004ebe:	465b      	mov	r3, fp
 8004ec0:	4622      	mov	r2, r4
 8004ec2:	4629      	mov	r1, r5
 8004ec4:	4638      	mov	r0, r7
 8004ec6:	f7ff ff6d 	bl	8004da4 <__ssputs_r>
 8004eca:	3001      	adds	r0, #1
 8004ecc:	f000 80aa 	beq.w	8005024 <_svfiprintf_r+0x1c8>
 8004ed0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ed2:	445a      	add	r2, fp
 8004ed4:	9209      	str	r2, [sp, #36]	; 0x24
 8004ed6:	f89a 3000 	ldrb.w	r3, [sl]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	f000 80a2 	beq.w	8005024 <_svfiprintf_r+0x1c8>
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ee6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004eea:	f10a 0a01 	add.w	sl, sl, #1
 8004eee:	9304      	str	r3, [sp, #16]
 8004ef0:	9307      	str	r3, [sp, #28]
 8004ef2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ef6:	931a      	str	r3, [sp, #104]	; 0x68
 8004ef8:	4654      	mov	r4, sl
 8004efa:	2205      	movs	r2, #5
 8004efc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f00:	4851      	ldr	r0, [pc, #324]	; (8005048 <_svfiprintf_r+0x1ec>)
 8004f02:	f000 fa41 	bl	8005388 <memchr>
 8004f06:	9a04      	ldr	r2, [sp, #16]
 8004f08:	b9d8      	cbnz	r0, 8004f42 <_svfiprintf_r+0xe6>
 8004f0a:	06d0      	lsls	r0, r2, #27
 8004f0c:	bf44      	itt	mi
 8004f0e:	2320      	movmi	r3, #32
 8004f10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f14:	0711      	lsls	r1, r2, #28
 8004f16:	bf44      	itt	mi
 8004f18:	232b      	movmi	r3, #43	; 0x2b
 8004f1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f1e:	f89a 3000 	ldrb.w	r3, [sl]
 8004f22:	2b2a      	cmp	r3, #42	; 0x2a
 8004f24:	d015      	beq.n	8004f52 <_svfiprintf_r+0xf6>
 8004f26:	4654      	mov	r4, sl
 8004f28:	2000      	movs	r0, #0
 8004f2a:	f04f 0c0a 	mov.w	ip, #10
 8004f2e:	9a07      	ldr	r2, [sp, #28]
 8004f30:	4621      	mov	r1, r4
 8004f32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f36:	3b30      	subs	r3, #48	; 0x30
 8004f38:	2b09      	cmp	r3, #9
 8004f3a:	d94e      	bls.n	8004fda <_svfiprintf_r+0x17e>
 8004f3c:	b1b0      	cbz	r0, 8004f6c <_svfiprintf_r+0x110>
 8004f3e:	9207      	str	r2, [sp, #28]
 8004f40:	e014      	b.n	8004f6c <_svfiprintf_r+0x110>
 8004f42:	eba0 0308 	sub.w	r3, r0, r8
 8004f46:	fa09 f303 	lsl.w	r3, r9, r3
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	46a2      	mov	sl, r4
 8004f4e:	9304      	str	r3, [sp, #16]
 8004f50:	e7d2      	b.n	8004ef8 <_svfiprintf_r+0x9c>
 8004f52:	9b03      	ldr	r3, [sp, #12]
 8004f54:	1d19      	adds	r1, r3, #4
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	9103      	str	r1, [sp, #12]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	bfbb      	ittet	lt
 8004f5e:	425b      	neglt	r3, r3
 8004f60:	f042 0202 	orrlt.w	r2, r2, #2
 8004f64:	9307      	strge	r3, [sp, #28]
 8004f66:	9307      	strlt	r3, [sp, #28]
 8004f68:	bfb8      	it	lt
 8004f6a:	9204      	strlt	r2, [sp, #16]
 8004f6c:	7823      	ldrb	r3, [r4, #0]
 8004f6e:	2b2e      	cmp	r3, #46	; 0x2e
 8004f70:	d10c      	bne.n	8004f8c <_svfiprintf_r+0x130>
 8004f72:	7863      	ldrb	r3, [r4, #1]
 8004f74:	2b2a      	cmp	r3, #42	; 0x2a
 8004f76:	d135      	bne.n	8004fe4 <_svfiprintf_r+0x188>
 8004f78:	9b03      	ldr	r3, [sp, #12]
 8004f7a:	3402      	adds	r4, #2
 8004f7c:	1d1a      	adds	r2, r3, #4
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	9203      	str	r2, [sp, #12]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	bfb8      	it	lt
 8004f86:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f8a:	9305      	str	r3, [sp, #20]
 8004f8c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800504c <_svfiprintf_r+0x1f0>
 8004f90:	2203      	movs	r2, #3
 8004f92:	4650      	mov	r0, sl
 8004f94:	7821      	ldrb	r1, [r4, #0]
 8004f96:	f000 f9f7 	bl	8005388 <memchr>
 8004f9a:	b140      	cbz	r0, 8004fae <_svfiprintf_r+0x152>
 8004f9c:	2340      	movs	r3, #64	; 0x40
 8004f9e:	eba0 000a 	sub.w	r0, r0, sl
 8004fa2:	fa03 f000 	lsl.w	r0, r3, r0
 8004fa6:	9b04      	ldr	r3, [sp, #16]
 8004fa8:	3401      	adds	r4, #1
 8004faa:	4303      	orrs	r3, r0
 8004fac:	9304      	str	r3, [sp, #16]
 8004fae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fb2:	2206      	movs	r2, #6
 8004fb4:	4826      	ldr	r0, [pc, #152]	; (8005050 <_svfiprintf_r+0x1f4>)
 8004fb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004fba:	f000 f9e5 	bl	8005388 <memchr>
 8004fbe:	2800      	cmp	r0, #0
 8004fc0:	d038      	beq.n	8005034 <_svfiprintf_r+0x1d8>
 8004fc2:	4b24      	ldr	r3, [pc, #144]	; (8005054 <_svfiprintf_r+0x1f8>)
 8004fc4:	bb1b      	cbnz	r3, 800500e <_svfiprintf_r+0x1b2>
 8004fc6:	9b03      	ldr	r3, [sp, #12]
 8004fc8:	3307      	adds	r3, #7
 8004fca:	f023 0307 	bic.w	r3, r3, #7
 8004fce:	3308      	adds	r3, #8
 8004fd0:	9303      	str	r3, [sp, #12]
 8004fd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fd4:	4433      	add	r3, r6
 8004fd6:	9309      	str	r3, [sp, #36]	; 0x24
 8004fd8:	e767      	b.n	8004eaa <_svfiprintf_r+0x4e>
 8004fda:	460c      	mov	r4, r1
 8004fdc:	2001      	movs	r0, #1
 8004fde:	fb0c 3202 	mla	r2, ip, r2, r3
 8004fe2:	e7a5      	b.n	8004f30 <_svfiprintf_r+0xd4>
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	f04f 0c0a 	mov.w	ip, #10
 8004fea:	4619      	mov	r1, r3
 8004fec:	3401      	adds	r4, #1
 8004fee:	9305      	str	r3, [sp, #20]
 8004ff0:	4620      	mov	r0, r4
 8004ff2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ff6:	3a30      	subs	r2, #48	; 0x30
 8004ff8:	2a09      	cmp	r2, #9
 8004ffa:	d903      	bls.n	8005004 <_svfiprintf_r+0x1a8>
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d0c5      	beq.n	8004f8c <_svfiprintf_r+0x130>
 8005000:	9105      	str	r1, [sp, #20]
 8005002:	e7c3      	b.n	8004f8c <_svfiprintf_r+0x130>
 8005004:	4604      	mov	r4, r0
 8005006:	2301      	movs	r3, #1
 8005008:	fb0c 2101 	mla	r1, ip, r1, r2
 800500c:	e7f0      	b.n	8004ff0 <_svfiprintf_r+0x194>
 800500e:	ab03      	add	r3, sp, #12
 8005010:	9300      	str	r3, [sp, #0]
 8005012:	462a      	mov	r2, r5
 8005014:	4638      	mov	r0, r7
 8005016:	4b10      	ldr	r3, [pc, #64]	; (8005058 <_svfiprintf_r+0x1fc>)
 8005018:	a904      	add	r1, sp, #16
 800501a:	f3af 8000 	nop.w
 800501e:	1c42      	adds	r2, r0, #1
 8005020:	4606      	mov	r6, r0
 8005022:	d1d6      	bne.n	8004fd2 <_svfiprintf_r+0x176>
 8005024:	89ab      	ldrh	r3, [r5, #12]
 8005026:	065b      	lsls	r3, r3, #25
 8005028:	f53f af2c 	bmi.w	8004e84 <_svfiprintf_r+0x28>
 800502c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800502e:	b01d      	add	sp, #116	; 0x74
 8005030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005034:	ab03      	add	r3, sp, #12
 8005036:	9300      	str	r3, [sp, #0]
 8005038:	462a      	mov	r2, r5
 800503a:	4638      	mov	r0, r7
 800503c:	4b06      	ldr	r3, [pc, #24]	; (8005058 <_svfiprintf_r+0x1fc>)
 800503e:	a904      	add	r1, sp, #16
 8005040:	f000 f87c 	bl	800513c <_printf_i>
 8005044:	e7eb      	b.n	800501e <_svfiprintf_r+0x1c2>
 8005046:	bf00      	nop
 8005048:	080311ac 	.word	0x080311ac
 800504c:	080311b2 	.word	0x080311b2
 8005050:	080311b6 	.word	0x080311b6
 8005054:	00000000 	.word	0x00000000
 8005058:	08004da5 	.word	0x08004da5

0800505c <_printf_common>:
 800505c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005060:	4616      	mov	r6, r2
 8005062:	4699      	mov	r9, r3
 8005064:	688a      	ldr	r2, [r1, #8]
 8005066:	690b      	ldr	r3, [r1, #16]
 8005068:	4607      	mov	r7, r0
 800506a:	4293      	cmp	r3, r2
 800506c:	bfb8      	it	lt
 800506e:	4613      	movlt	r3, r2
 8005070:	6033      	str	r3, [r6, #0]
 8005072:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005076:	460c      	mov	r4, r1
 8005078:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800507c:	b10a      	cbz	r2, 8005082 <_printf_common+0x26>
 800507e:	3301      	adds	r3, #1
 8005080:	6033      	str	r3, [r6, #0]
 8005082:	6823      	ldr	r3, [r4, #0]
 8005084:	0699      	lsls	r1, r3, #26
 8005086:	bf42      	ittt	mi
 8005088:	6833      	ldrmi	r3, [r6, #0]
 800508a:	3302      	addmi	r3, #2
 800508c:	6033      	strmi	r3, [r6, #0]
 800508e:	6825      	ldr	r5, [r4, #0]
 8005090:	f015 0506 	ands.w	r5, r5, #6
 8005094:	d106      	bne.n	80050a4 <_printf_common+0x48>
 8005096:	f104 0a19 	add.w	sl, r4, #25
 800509a:	68e3      	ldr	r3, [r4, #12]
 800509c:	6832      	ldr	r2, [r6, #0]
 800509e:	1a9b      	subs	r3, r3, r2
 80050a0:	42ab      	cmp	r3, r5
 80050a2:	dc28      	bgt.n	80050f6 <_printf_common+0x9a>
 80050a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80050a8:	1e13      	subs	r3, r2, #0
 80050aa:	6822      	ldr	r2, [r4, #0]
 80050ac:	bf18      	it	ne
 80050ae:	2301      	movne	r3, #1
 80050b0:	0692      	lsls	r2, r2, #26
 80050b2:	d42d      	bmi.n	8005110 <_printf_common+0xb4>
 80050b4:	4649      	mov	r1, r9
 80050b6:	4638      	mov	r0, r7
 80050b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80050bc:	47c0      	blx	r8
 80050be:	3001      	adds	r0, #1
 80050c0:	d020      	beq.n	8005104 <_printf_common+0xa8>
 80050c2:	6823      	ldr	r3, [r4, #0]
 80050c4:	68e5      	ldr	r5, [r4, #12]
 80050c6:	f003 0306 	and.w	r3, r3, #6
 80050ca:	2b04      	cmp	r3, #4
 80050cc:	bf18      	it	ne
 80050ce:	2500      	movne	r5, #0
 80050d0:	6832      	ldr	r2, [r6, #0]
 80050d2:	f04f 0600 	mov.w	r6, #0
 80050d6:	68a3      	ldr	r3, [r4, #8]
 80050d8:	bf08      	it	eq
 80050da:	1aad      	subeq	r5, r5, r2
 80050dc:	6922      	ldr	r2, [r4, #16]
 80050de:	bf08      	it	eq
 80050e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050e4:	4293      	cmp	r3, r2
 80050e6:	bfc4      	itt	gt
 80050e8:	1a9b      	subgt	r3, r3, r2
 80050ea:	18ed      	addgt	r5, r5, r3
 80050ec:	341a      	adds	r4, #26
 80050ee:	42b5      	cmp	r5, r6
 80050f0:	d11a      	bne.n	8005128 <_printf_common+0xcc>
 80050f2:	2000      	movs	r0, #0
 80050f4:	e008      	b.n	8005108 <_printf_common+0xac>
 80050f6:	2301      	movs	r3, #1
 80050f8:	4652      	mov	r2, sl
 80050fa:	4649      	mov	r1, r9
 80050fc:	4638      	mov	r0, r7
 80050fe:	47c0      	blx	r8
 8005100:	3001      	adds	r0, #1
 8005102:	d103      	bne.n	800510c <_printf_common+0xb0>
 8005104:	f04f 30ff 	mov.w	r0, #4294967295
 8005108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800510c:	3501      	adds	r5, #1
 800510e:	e7c4      	b.n	800509a <_printf_common+0x3e>
 8005110:	2030      	movs	r0, #48	; 0x30
 8005112:	18e1      	adds	r1, r4, r3
 8005114:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005118:	1c5a      	adds	r2, r3, #1
 800511a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800511e:	4422      	add	r2, r4
 8005120:	3302      	adds	r3, #2
 8005122:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005126:	e7c5      	b.n	80050b4 <_printf_common+0x58>
 8005128:	2301      	movs	r3, #1
 800512a:	4622      	mov	r2, r4
 800512c:	4649      	mov	r1, r9
 800512e:	4638      	mov	r0, r7
 8005130:	47c0      	blx	r8
 8005132:	3001      	adds	r0, #1
 8005134:	d0e6      	beq.n	8005104 <_printf_common+0xa8>
 8005136:	3601      	adds	r6, #1
 8005138:	e7d9      	b.n	80050ee <_printf_common+0x92>
	...

0800513c <_printf_i>:
 800513c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005140:	7e0f      	ldrb	r7, [r1, #24]
 8005142:	4691      	mov	r9, r2
 8005144:	2f78      	cmp	r7, #120	; 0x78
 8005146:	4680      	mov	r8, r0
 8005148:	460c      	mov	r4, r1
 800514a:	469a      	mov	sl, r3
 800514c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800514e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005152:	d807      	bhi.n	8005164 <_printf_i+0x28>
 8005154:	2f62      	cmp	r7, #98	; 0x62
 8005156:	d80a      	bhi.n	800516e <_printf_i+0x32>
 8005158:	2f00      	cmp	r7, #0
 800515a:	f000 80d9 	beq.w	8005310 <_printf_i+0x1d4>
 800515e:	2f58      	cmp	r7, #88	; 0x58
 8005160:	f000 80a4 	beq.w	80052ac <_printf_i+0x170>
 8005164:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005168:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800516c:	e03a      	b.n	80051e4 <_printf_i+0xa8>
 800516e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005172:	2b15      	cmp	r3, #21
 8005174:	d8f6      	bhi.n	8005164 <_printf_i+0x28>
 8005176:	a101      	add	r1, pc, #4	; (adr r1, 800517c <_printf_i+0x40>)
 8005178:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800517c:	080051d5 	.word	0x080051d5
 8005180:	080051e9 	.word	0x080051e9
 8005184:	08005165 	.word	0x08005165
 8005188:	08005165 	.word	0x08005165
 800518c:	08005165 	.word	0x08005165
 8005190:	08005165 	.word	0x08005165
 8005194:	080051e9 	.word	0x080051e9
 8005198:	08005165 	.word	0x08005165
 800519c:	08005165 	.word	0x08005165
 80051a0:	08005165 	.word	0x08005165
 80051a4:	08005165 	.word	0x08005165
 80051a8:	080052f7 	.word	0x080052f7
 80051ac:	08005219 	.word	0x08005219
 80051b0:	080052d9 	.word	0x080052d9
 80051b4:	08005165 	.word	0x08005165
 80051b8:	08005165 	.word	0x08005165
 80051bc:	08005319 	.word	0x08005319
 80051c0:	08005165 	.word	0x08005165
 80051c4:	08005219 	.word	0x08005219
 80051c8:	08005165 	.word	0x08005165
 80051cc:	08005165 	.word	0x08005165
 80051d0:	080052e1 	.word	0x080052e1
 80051d4:	682b      	ldr	r3, [r5, #0]
 80051d6:	1d1a      	adds	r2, r3, #4
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	602a      	str	r2, [r5, #0]
 80051dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051e4:	2301      	movs	r3, #1
 80051e6:	e0a4      	b.n	8005332 <_printf_i+0x1f6>
 80051e8:	6820      	ldr	r0, [r4, #0]
 80051ea:	6829      	ldr	r1, [r5, #0]
 80051ec:	0606      	lsls	r6, r0, #24
 80051ee:	f101 0304 	add.w	r3, r1, #4
 80051f2:	d50a      	bpl.n	800520a <_printf_i+0xce>
 80051f4:	680e      	ldr	r6, [r1, #0]
 80051f6:	602b      	str	r3, [r5, #0]
 80051f8:	2e00      	cmp	r6, #0
 80051fa:	da03      	bge.n	8005204 <_printf_i+0xc8>
 80051fc:	232d      	movs	r3, #45	; 0x2d
 80051fe:	4276      	negs	r6, r6
 8005200:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005204:	230a      	movs	r3, #10
 8005206:	485e      	ldr	r0, [pc, #376]	; (8005380 <_printf_i+0x244>)
 8005208:	e019      	b.n	800523e <_printf_i+0x102>
 800520a:	680e      	ldr	r6, [r1, #0]
 800520c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005210:	602b      	str	r3, [r5, #0]
 8005212:	bf18      	it	ne
 8005214:	b236      	sxthne	r6, r6
 8005216:	e7ef      	b.n	80051f8 <_printf_i+0xbc>
 8005218:	682b      	ldr	r3, [r5, #0]
 800521a:	6820      	ldr	r0, [r4, #0]
 800521c:	1d19      	adds	r1, r3, #4
 800521e:	6029      	str	r1, [r5, #0]
 8005220:	0601      	lsls	r1, r0, #24
 8005222:	d501      	bpl.n	8005228 <_printf_i+0xec>
 8005224:	681e      	ldr	r6, [r3, #0]
 8005226:	e002      	b.n	800522e <_printf_i+0xf2>
 8005228:	0646      	lsls	r6, r0, #25
 800522a:	d5fb      	bpl.n	8005224 <_printf_i+0xe8>
 800522c:	881e      	ldrh	r6, [r3, #0]
 800522e:	2f6f      	cmp	r7, #111	; 0x6f
 8005230:	bf0c      	ite	eq
 8005232:	2308      	moveq	r3, #8
 8005234:	230a      	movne	r3, #10
 8005236:	4852      	ldr	r0, [pc, #328]	; (8005380 <_printf_i+0x244>)
 8005238:	2100      	movs	r1, #0
 800523a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800523e:	6865      	ldr	r5, [r4, #4]
 8005240:	2d00      	cmp	r5, #0
 8005242:	bfa8      	it	ge
 8005244:	6821      	ldrge	r1, [r4, #0]
 8005246:	60a5      	str	r5, [r4, #8]
 8005248:	bfa4      	itt	ge
 800524a:	f021 0104 	bicge.w	r1, r1, #4
 800524e:	6021      	strge	r1, [r4, #0]
 8005250:	b90e      	cbnz	r6, 8005256 <_printf_i+0x11a>
 8005252:	2d00      	cmp	r5, #0
 8005254:	d04d      	beq.n	80052f2 <_printf_i+0x1b6>
 8005256:	4615      	mov	r5, r2
 8005258:	fbb6 f1f3 	udiv	r1, r6, r3
 800525c:	fb03 6711 	mls	r7, r3, r1, r6
 8005260:	5dc7      	ldrb	r7, [r0, r7]
 8005262:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005266:	4637      	mov	r7, r6
 8005268:	42bb      	cmp	r3, r7
 800526a:	460e      	mov	r6, r1
 800526c:	d9f4      	bls.n	8005258 <_printf_i+0x11c>
 800526e:	2b08      	cmp	r3, #8
 8005270:	d10b      	bne.n	800528a <_printf_i+0x14e>
 8005272:	6823      	ldr	r3, [r4, #0]
 8005274:	07de      	lsls	r6, r3, #31
 8005276:	d508      	bpl.n	800528a <_printf_i+0x14e>
 8005278:	6923      	ldr	r3, [r4, #16]
 800527a:	6861      	ldr	r1, [r4, #4]
 800527c:	4299      	cmp	r1, r3
 800527e:	bfde      	ittt	le
 8005280:	2330      	movle	r3, #48	; 0x30
 8005282:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005286:	f105 35ff 	addle.w	r5, r5, #4294967295
 800528a:	1b52      	subs	r2, r2, r5
 800528c:	6122      	str	r2, [r4, #16]
 800528e:	464b      	mov	r3, r9
 8005290:	4621      	mov	r1, r4
 8005292:	4640      	mov	r0, r8
 8005294:	f8cd a000 	str.w	sl, [sp]
 8005298:	aa03      	add	r2, sp, #12
 800529a:	f7ff fedf 	bl	800505c <_printf_common>
 800529e:	3001      	adds	r0, #1
 80052a0:	d14c      	bne.n	800533c <_printf_i+0x200>
 80052a2:	f04f 30ff 	mov.w	r0, #4294967295
 80052a6:	b004      	add	sp, #16
 80052a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052ac:	4834      	ldr	r0, [pc, #208]	; (8005380 <_printf_i+0x244>)
 80052ae:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80052b2:	6829      	ldr	r1, [r5, #0]
 80052b4:	6823      	ldr	r3, [r4, #0]
 80052b6:	f851 6b04 	ldr.w	r6, [r1], #4
 80052ba:	6029      	str	r1, [r5, #0]
 80052bc:	061d      	lsls	r5, r3, #24
 80052be:	d514      	bpl.n	80052ea <_printf_i+0x1ae>
 80052c0:	07df      	lsls	r7, r3, #31
 80052c2:	bf44      	itt	mi
 80052c4:	f043 0320 	orrmi.w	r3, r3, #32
 80052c8:	6023      	strmi	r3, [r4, #0]
 80052ca:	b91e      	cbnz	r6, 80052d4 <_printf_i+0x198>
 80052cc:	6823      	ldr	r3, [r4, #0]
 80052ce:	f023 0320 	bic.w	r3, r3, #32
 80052d2:	6023      	str	r3, [r4, #0]
 80052d4:	2310      	movs	r3, #16
 80052d6:	e7af      	b.n	8005238 <_printf_i+0xfc>
 80052d8:	6823      	ldr	r3, [r4, #0]
 80052da:	f043 0320 	orr.w	r3, r3, #32
 80052de:	6023      	str	r3, [r4, #0]
 80052e0:	2378      	movs	r3, #120	; 0x78
 80052e2:	4828      	ldr	r0, [pc, #160]	; (8005384 <_printf_i+0x248>)
 80052e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80052e8:	e7e3      	b.n	80052b2 <_printf_i+0x176>
 80052ea:	0659      	lsls	r1, r3, #25
 80052ec:	bf48      	it	mi
 80052ee:	b2b6      	uxthmi	r6, r6
 80052f0:	e7e6      	b.n	80052c0 <_printf_i+0x184>
 80052f2:	4615      	mov	r5, r2
 80052f4:	e7bb      	b.n	800526e <_printf_i+0x132>
 80052f6:	682b      	ldr	r3, [r5, #0]
 80052f8:	6826      	ldr	r6, [r4, #0]
 80052fa:	1d18      	adds	r0, r3, #4
 80052fc:	6961      	ldr	r1, [r4, #20]
 80052fe:	6028      	str	r0, [r5, #0]
 8005300:	0635      	lsls	r5, r6, #24
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	d501      	bpl.n	800530a <_printf_i+0x1ce>
 8005306:	6019      	str	r1, [r3, #0]
 8005308:	e002      	b.n	8005310 <_printf_i+0x1d4>
 800530a:	0670      	lsls	r0, r6, #25
 800530c:	d5fb      	bpl.n	8005306 <_printf_i+0x1ca>
 800530e:	8019      	strh	r1, [r3, #0]
 8005310:	2300      	movs	r3, #0
 8005312:	4615      	mov	r5, r2
 8005314:	6123      	str	r3, [r4, #16]
 8005316:	e7ba      	b.n	800528e <_printf_i+0x152>
 8005318:	682b      	ldr	r3, [r5, #0]
 800531a:	2100      	movs	r1, #0
 800531c:	1d1a      	adds	r2, r3, #4
 800531e:	602a      	str	r2, [r5, #0]
 8005320:	681d      	ldr	r5, [r3, #0]
 8005322:	6862      	ldr	r2, [r4, #4]
 8005324:	4628      	mov	r0, r5
 8005326:	f000 f82f 	bl	8005388 <memchr>
 800532a:	b108      	cbz	r0, 8005330 <_printf_i+0x1f4>
 800532c:	1b40      	subs	r0, r0, r5
 800532e:	6060      	str	r0, [r4, #4]
 8005330:	6863      	ldr	r3, [r4, #4]
 8005332:	6123      	str	r3, [r4, #16]
 8005334:	2300      	movs	r3, #0
 8005336:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800533a:	e7a8      	b.n	800528e <_printf_i+0x152>
 800533c:	462a      	mov	r2, r5
 800533e:	4649      	mov	r1, r9
 8005340:	4640      	mov	r0, r8
 8005342:	6923      	ldr	r3, [r4, #16]
 8005344:	47d0      	blx	sl
 8005346:	3001      	adds	r0, #1
 8005348:	d0ab      	beq.n	80052a2 <_printf_i+0x166>
 800534a:	6823      	ldr	r3, [r4, #0]
 800534c:	079b      	lsls	r3, r3, #30
 800534e:	d413      	bmi.n	8005378 <_printf_i+0x23c>
 8005350:	68e0      	ldr	r0, [r4, #12]
 8005352:	9b03      	ldr	r3, [sp, #12]
 8005354:	4298      	cmp	r0, r3
 8005356:	bfb8      	it	lt
 8005358:	4618      	movlt	r0, r3
 800535a:	e7a4      	b.n	80052a6 <_printf_i+0x16a>
 800535c:	2301      	movs	r3, #1
 800535e:	4632      	mov	r2, r6
 8005360:	4649      	mov	r1, r9
 8005362:	4640      	mov	r0, r8
 8005364:	47d0      	blx	sl
 8005366:	3001      	adds	r0, #1
 8005368:	d09b      	beq.n	80052a2 <_printf_i+0x166>
 800536a:	3501      	adds	r5, #1
 800536c:	68e3      	ldr	r3, [r4, #12]
 800536e:	9903      	ldr	r1, [sp, #12]
 8005370:	1a5b      	subs	r3, r3, r1
 8005372:	42ab      	cmp	r3, r5
 8005374:	dcf2      	bgt.n	800535c <_printf_i+0x220>
 8005376:	e7eb      	b.n	8005350 <_printf_i+0x214>
 8005378:	2500      	movs	r5, #0
 800537a:	f104 0619 	add.w	r6, r4, #25
 800537e:	e7f5      	b.n	800536c <_printf_i+0x230>
 8005380:	080311bd 	.word	0x080311bd
 8005384:	080311ce 	.word	0x080311ce

08005388 <memchr>:
 8005388:	4603      	mov	r3, r0
 800538a:	b510      	push	{r4, lr}
 800538c:	b2c9      	uxtb	r1, r1
 800538e:	4402      	add	r2, r0
 8005390:	4293      	cmp	r3, r2
 8005392:	4618      	mov	r0, r3
 8005394:	d101      	bne.n	800539a <memchr+0x12>
 8005396:	2000      	movs	r0, #0
 8005398:	e003      	b.n	80053a2 <memchr+0x1a>
 800539a:	7804      	ldrb	r4, [r0, #0]
 800539c:	3301      	adds	r3, #1
 800539e:	428c      	cmp	r4, r1
 80053a0:	d1f6      	bne.n	8005390 <memchr+0x8>
 80053a2:	bd10      	pop	{r4, pc}

080053a4 <memmove>:
 80053a4:	4288      	cmp	r0, r1
 80053a6:	b510      	push	{r4, lr}
 80053a8:	eb01 0402 	add.w	r4, r1, r2
 80053ac:	d902      	bls.n	80053b4 <memmove+0x10>
 80053ae:	4284      	cmp	r4, r0
 80053b0:	4623      	mov	r3, r4
 80053b2:	d807      	bhi.n	80053c4 <memmove+0x20>
 80053b4:	1e43      	subs	r3, r0, #1
 80053b6:	42a1      	cmp	r1, r4
 80053b8:	d008      	beq.n	80053cc <memmove+0x28>
 80053ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80053be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80053c2:	e7f8      	b.n	80053b6 <memmove+0x12>
 80053c4:	4601      	mov	r1, r0
 80053c6:	4402      	add	r2, r0
 80053c8:	428a      	cmp	r2, r1
 80053ca:	d100      	bne.n	80053ce <memmove+0x2a>
 80053cc:	bd10      	pop	{r4, pc}
 80053ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80053d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80053d6:	e7f7      	b.n	80053c8 <memmove+0x24>

080053d8 <_free_r>:
 80053d8:	b538      	push	{r3, r4, r5, lr}
 80053da:	4605      	mov	r5, r0
 80053dc:	2900      	cmp	r1, #0
 80053de:	d040      	beq.n	8005462 <_free_r+0x8a>
 80053e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053e4:	1f0c      	subs	r4, r1, #4
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	bfb8      	it	lt
 80053ea:	18e4      	addlt	r4, r4, r3
 80053ec:	f000 f910 	bl	8005610 <__malloc_lock>
 80053f0:	4a1c      	ldr	r2, [pc, #112]	; (8005464 <_free_r+0x8c>)
 80053f2:	6813      	ldr	r3, [r2, #0]
 80053f4:	b933      	cbnz	r3, 8005404 <_free_r+0x2c>
 80053f6:	6063      	str	r3, [r4, #4]
 80053f8:	6014      	str	r4, [r2, #0]
 80053fa:	4628      	mov	r0, r5
 80053fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005400:	f000 b90c 	b.w	800561c <__malloc_unlock>
 8005404:	42a3      	cmp	r3, r4
 8005406:	d908      	bls.n	800541a <_free_r+0x42>
 8005408:	6820      	ldr	r0, [r4, #0]
 800540a:	1821      	adds	r1, r4, r0
 800540c:	428b      	cmp	r3, r1
 800540e:	bf01      	itttt	eq
 8005410:	6819      	ldreq	r1, [r3, #0]
 8005412:	685b      	ldreq	r3, [r3, #4]
 8005414:	1809      	addeq	r1, r1, r0
 8005416:	6021      	streq	r1, [r4, #0]
 8005418:	e7ed      	b.n	80053f6 <_free_r+0x1e>
 800541a:	461a      	mov	r2, r3
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	b10b      	cbz	r3, 8005424 <_free_r+0x4c>
 8005420:	42a3      	cmp	r3, r4
 8005422:	d9fa      	bls.n	800541a <_free_r+0x42>
 8005424:	6811      	ldr	r1, [r2, #0]
 8005426:	1850      	adds	r0, r2, r1
 8005428:	42a0      	cmp	r0, r4
 800542a:	d10b      	bne.n	8005444 <_free_r+0x6c>
 800542c:	6820      	ldr	r0, [r4, #0]
 800542e:	4401      	add	r1, r0
 8005430:	1850      	adds	r0, r2, r1
 8005432:	4283      	cmp	r3, r0
 8005434:	6011      	str	r1, [r2, #0]
 8005436:	d1e0      	bne.n	80053fa <_free_r+0x22>
 8005438:	6818      	ldr	r0, [r3, #0]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	4401      	add	r1, r0
 800543e:	6011      	str	r1, [r2, #0]
 8005440:	6053      	str	r3, [r2, #4]
 8005442:	e7da      	b.n	80053fa <_free_r+0x22>
 8005444:	d902      	bls.n	800544c <_free_r+0x74>
 8005446:	230c      	movs	r3, #12
 8005448:	602b      	str	r3, [r5, #0]
 800544a:	e7d6      	b.n	80053fa <_free_r+0x22>
 800544c:	6820      	ldr	r0, [r4, #0]
 800544e:	1821      	adds	r1, r4, r0
 8005450:	428b      	cmp	r3, r1
 8005452:	bf01      	itttt	eq
 8005454:	6819      	ldreq	r1, [r3, #0]
 8005456:	685b      	ldreq	r3, [r3, #4]
 8005458:	1809      	addeq	r1, r1, r0
 800545a:	6021      	streq	r1, [r4, #0]
 800545c:	6063      	str	r3, [r4, #4]
 800545e:	6054      	str	r4, [r2, #4]
 8005460:	e7cb      	b.n	80053fa <_free_r+0x22>
 8005462:	bd38      	pop	{r3, r4, r5, pc}
 8005464:	200001e8 	.word	0x200001e8

08005468 <sbrk_aligned>:
 8005468:	b570      	push	{r4, r5, r6, lr}
 800546a:	4e0e      	ldr	r6, [pc, #56]	; (80054a4 <sbrk_aligned+0x3c>)
 800546c:	460c      	mov	r4, r1
 800546e:	6831      	ldr	r1, [r6, #0]
 8005470:	4605      	mov	r5, r0
 8005472:	b911      	cbnz	r1, 800547a <sbrk_aligned+0x12>
 8005474:	f000 f8bc 	bl	80055f0 <_sbrk_r>
 8005478:	6030      	str	r0, [r6, #0]
 800547a:	4621      	mov	r1, r4
 800547c:	4628      	mov	r0, r5
 800547e:	f000 f8b7 	bl	80055f0 <_sbrk_r>
 8005482:	1c43      	adds	r3, r0, #1
 8005484:	d00a      	beq.n	800549c <sbrk_aligned+0x34>
 8005486:	1cc4      	adds	r4, r0, #3
 8005488:	f024 0403 	bic.w	r4, r4, #3
 800548c:	42a0      	cmp	r0, r4
 800548e:	d007      	beq.n	80054a0 <sbrk_aligned+0x38>
 8005490:	1a21      	subs	r1, r4, r0
 8005492:	4628      	mov	r0, r5
 8005494:	f000 f8ac 	bl	80055f0 <_sbrk_r>
 8005498:	3001      	adds	r0, #1
 800549a:	d101      	bne.n	80054a0 <sbrk_aligned+0x38>
 800549c:	f04f 34ff 	mov.w	r4, #4294967295
 80054a0:	4620      	mov	r0, r4
 80054a2:	bd70      	pop	{r4, r5, r6, pc}
 80054a4:	200001ec 	.word	0x200001ec

080054a8 <_malloc_r>:
 80054a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054ac:	1ccd      	adds	r5, r1, #3
 80054ae:	f025 0503 	bic.w	r5, r5, #3
 80054b2:	3508      	adds	r5, #8
 80054b4:	2d0c      	cmp	r5, #12
 80054b6:	bf38      	it	cc
 80054b8:	250c      	movcc	r5, #12
 80054ba:	2d00      	cmp	r5, #0
 80054bc:	4607      	mov	r7, r0
 80054be:	db01      	blt.n	80054c4 <_malloc_r+0x1c>
 80054c0:	42a9      	cmp	r1, r5
 80054c2:	d905      	bls.n	80054d0 <_malloc_r+0x28>
 80054c4:	230c      	movs	r3, #12
 80054c6:	2600      	movs	r6, #0
 80054c8:	603b      	str	r3, [r7, #0]
 80054ca:	4630      	mov	r0, r6
 80054cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054d0:	4e2e      	ldr	r6, [pc, #184]	; (800558c <_malloc_r+0xe4>)
 80054d2:	f000 f89d 	bl	8005610 <__malloc_lock>
 80054d6:	6833      	ldr	r3, [r6, #0]
 80054d8:	461c      	mov	r4, r3
 80054da:	bb34      	cbnz	r4, 800552a <_malloc_r+0x82>
 80054dc:	4629      	mov	r1, r5
 80054de:	4638      	mov	r0, r7
 80054e0:	f7ff ffc2 	bl	8005468 <sbrk_aligned>
 80054e4:	1c43      	adds	r3, r0, #1
 80054e6:	4604      	mov	r4, r0
 80054e8:	d14d      	bne.n	8005586 <_malloc_r+0xde>
 80054ea:	6834      	ldr	r4, [r6, #0]
 80054ec:	4626      	mov	r6, r4
 80054ee:	2e00      	cmp	r6, #0
 80054f0:	d140      	bne.n	8005574 <_malloc_r+0xcc>
 80054f2:	6823      	ldr	r3, [r4, #0]
 80054f4:	4631      	mov	r1, r6
 80054f6:	4638      	mov	r0, r7
 80054f8:	eb04 0803 	add.w	r8, r4, r3
 80054fc:	f000 f878 	bl	80055f0 <_sbrk_r>
 8005500:	4580      	cmp	r8, r0
 8005502:	d13a      	bne.n	800557a <_malloc_r+0xd2>
 8005504:	6821      	ldr	r1, [r4, #0]
 8005506:	3503      	adds	r5, #3
 8005508:	1a6d      	subs	r5, r5, r1
 800550a:	f025 0503 	bic.w	r5, r5, #3
 800550e:	3508      	adds	r5, #8
 8005510:	2d0c      	cmp	r5, #12
 8005512:	bf38      	it	cc
 8005514:	250c      	movcc	r5, #12
 8005516:	4638      	mov	r0, r7
 8005518:	4629      	mov	r1, r5
 800551a:	f7ff ffa5 	bl	8005468 <sbrk_aligned>
 800551e:	3001      	adds	r0, #1
 8005520:	d02b      	beq.n	800557a <_malloc_r+0xd2>
 8005522:	6823      	ldr	r3, [r4, #0]
 8005524:	442b      	add	r3, r5
 8005526:	6023      	str	r3, [r4, #0]
 8005528:	e00e      	b.n	8005548 <_malloc_r+0xa0>
 800552a:	6822      	ldr	r2, [r4, #0]
 800552c:	1b52      	subs	r2, r2, r5
 800552e:	d41e      	bmi.n	800556e <_malloc_r+0xc6>
 8005530:	2a0b      	cmp	r2, #11
 8005532:	d916      	bls.n	8005562 <_malloc_r+0xba>
 8005534:	1961      	adds	r1, r4, r5
 8005536:	42a3      	cmp	r3, r4
 8005538:	6025      	str	r5, [r4, #0]
 800553a:	bf18      	it	ne
 800553c:	6059      	strne	r1, [r3, #4]
 800553e:	6863      	ldr	r3, [r4, #4]
 8005540:	bf08      	it	eq
 8005542:	6031      	streq	r1, [r6, #0]
 8005544:	5162      	str	r2, [r4, r5]
 8005546:	604b      	str	r3, [r1, #4]
 8005548:	4638      	mov	r0, r7
 800554a:	f104 060b 	add.w	r6, r4, #11
 800554e:	f000 f865 	bl	800561c <__malloc_unlock>
 8005552:	f026 0607 	bic.w	r6, r6, #7
 8005556:	1d23      	adds	r3, r4, #4
 8005558:	1af2      	subs	r2, r6, r3
 800555a:	d0b6      	beq.n	80054ca <_malloc_r+0x22>
 800555c:	1b9b      	subs	r3, r3, r6
 800555e:	50a3      	str	r3, [r4, r2]
 8005560:	e7b3      	b.n	80054ca <_malloc_r+0x22>
 8005562:	6862      	ldr	r2, [r4, #4]
 8005564:	42a3      	cmp	r3, r4
 8005566:	bf0c      	ite	eq
 8005568:	6032      	streq	r2, [r6, #0]
 800556a:	605a      	strne	r2, [r3, #4]
 800556c:	e7ec      	b.n	8005548 <_malloc_r+0xa0>
 800556e:	4623      	mov	r3, r4
 8005570:	6864      	ldr	r4, [r4, #4]
 8005572:	e7b2      	b.n	80054da <_malloc_r+0x32>
 8005574:	4634      	mov	r4, r6
 8005576:	6876      	ldr	r6, [r6, #4]
 8005578:	e7b9      	b.n	80054ee <_malloc_r+0x46>
 800557a:	230c      	movs	r3, #12
 800557c:	4638      	mov	r0, r7
 800557e:	603b      	str	r3, [r7, #0]
 8005580:	f000 f84c 	bl	800561c <__malloc_unlock>
 8005584:	e7a1      	b.n	80054ca <_malloc_r+0x22>
 8005586:	6025      	str	r5, [r4, #0]
 8005588:	e7de      	b.n	8005548 <_malloc_r+0xa0>
 800558a:	bf00      	nop
 800558c:	200001e8 	.word	0x200001e8

08005590 <_realloc_r>:
 8005590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005594:	4680      	mov	r8, r0
 8005596:	4614      	mov	r4, r2
 8005598:	460e      	mov	r6, r1
 800559a:	b921      	cbnz	r1, 80055a6 <_realloc_r+0x16>
 800559c:	4611      	mov	r1, r2
 800559e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055a2:	f7ff bf81 	b.w	80054a8 <_malloc_r>
 80055a6:	b92a      	cbnz	r2, 80055b4 <_realloc_r+0x24>
 80055a8:	f7ff ff16 	bl	80053d8 <_free_r>
 80055ac:	4625      	mov	r5, r4
 80055ae:	4628      	mov	r0, r5
 80055b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055b4:	f000 f838 	bl	8005628 <_malloc_usable_size_r>
 80055b8:	4284      	cmp	r4, r0
 80055ba:	4607      	mov	r7, r0
 80055bc:	d802      	bhi.n	80055c4 <_realloc_r+0x34>
 80055be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80055c2:	d812      	bhi.n	80055ea <_realloc_r+0x5a>
 80055c4:	4621      	mov	r1, r4
 80055c6:	4640      	mov	r0, r8
 80055c8:	f7ff ff6e 	bl	80054a8 <_malloc_r>
 80055cc:	4605      	mov	r5, r0
 80055ce:	2800      	cmp	r0, #0
 80055d0:	d0ed      	beq.n	80055ae <_realloc_r+0x1e>
 80055d2:	42bc      	cmp	r4, r7
 80055d4:	4622      	mov	r2, r4
 80055d6:	4631      	mov	r1, r6
 80055d8:	bf28      	it	cs
 80055da:	463a      	movcs	r2, r7
 80055dc:	f7ff fbac 	bl	8004d38 <memcpy>
 80055e0:	4631      	mov	r1, r6
 80055e2:	4640      	mov	r0, r8
 80055e4:	f7ff fef8 	bl	80053d8 <_free_r>
 80055e8:	e7e1      	b.n	80055ae <_realloc_r+0x1e>
 80055ea:	4635      	mov	r5, r6
 80055ec:	e7df      	b.n	80055ae <_realloc_r+0x1e>
	...

080055f0 <_sbrk_r>:
 80055f0:	b538      	push	{r3, r4, r5, lr}
 80055f2:	2300      	movs	r3, #0
 80055f4:	4d05      	ldr	r5, [pc, #20]	; (800560c <_sbrk_r+0x1c>)
 80055f6:	4604      	mov	r4, r0
 80055f8:	4608      	mov	r0, r1
 80055fa:	602b      	str	r3, [r5, #0]
 80055fc:	f7fc fcb0 	bl	8001f60 <_sbrk>
 8005600:	1c43      	adds	r3, r0, #1
 8005602:	d102      	bne.n	800560a <_sbrk_r+0x1a>
 8005604:	682b      	ldr	r3, [r5, #0]
 8005606:	b103      	cbz	r3, 800560a <_sbrk_r+0x1a>
 8005608:	6023      	str	r3, [r4, #0]
 800560a:	bd38      	pop	{r3, r4, r5, pc}
 800560c:	200001f0 	.word	0x200001f0

08005610 <__malloc_lock>:
 8005610:	4801      	ldr	r0, [pc, #4]	; (8005618 <__malloc_lock+0x8>)
 8005612:	f000 b811 	b.w	8005638 <__retarget_lock_acquire_recursive>
 8005616:	bf00      	nop
 8005618:	200001f4 	.word	0x200001f4

0800561c <__malloc_unlock>:
 800561c:	4801      	ldr	r0, [pc, #4]	; (8005624 <__malloc_unlock+0x8>)
 800561e:	f000 b80c 	b.w	800563a <__retarget_lock_release_recursive>
 8005622:	bf00      	nop
 8005624:	200001f4 	.word	0x200001f4

08005628 <_malloc_usable_size_r>:
 8005628:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800562c:	1f18      	subs	r0, r3, #4
 800562e:	2b00      	cmp	r3, #0
 8005630:	bfbc      	itt	lt
 8005632:	580b      	ldrlt	r3, [r1, r0]
 8005634:	18c0      	addlt	r0, r0, r3
 8005636:	4770      	bx	lr

08005638 <__retarget_lock_acquire_recursive>:
 8005638:	4770      	bx	lr

0800563a <__retarget_lock_release_recursive>:
 800563a:	4770      	bx	lr

0800563c <_init>:
 800563c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800563e:	bf00      	nop
 8005640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005642:	bc08      	pop	{r3}
 8005644:	469e      	mov	lr, r3
 8005646:	4770      	bx	lr

08005648 <_fini>:
 8005648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800564a:	bf00      	nop
 800564c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800564e:	bc08      	pop	{r3}
 8005650:	469e      	mov	lr, r3
 8005652:	4770      	bx	lr
